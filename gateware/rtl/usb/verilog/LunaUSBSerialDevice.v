/* Generated by Yosys 0.55+46 (git sha1 aa1daa702, clang++ 18.1.3 -fPIC -O3) */

module LunaUSBSerialDevice(io__d_n__i, rx__ready, tx__valid, tx__first, tx__last, tx__payload, usb_clk, usb_rst, usb_io_clk, connect, clk, rst, io__d_p__o, io__d_p__oe, io__d_n__o, io__d_n__oe, io__pullup__o, rx__valid, rx__first, rx__last, rx__payload
, tx__ready, io__d_p__i);
  wire [9:0] \$1 ;
  input clk;
  wire clk;
  input connect;
  wire connect;
  wire \connect$37 ;
  wire first;
  wire \first$33 ;
  input io__d_n__i;
  wire io__d_n__i;
  output io__d_n__o;
  wire io__d_n__o;
  output io__d_n__oe;
  wire io__d_n__oe;
  input io__d_p__i;
  wire io__d_p__i;
  output io__d_p__o;
  wire io__d_p__o;
  output io__d_p__oe;
  wire io__d_p__oe;
  output io__pullup__o;
  wire io__pullup__o;
  wire last;
  wire \last$34 ;
  wire [7:0] payload;
  wire [7:0] \payload$35 ;
  wire phy_reset;
  wire ready;
  wire \ready$36 ;
  input rst;
  wire rst;
  output rx__first;
  wire rx__first;
  output rx__last;
  wire rx__last;
  output [7:0] rx__payload;
  wire [7:0] rx__payload;
  input rx__ready;
  wire rx__ready;
  output rx__valid;
  wire rx__valid;
  input tx__first;
  wire tx__first;
  input tx__last;
  wire tx__last;
  input [7:0] tx__payload;
  wire [7:0] tx__payload;
  output tx__ready;
  wire tx__ready;
  input tx__valid;
  wire tx__valid;
  input usb_clk;
  wire usb_clk;
  wire \usb_clk$25 ;
  input usb_io_clk;
  wire usb_io_clk;
  wire \usb_io_clk$26 ;
  input usb_rst;
  wire usb_rst;
  wire \usb_rst$23 ;
  wire valid;
  wire \valid$32 ;
  \LunaUSBSerialDevice.usb0  usb0 (
    .connect(connect),
    .first(tx__first),
    .io__d_n__i(io__d_n__i),
    .io__d_n__o(io__d_n__o),
    .io__d_n__oe(io__d_n__oe),
    .io__d_p__i(io__d_p__i),
    .io__d_p__o(io__d_p__o),
    .io__d_p__oe(io__d_p__oe),
    .io__pullup__o(io__pullup__o),
    .last(tx__last),
    .payload(tx__payload),
    .\port$1347$0 (\$1 ),
    .ready(tx__ready),
    .\ready$18 (rx__ready),
    .usb_clk(usb_clk),
    .usb_io_clk(usb_io_clk),
    .usb_rst(usb_rst),
    .valid(tx__valid),
    .\valid$10 (rx__valid)
  );
  \LunaUSBSerialDevice.usb_reset  usb_reset (
    .clk(clk),
    .phy_reset(phy_reset),
    .rst(rst)
  );
  assign \usb_rst$23  = usb_rst;
  assign \usb_clk$25  = usb_clk;
  assign \usb_io_clk$26  = usb_io_clk;
  assign valid = tx__valid;
  assign first = tx__first;
  assign last = tx__last;
  assign payload = tx__payload;
  assign ready = tx__ready;
  assign \valid$32  = rx__valid;
  assign \first$33  = \$1 [9];
  assign \last$34  = \$1 [8];
  assign \payload$35  = \$1 [7:0];
  assign \ready$36  = rx__ready;
  assign \connect$37  = connect;
  assign rx__first = \$1 [9];
  assign rx__last = \$1 [8];
  assign rx__payload = \$1 [7:0];
endmodule

module \LunaUSBSerialDevice.usb0 (io__d_n__i, \ready$18 , valid, first, last, payload, usb_clk, usb_rst, usb_io_clk, connect, io__pullup__o, \valid$10 , \port$1347$0 , ready, io__d_p__o, io__d_n__o, io__d_p__oe, io__d_n__oe, io__d_p__i);
  wire [9:0] \$1 ;
  input connect;
  wire connect;
  wire \connect$21 ;
  input first;
  wire first;
  wire \first$12 ;
  wire \first$13 ;
  wire \first$3 ;
  input io__d_n__i;
  wire io__d_n__i;
  output io__d_n__o;
  wire io__d_n__o;
  output io__d_n__oe;
  wire io__d_n__oe;
  input io__d_p__i;
  wire io__d_p__i;
  output io__d_p__o;
  wire io__d_p__o;
  output io__d_p__oe;
  wire io__d_p__oe;
  output io__pullup__o;
  wire io__pullup__o;
  input last;
  wire last;
  wire \last$14 ;
  wire \last$15 ;
  wire \last$5 ;
  input [7:0] payload;
  wire [7:0] payload;
  wire [7:0] \payload$16 ;
  wire [7:0] \payload$17 ;
  wire [7:0] \payload$7 ;
  output [9:0] \port$1347$0 ;
  wire [9:0] \port$1347$0 ;
  output ready;
  wire ready;
  input \ready$18 ;
  wire \ready$18 ;
  wire \ready$19 ;
  wire \ready$9 ;
  input usb_clk;
  wire usb_clk;
  input usb_io_clk;
  wire usb_io_clk;
  input usb_rst;
  wire usb_rst;
  input valid;
  wire valid;
  wire \valid$1 ;
  output \valid$10 ;
  wire \valid$10 ;
  wire \valid$11 ;
  \LunaUSBSerialDevice.usb0.usb  usb (
    .connect(connect),
    .\first$220 (first),
    .io__d_n__i(io__d_n__i),
    .io__d_n__o(io__d_n__o),
    .io__d_n__oe(io__d_n__oe),
    .io__d_p__i(io__d_p__i),
    .io__d_p__o(io__d_p__o),
    .io__d_p__oe(io__d_p__oe),
    .\last$221 (last),
    .\payload$222 (payload),
    .\port$1347$0 (\$1 ),
    .\ready$216 (\ready$18 ),
    .\ready$223 (ready),
    .term_select(io__pullup__o),
    .usb_clk(usb_clk),
    .usb_io_clk(usb_io_clk),
    .usb_rst(usb_rst),
    .\valid$212 (\valid$10 ),
    .\valid$219 (valid)
  );
  assign \valid$1  = valid;
  assign \first$3  = first;
  assign \last$5  = last;
  assign \payload$7  = payload;
  assign \ready$9  = ready;
  assign \valid$11  = \valid$10 ;
  assign \first$12  = \$1 [9];
  assign \first$13  = \$1 [9];
  assign \last$14  = \$1 [8];
  assign \last$15  = \$1 [8];
  assign \payload$16  = \$1 [7:0];
  assign \payload$17  = \$1 [7:0];
  assign \ready$19  = \ready$18 ;
  assign \connect$21  = connect;
  assign \port$1347$0  = \$1 ;
endmodule

module \LunaUSBSerialDevice.usb0.usb (io__d_n__i, \ready$216 , \valid$219 , \first$220 , \last$221 , \payload$222 , usb_clk, usb_rst, usb_io_clk, connect, term_select, \valid$212 , \port$1347$0 , \ready$223 , io__d_p__o, io__d_n__o, io__d_p__oe, io__d_n__oe, io__d_p__i);
  reg \$auto$verilog_backend.cc:2373:dump_module$1  = 0;
  wire [1:0] \$1 ;
  wire \$2 ;
  wire [3:0] \$3 ;
  reg [6:0] \$4 ;
  reg [7:0] \$5 ;
  reg [10:0] \$6 ;
  reg [2:0] \$7 ;
  wire \$8 ;
  wire [9:0] \$9 ;
  wire ack;
  wire \ack$155 ;
  wire \ack$158 ;
  wire \ack$192 ;
  wire \ack$195 ;
  wire \ack$207 ;
  wire \ack$241 ;
  wire \ack$244 ;
  wire \ack$39 ;
  wire \ack$75 ;
  (* init = 7'h00 *)
  wire [6:0] active_address;
  reg [7:0] active_config = 8'h00;
  (* init = 8'h00 *)
  wire [7:0] \active_config$165 ;
  wire [3:0] active_pid;
  reg [6:0] address = 7'h00;
  wire [6:0] \address$135 ;
  wire [6:0] \address$18 ;
  wire [6:0] \address$183 ;
  wire [6:0] \address$19 ;
  wire [6:0] \address$232 ;
  (* init = 7'h00 *)
  wire [6:0] \address$8 ;
  wire address_changed;
  wire \address_changed$162 ;
  wire bus_busy;
  wire bus_reset;
  wire [5:0] clear_endpoint_halt_in;
  wire [5:0] \clear_endpoint_halt_in$217 ;
  wire \clear_endpoint_halt_in$217.direction ;
  wire \clear_endpoint_halt_in$217.enable ;
  wire [3:0] \clear_endpoint_halt_in$217.number ;
  wire [5:0] \clear_endpoint_halt_in$224 ;
  wire \clear_endpoint_halt_in$224.direction ;
  wire \clear_endpoint_halt_in$224.enable ;
  wire [3:0] \clear_endpoint_halt_in$224.number ;
  wire \clear_endpoint_halt_in.direction ;
  wire \clear_endpoint_halt_in.enable ;
  wire [3:0] \clear_endpoint_halt_in.number ;
  wire [5:0] clear_endpoint_halt_out;
  wire \clear_endpoint_halt_out.direction ;
  wire \clear_endpoint_halt_out.enable ;
  wire [3:0] \clear_endpoint_halt_out.number ;
  wire config_changed;
  wire \config_changed$166 ;
  (* init = 8'h00 *)
  wire [7:0] configuration;
  input connect;
  wire connect;
  wire [15:0] crc;
  wire [15:0] \crc$123 ;
  wire [15:0] \crc$126 ;
  wire [15:0] \crc$133 ;
  wire crc_mismatch;
  wire [1:0] current_speed;
  wire [7:0] data;
  wire [7:0] \data$251 ;
  wire [7:0] \data$252 ;
  wire [7:0] \data$253 ;
  wire [1:0] data_pid;
  wire disconnect;
  wire dm_pulldown;
  wire dp_pulldown;
  wire [3:0] endpoint;
  wire [3:0] \endpoint$136 ;
  wire [3:0] \endpoint$174 ;
  wire [3:0] \endpoint$204 ;
  wire [3:0] \endpoint$21 ;
  wire [3:0] \endpoint$218 ;
  wire first;
  wire \first$151 ;
  wire \first$177 ;
  wire \first$215 ;
  input \first$220 ;
  wire \first$220 ;
  wire \first$226 ;
  wire \first$67 ;
  wire [10:0] frame;
  wire [10:0] \frame$139 ;
  wire [10:0] \frame$186 ;
  wire [10:0] \frame$235 ;
  wire [10:0] \frame$27 ;
  reg [10:0] frame_number = 11'h000;
  wire full_speed_only;
  wire \full_speed_only$95 ;
  input io__d_n__i;
  wire io__d_n__i;
  output io__d_n__o;
  wire io__d_n__o;
  output io__d_n__oe;
  wire io__d_n__oe;
  input io__d_p__i;
  wire io__d_p__i;
  output io__d_p__o;
  wire io__d_p__o;
  output io__d_p__oe;
  wire io__d_p__oe;
  wire io__pullup__o;
  wire is_in;
  wire \is_in$141 ;
  wire \is_in$188 ;
  wire \is_in$237 ;
  wire \is_in$31 ;
  wire is_out;
  wire \is_out$142 ;
  wire \is_out$189 ;
  wire \is_out$205 ;
  wire \is_out$238 ;
  wire \is_out$33 ;
  wire is_ping;
  wire \is_ping$144 ;
  wire \is_ping$191 ;
  wire \is_ping$209 ;
  wire \is_ping$240 ;
  wire \is_ping$37 ;
  wire is_setup;
  wire \is_setup$143 ;
  wire \is_setup$190 ;
  wire \is_setup$239 ;
  wire \is_setup$35 ;
  wire issue_ack;
  wire issue_nak;
  wire issue_stall;
  wire last;
  wire \last$152 ;
  wire \last$178 ;
  wire \last$214 ;
  input \last$221 ;
  wire \last$221 ;
  wire \last$227 ;
  wire \last$69 ;
  wire [1:0] line_state;
  wire [1:0] \line_state$4 ;
  wire low_speed_only;
  wire \low_speed_only$93 ;
  reg [2:0] microframe_number = 3'h0;
  wire nak;
  wire \nak$156 ;
  wire \nak$159 ;
  wire \nak$193 ;
  wire \nak$196 ;
  wire \nak$211 ;
  wire \nak$242 ;
  wire \nak$245 ;
  wire \nak$41 ;
  wire \nak$77 ;
  wire [6:0] new_address;
  wire [6:0] \new_address$163 ;
  wire [7:0] new_config;
  wire [7:0] \new_config$167 ;
  wire new_frame;
  reg \new_frame$102 ;
  wire \new_frame$140 ;
  wire \new_frame$187 ;
  wire \new_frame$236 ;
  wire \new_frame$29 ;
  wire new_token;
  wire \new_token$137 ;
  wire \new_token$184 ;
  wire \new_token$23 ;
  wire \new_token$233 ;
  wire next;
  wire \next$170 ;
  wire \next$200 ;
  wire \next$53 ;
  wire nyet;
  wire \nyet$161 ;
  wire \nyet$198 ;
  wire \nyet$247 ;
  wire \nyet$45 ;
  wire [1:0] op_mode;
  wire [1:0] operating_mode;
  wire packet_complete;
  wire [7:0] payload;
  wire [7:0] \payload$153 ;
  wire [7:0] \payload$171 ;
  wire [7:0] \payload$179 ;
  wire [7:0] \payload$201 ;
  wire [7:0] \payload$213 ;
  input [7:0] \payload$222 ;
  wire [7:0] \payload$222 ;
  wire [7:0] \payload$228 ;
  wire [7:0] \payload$55 ;
  wire [7:0] \payload$70 ;
  wire [7:0] \payload$71 ;
  wire [3:0] pid;
  wire [3:0] \pid$134 ;
  wire [3:0] \pid$17 ;
  wire [3:0] \pid$182 ;
  wire [3:0] \pid$231 ;
  output [9:0] \port$1347$0 ;
  wire [9:0] \port$1347$0 ;
  wire ready;
  wire \ready$154 ;
  wire \ready$180 ;
  input \ready$216 ;
  wire \ready$216 ;
  output \ready$223 ;
  wire \ready$223 ;
  wire \ready$229 ;
  wire \ready$254 ;
  wire \ready$255 ;
  wire \ready$73 ;
  wire \ready$86 ;
  wire ready_for_response;
  wire \ready_for_response$138 ;
  wire \ready_for_response$185 ;
  wire \ready_for_response$210 ;
  wire \ready_for_response$234 ;
  wire \ready_for_response$25 ;
  wire \ready_for_response$61 ;
  wire reset_detected;
  wire rx_active;
  wire rx_activity_led;
  wire rx_complete;
  wire \rx_complete$202 ;
  wire [7:0] rx_data;
  wire [7:0] \rx_data$10 ;
  wire rx_invalid;
  wire \rx_invalid$173 ;
  wire \rx_invalid$203 ;
  wire [1:0] rx_pid_toggle;
  wire [1:0] \rx_pid_toggle$206 ;
  wire rx_ready_for_response;
  wire \rx_ready_for_response$172 ;
  wire \rx_ready_for_response$208 ;
  wire rx_timeout;
  wire \rx_timeout$148 ;
  wire rx_valid;
  wire \rx_valid$12 ;
  wire session_end;
  wire sof_detected;
  wire [1:0] speed;
  wire [1:0] \speed$14 ;
  wire [1:0] \speed$145 ;
  wire [1:0] \speed$15 ;
  wire [1:0] \speed$46 ;
  wire stall;
  wire \stall$157 ;
  wire \stall$160 ;
  wire \stall$194 ;
  wire \stall$197 ;
  wire \stall$243 ;
  wire \stall$246 ;
  wire \stall$43 ;
  wire \stall$79 ;
  wire start;
  wire \start$121 ;
  wire \start$124 ;
  wire \start$130 ;
  wire \start$131 ;
  wire \start$132 ;
  wire \start$149 ;
  wire suspended;
  wire \suspended$105 ;
  output term_select;
  wire term_select;
  wire termination_select;
  wire tx_activity_led;
  wire tx_allowed;
  wire \tx_allowed$127 ;
  wire \tx_allowed$146 ;
  wire [7:0] tx_data;
  wire [7:0] \tx_data$89 ;
  wire [1:0] tx_pid_toggle;
  wire [1:0] \tx_pid_toggle$168 ;
  wire [1:0] \tx_pid_toggle$181 ;
  wire [1:0] \tx_pid_toggle$230 ;
  wire tx_ready;
  wire tx_timeout;
  wire \tx_timeout$147 ;
  wire tx_valid;
  wire \tx_valid$88 ;
  input usb_clk;
  wire usb_clk;
  input usb_io_clk;
  wire usb_io_clk;
  input usb_rst;
  wire usb_rst;
  wire valid;
  wire \valid$150 ;
  wire \valid$169 ;
  wire \valid$176 ;
  wire \valid$199 ;
  output \valid$212 ;
  wire \valid$212 ;
  input \valid$219 ;
  wire \valid$219 ;
  wire \valid$225 ;
  wire \valid$248 ;
  wire \valid$249 ;
  wire \valid$250 ;
  wire \valid$51 ;
  wire \valid$64 ;
  wire \valid$65 ;
  wire \valid$85 ;
  wire vbus_connected;
  wire [1:0] xcvr_select;
  assign disconnect = ~ connect;
  assign \tx_valid$88  = tx_valid & \ready$86 ;
  assign term_select = termination_select & connect;
  assign \$2  = frame != frame_number;
  assign \$3  = microframe_number + 1'h1;
  always @(posedge usb_clk)
    address <= \$4 ;
  always @(posedge usb_clk)
    active_config <= \$5 ;
  always @(posedge usb_clk)
    frame_number <= \$6 ;
  always @(posedge usb_clk)
    microframe_number <= \$7 ;
  \LunaUSBSerialDevice.usb0.usb.USBControlEndpoint  USBControlEndpoint (
    .ack(\ack$155 ),
    .\ack$80 (ack),
    .active_config(active_config),
    .address(\address$18 ),
    .address_changed(\address_changed$162 ),
    .clear_endpoint_halt_out(clear_endpoint_halt_out),
    .config_changed(\config_changed$166 ),
    .crc(crc),
    .endpoint(endpoint),
    .first(\first$151 ),
    .frame(frame),
    .is_in(is_in),
    .is_out(is_out),
    .is_ping(is_ping),
    .is_setup(is_setup),
    .last(\last$152 ),
    .nak(\nak$156 ),
    .\nak$82 (nak),
    .new_address(\new_address$163 ),
    .new_config(\new_config$167 ),
    .new_frame(new_frame),
    .new_token(new_token),
    .\next$107 (next),
    .nyet(nyet),
    .payload(\payload$153 ),
    .\payload$109 (payload),
    .pid(pid),
    .ready(ready),
    .ready_for_response(ready_for_response),
    .rx_active(rx_active),
    .rx_data(rx_data),
    .\rx_invalid$113 (rx_invalid),
    .\rx_ready_for_response$111 (rx_ready_for_response),
    .rx_timeout(rx_timeout),
    .rx_valid(rx_valid),
    .speed(speed),
    .stall(\stall$157 ),
    .\stall$84 (stall),
    .start(\start$132 ),
    .\start$34 (\start$149 ),
    .tx_allowed(tx_allowed),
    .tx_data_pid(\$8 ),
    .tx_timeout(tx_timeout),
    .usb_clk(usb_clk),
    .usb_rst(usb_rst),
    .valid(\valid$150 ),
    .\valid$105 (valid)
  );
  \LunaUSBSerialDevice.usb0.usb.USBStreamInEndpoint  USBStreamInEndpoint (
    .\ack$60 (ack),
    .address(\address$18 ),
    .clear_endpoint_halt_in(clear_endpoint_halt_in),
    .endpoint(endpoint),
    .\first$21 (\first$177 ),
    .frame(frame),
    .is_in(is_in),
    .is_out(is_out),
    .is_ping(is_ping),
    .is_setup(is_setup),
    .\last$23 (\last$178 ),
    .nak(\nak$193 ),
    .\nak$62 (nak),
    .new_frame(new_frame),
    .new_token(new_token),
    .\nyet$66 (nyet),
    .\payload$25 (\payload$179 ),
    .pid(pid),
    .\ready$27 (ready),
    .ready_for_response(ready_for_response),
    .\stall$64 (stall),
    .tx_pid_toggle(\tx_pid_toggle$181 ),
    .usb_clk(usb_clk),
    .usb_rst(usb_rst),
    .\valid$19 (\valid$176 )
  );
  \LunaUSBSerialDevice.usb0.usb.USBStreamInEndpoint_281473594507584  USBStreamInEndpoint_281473594507584 (
    .\ack$60 (ack),
    .address(\address$18 ),
    .clear_endpoint_halt_in(clear_endpoint_halt_in),
    .endpoint(endpoint),
    .first(\first$220 ),
    .\first$21 (\first$226 ),
    .frame(frame),
    .is_in(is_in),
    .is_out(is_out),
    .is_ping(is_ping),
    .is_setup(is_setup),
    .last(\last$221 ),
    .\last$23 (\last$227 ),
    .nak(\nak$242 ),
    .\nak$62 (nak),
    .new_frame(new_frame),
    .new_token(new_token),
    .\nyet$66 (nyet),
    .payload(\payload$222 ),
    .\payload$25 (\payload$228 ),
    .pid(pid),
    .ready(\ready$223 ),
    .\ready$27 (ready),
    .ready_for_response(ready_for_response),
    .\stall$64 (stall),
    .tx_pid_toggle(\tx_pid_toggle$230 ),
    .usb_clk(usb_clk),
    .usb_rst(usb_rst),
    .valid(\valid$219 ),
    .\valid$19 (\valid$225 )
  );
  \LunaUSBSerialDevice.usb0.usb.USBStreamOutEndpoint  USBStreamOutEndpoint (
    .ack(\ack$207 ),
    .clear_endpoint_halt_in(clear_endpoint_halt_in),
    .complete_in(rx_complete),
    .endpoint(endpoint),
    .invalid_in(rx_invalid),
    .is_out(is_out),
    .is_ping(is_ping),
    .nak(\nak$211 ),
    .next(next),
    .payload(payload),
    .\port$1761$3 (active_pid[3]),
    .read_data(\$9 ),
    .read_en(\ready$216 ),
    .ready_for_response(ready_for_response),
    .rx_ready_for_response(rx_ready_for_response),
    .usb_clk(usb_clk),
    .usb_rst(usb_rst),
    .valid(valid),
    .\valid$35 (\valid$212 )
  );
  \LunaUSBSerialDevice.usb0.usb.data_crc  data_crc (
    .output_crc(crc),
    .rx_data(rx_data),
    .rx_valid(rx_valid),
    .start(start),
    .\start$3 (\start$121 ),
    .\start$4 (\start$130 ),
    .tx_data(tx_data),
    .tx_valid(\tx_valid$88 ),
    .usb_clk(usb_clk),
    .usb_rst(usb_rst)
  );
  \LunaUSBSerialDevice.usb0.usb.endpoint_mux  endpoint_mux (
    .ack(ack),
    .\ack$180 (issue_ack),
    .\ack$181 (\ack$155 ),
    .\ack$183 (\ack$207 ),
    .active_address(address),
    .active_config(active_config),
    .address(\address$18 ),
    .address_changed(\address_changed$162 ),
    .\address_changed$154 (address_changed),
    .clear_endpoint_halt_in(clear_endpoint_halt_in),
    .\clear_endpoint_halt_out$205 (clear_endpoint_halt_out),
    .config_changed(\config_changed$166 ),
    .\config_changed$164 (config_changed),
    .crc(crc),
    .endpoint(endpoint),
    .first(first),
    .\first$221 (\first$151 ),
    .\first$225 (\first$177 ),
    .\first$229 (\first$226 ),
    .frame(frame),
    .is_in(is_in),
    .is_out(is_out),
    .is_ping(is_ping),
    .is_setup(is_setup),
    .last(last),
    .\last$222 (\last$152 ),
    .\last$226 (\last$178 ),
    .\last$230 (\last$227 ),
    .nak(nak),
    .\nak$185 (issue_nak),
    .\nak$186 (\nak$156 ),
    .\nak$187 (\nak$193 ),
    .\nak$188 (\nak$211 ),
    .\nak$189 (\nak$242 ),
    .new_address(new_address),
    .\new_address$156 (\new_address$163 ),
    .new_config(new_config),
    .\new_config$166 (\new_config$167 ),
    .new_frame(new_frame),
    .new_token(new_token),
    .next(next),
    .nyet(nyet),
    .payload(payload),
    .\payload$176 (\payload$70 ),
    .\payload$223 (\payload$153 ),
    .\payload$227 (\payload$179 ),
    .\payload$231 (\payload$228 ),
    .pid(pid),
    .\port$1761$3 (active_pid[3]),
    .\port$1909$0 (\$8 ),
    .ready(ready),
    .ready_for_response(ready_for_response),
    .rx_complete(rx_complete),
    .rx_invalid(rx_invalid),
    .rx_ready_for_response(rx_ready_for_response),
    .rx_timeout(rx_timeout),
    .speed(speed),
    .stall(stall),
    .\stall$190 (issue_stall),
    .\stall$191 (\stall$157 ),
    .start(\start$130 ),
    .\start$196 (\start$132 ),
    .\start$200 (\start$131 ),
    .\start$201 (\start$149 ),
    .tx_allowed(tx_allowed),
    .tx_pid_toggle(data_pid),
    .\tx_pid_toggle$216 (\tx_pid_toggle$181 ),
    .\tx_pid_toggle$218 (\tx_pid_toggle$230 ),
    .tx_timeout(tx_timeout),
    .usb_clk(usb_clk),
    .usb_rst(usb_rst),
    .valid(valid),
    .\valid$170 (\valid$64 ),
    .\valid$209 (\valid$150 ),
    .\valid$211 (\valid$176 ),
    .\valid$213 (\valid$225 )
  );
  \LunaUSBSerialDevice.usb0.usb.handshake_detector  handshake_detector (
    .ack(ack),
    .nak(nak),
    .nyet(nyet),
    .rx_active(rx_active),
    .rx_data(rx_data),
    .rx_valid(rx_valid),
    .stall(stall),
    .usb_clk(usb_clk),
    .usb_rst(usb_rst)
  );
  \LunaUSBSerialDevice.usb0.usb.handshake_generator  handshake_generator (
    .data(\data$253 ),
    .issue_ack(issue_ack),
    .issue_nak(issue_nak),
    .issue_stall(issue_stall),
    .ready(\ready$86 ),
    .usb_clk(usb_clk),
    .usb_rst(usb_rst),
    .valid(\valid$250 )
  );
  \LunaUSBSerialDevice.usb0.usb.receiver  receiver (
    .active_pid(active_pid),
    .crc(crc),
    .crc_mismatch(rx_invalid),
    .next(next),
    .packet_complete(rx_complete),
    .payload(payload),
    .ready_for_response(rx_ready_for_response),
    .rx_active(rx_active),
    .rx_data(rx_data),
    .rx_valid(rx_valid),
    .start(\start$121 ),
    .\start$19 (\start$124 ),
    .tx_allowed(tx_allowed),
    .usb_clk(usb_clk),
    .usb_rst(usb_rst),
    .valid(valid)
  );
  \LunaUSBSerialDevice.usb0.usb.reset_sequencer  reset_sequencer (
    .bus_reset(reset_detected),
    .current_speed(speed),
    .data(\data$251 ),
    .disconnect(disconnect),
    .full_speed_only(1'h1),
    .low_speed_only(1'h0),
    .operating_mode(op_mode),
    .\port$0$2 (io__d_p__i),
    .\port$0$3 (io__d_n__i),
    .suspended(suspended),
    .termination_select(termination_select),
    .usb_clk(usb_clk),
    .usb_rst(usb_rst),
    .valid(\valid$248 ),
    .vbus_connected(1'h1)
  );
  \LunaUSBSerialDevice.usb0.usb.timer  timer (
    .rx_to_tx_at_max(tx_timeout),
    .rx_to_tx_at_min(tx_allowed),
    .speed(speed),
    .start(\start$124 ),
    .\start$3 (\start$131 ),
    .tx_to_rx_timeout(rx_timeout),
    .usb_clk(usb_clk),
    .usb_rst(usb_rst)
  );
  \LunaUSBSerialDevice.usb0.usb.token_detector  token_detector (
    .address(address),
    .\address$22 (\address$18 ),
    .endpoint(endpoint),
    .frame(frame),
    .is_in(is_in),
    .is_out(is_out),
    .is_ping(is_ping),
    .is_setup(is_setup),
    .new_frame(new_frame),
    .new_token(new_token),
    .pid(pid),
    .ready_for_response(ready_for_response),
    .rx_active(rx_active),
    .rx_data(rx_data),
    .rx_valid(rx_valid),
    .speed(speed),
    .usb_clk(usb_clk),
    .usb_rst(usb_rst)
  );
  \LunaUSBSerialDevice.usb0.usb.translator  translator (
    .io__d_n__i(io__d_n__i),
    .io__d_n__o(io__d_n__o),
    .io__d_n__oe(io__d_n__oe),
    .io__d_p__i(io__d_p__i),
    .io__d_p__o(io__d_p__o),
    .io__d_p__oe(io__d_p__oe),
    .io__pullup__o(term_select),
    .o_pkt_in_progress(rx_active),
    .op_mode(op_mode),
    .rx_data(rx_data),
    .rx_valid(rx_valid),
    .tx_data(tx_data),
    .tx_ready(\ready$86 ),
    .tx_valid(tx_valid),
    .usb_clk(usb_clk),
    .usb_io_clk(usb_io_clk),
    .usb_rst(usb_rst)
  );
  \LunaUSBSerialDevice.usb0.usb.transmitter  transmitter (
    .crc(crc),
    .data(\data$252 ),
    .data_pid(data_pid),
    .first(first),
    .last(last),
    .payload(\payload$70 ),
    .ready(ready),
    .\ready$8 (\ready$86 ),
    .start(start),
    .usb_clk(usb_clk),
    .usb_rst(usb_rst),
    .valid(\valid$249 ),
    .\valid$6 (\valid$64 )
  );
  \LunaUSBSerialDevice.usb0.usb.tx_multiplexer  tx_multiplexer (
    .data(tx_data),
    .\data$6 (\data$251 ),
    .\data$7 (\data$252 ),
    .\data$8 (\data$253 ),
    .ready(\ready$86 ),
    .valid(\valid$248 ),
    .\valid$2 (\valid$249 ),
    .\valid$3 (\valid$250 ),
    .\valid$9 (tx_valid)
  );
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$1 ) begin end
    \new_frame$102  = 1'h0;
    if (new_frame) begin
      \new_frame$102  = \$2 ;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$1 ) begin end
    \$4  = address;
    if (address_changed) begin
      \$4  = new_address;
    end
    if (reset_detected) begin
      \$4  = 7'h00;
    end
    if (usb_rst) begin
      \$4  = 7'h00;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$1 ) begin end
    \$5  = active_config;
    if (config_changed) begin
      \$5  = new_config;
    end
    if (reset_detected) begin
      \$5  = 8'h00;
    end
    if (usb_rst) begin
      \$5  = 8'h00;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$1 ) begin end
    \$6  = frame_number;
    if (new_frame) begin
      \$6  = frame;
    end
    if (usb_rst) begin
      \$6  = 11'h000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$1 ) begin end
    \$7  = microframe_number;
    if (new_frame) begin
      (* full_case = 32'd1 *)
      if (\new_frame$102 ) begin
        \$7  = 3'h0;
      end else begin
        \$7  = \$3 [2:0];
      end
    end
    if (usb_rst) begin
      \$7  = 3'h0;
    end
  end
  assign bus_busy = 1'h0;
  assign session_end = 1'h0;
  assign line_state = { io__d_p__i, io__d_n__i };
  assign \line_state$4  = { io__d_p__i, io__d_n__i };
  assign \address$8  = address;
  assign \rx_data$10  = rx_data;
  assign \rx_valid$12  = rx_valid;
  assign \speed$14  = speed;
  assign \speed$15  = speed;
  assign \pid$17  = pid;
  assign \address$19  = \address$18 ;
  assign \endpoint$21  = endpoint;
  assign \new_token$23  = new_token;
  assign \ready_for_response$25  = ready_for_response;
  assign \frame$27  = frame;
  assign \new_frame$29  = new_frame;
  assign \is_in$31  = is_in;
  assign \is_out$33  = is_out;
  assign \is_setup$35  = is_setup;
  assign \is_ping$37  = is_ping;
  assign \ack$39  = ack;
  assign \nak$41  = nak;
  assign \stall$43  = stall;
  assign \nyet$45  = nyet;
  assign \speed$46  = speed;
  assign configuration = active_config;
  assign active_address = address;
  assign \valid$51  = valid;
  assign \next$53  = next;
  assign \payload$55  = payload;
  assign packet_complete = rx_complete;
  assign crc_mismatch = rx_invalid;
  assign \ready_for_response$61  = rx_ready_for_response;
  assign rx_pid_toggle = { 1'h0, active_pid[3] };
  assign \valid$65  = \valid$64 ;
  assign \first$67  = first;
  assign \last$69  = last;
  assign \payload$71  = \payload$70 ;
  assign \ready$73  = ready;
  assign \ack$75  = issue_ack;
  assign \nak$77  = issue_nak;
  assign \stall$79  = issue_stall;
  assign tx_pid_toggle = data_pid;
  assign data = tx_data;
  assign \valid$85  = tx_valid;
  assign tx_ready = \ready$86 ;
  assign \tx_data$89  = tx_data;
  assign dm_pulldown = 1'h0;
  assign dp_pulldown = 1'h0;
  assign low_speed_only = \$1 [0];
  assign \low_speed_only$93  = 1'h0;
  assign \full_speed_only$95  = 1'h0;
  assign operating_mode = op_mode;
  assign xcvr_select = speed;
  assign current_speed = speed;
  assign \suspended$105  = suspended;
  assign sof_detected = new_frame;
  assign bus_reset = reset_detected;
  assign tx_activity_led = tx_valid;
  assign rx_activity_led = rx_valid;
  assign \crc$123  = crc;
  assign \crc$126  = crc;
  assign \tx_allowed$127  = tx_allowed;
  assign \crc$133  = crc;
  assign \pid$134  = pid;
  assign \address$135  = \address$18 ;
  assign \endpoint$136  = endpoint;
  assign \new_token$137  = new_token;
  assign \ready_for_response$138  = ready_for_response;
  assign \frame$139  = frame;
  assign \new_frame$140  = new_frame;
  assign \is_in$141  = is_in;
  assign \is_out$142  = is_out;
  assign \is_setup$143  = is_setup;
  assign \is_ping$144  = is_ping;
  assign \speed$145  = speed;
  assign \tx_allowed$146  = tx_allowed;
  assign \tx_timeout$147  = tx_timeout;
  assign \rx_timeout$148  = rx_timeout;
  assign \ready$154  = ready;
  assign \ack$158  = ack;
  assign \nak$159  = nak;
  assign \stall$160  = stall;
  assign \nyet$161  = nyet;
  assign \active_config$165  = active_config;
  assign \tx_pid_toggle$168  = { 1'h0, \$8  };
  assign \valid$169  = valid;
  assign \next$170  = next;
  assign \payload$171  = payload;
  assign \rx_ready_for_response$172  = rx_ready_for_response;
  assign \rx_invalid$173  = rx_invalid;
  assign \endpoint$174  = endpoint;
  assign \ready$180  = ready;
  assign \pid$182  = pid;
  assign \address$183  = \address$18 ;
  assign \new_token$184  = new_token;
  assign \ready_for_response$185  = ready_for_response;
  assign \frame$186  = frame;
  assign \new_frame$187  = new_frame;
  assign \is_in$188  = is_in;
  assign \is_out$189  = is_out;
  assign \is_setup$190  = is_setup;
  assign \is_ping$191  = is_ping;
  assign \ack$192  = 1'h0;
  assign \stall$194  = 1'h0;
  assign \ack$195  = ack;
  assign \nak$196  = nak;
  assign \stall$197  = stall;
  assign \nyet$198  = nyet;
  assign \valid$199  = valid;
  assign \next$200  = next;
  assign \payload$201  = payload;
  assign \rx_complete$202  = rx_complete;
  assign \rx_invalid$203  = rx_invalid;
  assign \endpoint$204  = endpoint;
  assign \is_out$205  = is_out;
  assign \rx_pid_toggle$206  = { 1'h0, active_pid[3] };
  assign \rx_ready_for_response$208  = rx_ready_for_response;
  assign \is_ping$209  = is_ping;
  assign \ready_for_response$210  = ready_for_response;
  assign \payload$213  = \$9 [7:0];
  assign \last$214  = \$9 [8];
  assign \first$215  = \$9 [9];
  assign \clear_endpoint_halt_in$217  = clear_endpoint_halt_in;
  assign \endpoint$218  = endpoint;
  assign \clear_endpoint_halt_in$224  = clear_endpoint_halt_in;
  assign \ready$229  = ready;
  assign \pid$231  = pid;
  assign \address$232  = \address$18 ;
  assign \new_token$233  = new_token;
  assign \ready_for_response$234  = ready_for_response;
  assign \frame$235  = frame;
  assign \new_frame$236  = new_frame;
  assign \is_in$237  = is_in;
  assign \is_out$238  = is_out;
  assign \is_setup$239  = is_setup;
  assign \is_ping$240  = is_ping;
  assign \ack$241  = 1'h0;
  assign \stall$243  = 1'h0;
  assign \ack$244  = ack;
  assign \nak$245  = nak;
  assign \stall$246  = stall;
  assign \nyet$247  = nyet;
  assign \ready$254  = \ready$86 ;
  assign \ready$255  = \ready$86 ;
  assign io__pullup__o = term_select;
  assign \port$1347$0  = \$9 ;
  assign \clear_endpoint_halt_out.enable  = clear_endpoint_halt_out[0];
  assign \clear_endpoint_halt_out.direction  = clear_endpoint_halt_out[1];
  assign \clear_endpoint_halt_out.number  = clear_endpoint_halt_out[5:2];
  assign \clear_endpoint_halt_in.enable  = clear_endpoint_halt_in[0];
  assign \clear_endpoint_halt_in.direction  = clear_endpoint_halt_in[1];
  assign \clear_endpoint_halt_in.number  = clear_endpoint_halt_in[5:2];
  assign \clear_endpoint_halt_in$217.enable  = clear_endpoint_halt_in[0];
  assign \clear_endpoint_halt_in$217.direction  = clear_endpoint_halt_in[1];
  assign \clear_endpoint_halt_in$217.number  = clear_endpoint_halt_in[5:2];
  assign \clear_endpoint_halt_in$224.enable  = clear_endpoint_halt_in[0];
  assign \clear_endpoint_halt_in$224.direction  = clear_endpoint_halt_in[1];
  assign \clear_endpoint_halt_in$224.number  = clear_endpoint_halt_in[5:2];
  assign vbus_connected = 1'h1;
  assign \$1  = 2'h0;
  assign full_speed_only = 1'h1;
endmodule

module \LunaUSBSerialDevice.usb0.usb.USBControlEndpoint (usb_rst, rx_valid, is_in, is_out, is_setup, is_ping, crc, active_config, rx_active, rx_data, speed, new_frame, new_token, frame, pid, address, endpoint, ready_for_response, ready, \rx_invalid$113 , \next$107 
, \valid$105 , \payload$109 , \rx_ready_for_response$111 , \ack$80 , \nak$82 , \stall$84 , nyet, tx_allowed, tx_timeout, rx_timeout, ack, \start$34 , start, valid, first, last, payload, tx_data_pid, nak, stall, address_changed
, new_address, config_changed, new_config, clear_endpoint_halt_out, usb_clk);
  reg \$auto$verilog_backend.cc:2373:dump_module$2  = 0;
  wire \$1 ;
  wire \$10 ;
  wire \$11 ;
  wire \$12 ;
  wire \$13 ;
  wire \$14 ;
  wire \$15 ;
  wire \$16 ;
  wire \$17 ;
  wire \$18 ;
  wire \$19 ;
  wire \$2 ;
  wire \$20 ;
  wire \$21 ;
  wire \$22 ;
  wire \$23 ;
  wire \$24 ;
  wire \$25 ;
  wire \$26 ;
  wire \$27 ;
  wire \$28 ;
  wire \$29 ;
  wire \$3 ;
  wire \$30 ;
  wire \$31 ;
  wire \$32 ;
  wire \$33 ;
  wire \$34 ;
  wire \$35 ;
  wire \$36 ;
  wire \$37 ;
  reg [2:0] \$38 ;
  wire \$4 ;
  wire \$5 ;
  wire \$6 ;
  wire \$7 ;
  wire \$8 ;
  wire \$9 ;
  output ack;
  reg ack;
  wire \ack$131 ;
  wire \ack$134 ;
  wire \ack$149 ;
  wire \ack$74 ;
  wire \ack$75 ;
  input \ack$80 ;
  wire \ack$80 ;
  wire \ack$81 ;
  input [7:0] active_config;
  wire [7:0] active_config;
  wire [7:0] \active_config$141 ;
  wire [7:0] \active_config$95 ;
  input [6:0] address;
  wire [6:0] address;
  wire [6:0] \address$53 ;
  wire [6:0] \address$7 ;
  output address_changed;
  wire address_changed;
  wire \address_changed$137 ;
  wire \address_changed$89 ;
  wire claim;
  wire \claim$147 ;
  wire [5:0] clear_endpoint_halt;
  wire [5:0] \clear_endpoint_halt$135 ;
  wire \clear_endpoint_halt$135.direction ;
  wire \clear_endpoint_halt$135.enable ;
  wire [3:0] \clear_endpoint_halt$135.number ;
  wire \clear_endpoint_halt.direction ;
  wire \clear_endpoint_halt.enable ;
  wire [3:0] \clear_endpoint_halt.number ;
  output [5:0] clear_endpoint_halt_out;
  wire [5:0] clear_endpoint_halt_out;
  wire \clear_endpoint_halt_out.direction ;
  wire \clear_endpoint_halt_out.enable ;
  wire [3:0] \clear_endpoint_halt_out.number ;
  output config_changed;
  wire config_changed;
  wire \config_changed$139 ;
  wire \config_changed$97 ;
  input [15:0] crc;
  wire [15:0] crc;
  wire [15:0] \crc$3 ;
  reg data_requested;
  wire \data_requested$129 ;
  wire \data_requested$153 ;
  input [3:0] endpoint;
  wire [3:0] endpoint;
  wire [3:0] \endpoint$54 ;
  wire [3:0] \endpoint$9 ;
  output first;
  wire first;
  wire \first$125 ;
  wire \first$66 ;
  input [10:0] frame;
  wire [10:0] frame;
  wire [10:0] \frame$15 ;
  wire [10:0] \frame$57 ;
  (* enum_base_type = "fsmState" *)
  (* enum_value_000 = "SETUP/0" *)
  (* enum_value_001 = "DATA_IN/1" *)
  (* enum_value_010 = "DATA_OUT/2" *)
  (* enum_value_011 = "STATUS_IN/3" *)
  (* enum_value_100 = "STATUS_OUT/4" *)
  reg [2:0] fsm_state = 3'h0;
  wire [15:0] index;
  wire [15:0] \index$136 ;
  wire [15:0] \index$47 ;
  input is_in;
  wire is_in;
  wire \is_in$19 ;
  wire \is_in$59 ;
  wire is_in_request;
  wire \is_in_request$41 ;
  input is_out;
  wire is_out;
  wire \is_out$21 ;
  wire \is_out$60 ;
  input is_ping;
  wire is_ping;
  wire \is_ping$25 ;
  wire \is_ping$62 ;
  input is_setup;
  wire is_setup;
  wire \is_setup$23 ;
  wire \is_setup$61 ;
  output last;
  wire last;
  wire \last$126 ;
  wire \last$152 ;
  wire \last$68 ;
  wire [15:0] length;
  wire [15:0] \length$121 ;
  wire [15:0] \length$49 ;
  output nak;
  wire nak;
  wire \nak$77 ;
  input \nak$82 ;
  wire \nak$82 ;
  wire \nak$83 ;
  output [6:0] new_address;
  wire [6:0] new_address;
  wire [6:0] \new_address$138 ;
  wire [6:0] \new_address$91 ;
  output [7:0] new_config;
  wire [7:0] new_config;
  wire [7:0] \new_config$140 ;
  wire [7:0] \new_config$99 ;
  input new_frame;
  wire new_frame;
  wire \new_frame$17 ;
  wire \new_frame$58 ;
  input new_token;
  wire new_token;
  wire \new_token$11 ;
  wire \new_token$55 ;
  reg next;
  input \next$107 ;
  wire \next$107 ;
  input nyet;
  wire nyet;
  wire \nyet$87 ;
  output [7:0] payload;
  wire [7:0] payload;
  reg [7:0] \payload$108 ;
  input [7:0] \payload$109 ;
  wire [7:0] \payload$109 ;
  wire [7:0] \payload$127 ;
  wire [7:0] \payload$70 ;
  input [3:0] pid;
  wire [3:0] pid;
  wire [3:0] \pid$5 ;
  wire [3:0] \pid$52 ;
  input ready;
  wire ready;
  wire \ready$128 ;
  wire \ready$72 ;
  input ready_for_response;
  wire ready_for_response;
  wire \ready_for_response$13 ;
  wire \ready_for_response$56 ;
  wire received;
  wire \received$143 ;
  wire \received$51 ;
  wire [4:0] recipient;
  wire [4:0] \recipient$132 ;
  wire [4:0] \recipient$37 ;
  wire [7:0] request;
  wire [7:0] \request$144 ;
  wire [7:0] \request$146 ;
  wire [7:0] \request$43 ;
  input rx_active;
  wire rx_active;
  input [7:0] rx_data;
  wire [7:0] rx_data;
  reg rx_invalid;
  input \rx_invalid$113 ;
  wire \rx_invalid$113 ;
  reg rx_ready_for_response;
  input \rx_ready_for_response$111 ;
  wire \rx_ready_for_response$111 ;
  wire \rx_ready_for_response$148 ;
  input rx_timeout;
  wire rx_timeout;
  wire \rx_timeout$33 ;
  input rx_valid;
  wire rx_valid;
  input [1:0] speed;
  wire [1:0] speed;
  wire [1:0] \speed$27 ;
  output stall;
  wire stall;
  wire \stall$133 ;
  wire \stall$156 ;
  wire \stall$79 ;
  input \stall$84 ;
  wire \stall$84 ;
  wire \stall$85 ;
  output start;
  wire start;
  wire \start$1 ;
  output \start$34 ;
  wire \start$34 ;
  wire \start$35 ;
  reg status_requested;
  wire \status_requested$130 ;
  wire \status_requested$150 ;
  wire \status_requested$154 ;
  input tx_allowed;
  wire tx_allowed;
  wire \tx_allowed$29 ;
  output tx_data_pid;
  wire tx_data_pid;
  wire \tx_data_pid$142 ;
  wire [1:0] tx_pid_toggle;
  input tx_timeout;
  wire tx_timeout;
  wire \tx_timeout$31 ;
  wire [1:0] \type ;
  wire [1:0] \type$122 ;
  wire [1:0] \type$145 ;
  wire [1:0] \type$155 ;
  wire [1:0] \type$39 ;
  input usb_clk;
  wire usb_clk;
  input usb_rst;
  wire usb_rst;
  output valid;
  wire valid;
  reg \valid$104 ;
  input \valid$105 ;
  wire \valid$105 ;
  wire \valid$124 ;
  wire \valid$151 ;
  wire \valid$64 ;
  wire [15:0] value;
  wire [15:0] \value$120 ;
  wire [15:0] \value$45 ;
  assign \$1  = \ack$74  | \ack$75 ;
  assign \$2  = ! endpoint;
  assign \$3  = ready_for_response & \$2 ;
  assign \$4  = \$3  & is_in;
  assign \$5  = ! endpoint;
  assign \$6  = \$5  & is_out;
  assign \$7  = ! endpoint;
  assign \$8  = \$7  & ready_for_response;
  assign \$9  = \$8  & is_ping;
  assign \$10  = ! endpoint;
  assign \$11  = ready_for_response & \$10 ;
  assign \$12  = \$11  & is_in;
  assign \$13  = ! endpoint;
  assign \$14  = \rx_ready_for_response$111  & \$13 ;
  assign \$15  = \$14  & is_out;
  assign \$16  = ! endpoint;
  assign \$17  = \$16  & ready_for_response;
  assign \$18  = \$17  & is_ping;
  assign \$19  = ! fsm_state;
  assign \$20  = fsm_state == 1'h1;
  assign \$21  = fsm_state == 2'h2;
  assign \$22  = fsm_state == 2'h3;
  assign \$23  = fsm_state == 3'h4;
  assign \$24  = ! endpoint;
  assign \$25  = received & \$24 ;
  assign \$26  = | length;
  assign \$27  = new_token & is_setup;
  assign \$28  = ! endpoint;
  assign \$29  = \$28  & new_token;
  assign \$30  = is_out | is_ping;
  assign \$31  = \$29  & \$30 ;
  assign \$32  = new_token & is_setup;
  assign \$33  = ! endpoint;
  assign \$34  = \$33  & new_token;
  assign \$35  = \$34  & is_in;
  assign \$36  = new_token & is_setup;
  assign \$37  = new_token & is_setup;
  always @(posedge usb_clk)
    fsm_state <= \$38 ;
  \LunaUSBSerialDevice.usb0.usb.USBControlEndpoint.ACMRequestHandlers  ACMRequestHandlers (
    .ack(\ack$149 ),
    .claim(\claim$147 ),
    .last(\last$152 ),
    .request(request),
    .rx_ready_for_response(rx_ready_for_response),
    .status_requested(status_requested),
    .\type (\type ),
    .valid(\valid$151 )
  );
  \LunaUSBSerialDevice.usb0.usb.USBControlEndpoint.StallOnlyRequestHandler  StallOnlyRequestHandler (
    .data_requested(data_requested),
    .stall(\stall$156 ),
    .status_requested(status_requested),
    .\type (\type )
  );
  \LunaUSBSerialDevice.usb0.usb.USBControlEndpoint.StandardRequestHandler  StandardRequestHandler (
    .ack(\ack$131 ),
    .\ack$26 (\ack$80 ),
    .active_config(active_config),
    .address_changed(\address_changed$137 ),
    .claim(claim),
    .clear_endpoint_halt(\clear_endpoint_halt$135 ),
    .config_changed(\config_changed$139 ),
    .data_requested(data_requested),
    .first(\first$125 ),
    .index(index),
    .last(\last$126 ),
    .length(length),
    .new_address(\new_address$138 ),
    .new_config(\new_config$140 ),
    .payload(\payload$127 ),
    .\ready$16 (\ready$128 ),
    .received(received),
    .recipient(recipient),
    .request(request),
    .stall(\stall$133 ),
    .status_requested(status_requested),
    .tx_data_pid(\tx_data_pid$142 ),
    .\type (\type ),
    .usb_clk(usb_clk),
    .usb_rst(usb_rst),
    .valid(\valid$124 ),
    .value(value)
  );
  \LunaUSBSerialDevice.usb0.usb.USBControlEndpoint.request_mux  request_mux (
    .ack(\ack$80 ),
    .\ack$172 (\ack$75 ),
    .\ack$176 (\ack$131 ),
    .\ack$196 (\ack$149 ),
    .active_config(active_config),
    .address(address),
    .address_changed(address_changed),
    .\address_changed$181 (\address_changed$137 ),
    .claim(claim),
    .\claim$157 (\claim$147 ),
    .clear_endpoint_halt(clear_endpoint_halt_out),
    .\clear_endpoint_halt$189 (\clear_endpoint_halt$135 ),
    .config_changed(config_changed),
    .\config_changed$185 (\config_changed$139 ),
    .data_requested(data_requested),
    .endpoint(endpoint),
    .first(first),
    .\first$163 (\first$125 ),
    .frame(frame),
    .index(index),
    .is_in(is_in),
    .is_in_request(is_in_request),
    .is_out(is_out),
    .is_ping(is_ping),
    .is_setup(is_setup),
    .last(last),
    .\last$165 (\last$126 ),
    .\last$192 (\last$152 ),
    .length(length),
    .nak(\nak$82 ),
    .\nak$173 (nak),
    .new_address(new_address),
    .\new_address$183 (\new_address$138 ),
    .new_config(new_config),
    .\new_config$187 (\new_config$140 ),
    .new_frame(new_frame),
    .new_token(new_token),
    .next(next),
    .nyet(nyet),
    .payload(\payload$108 ),
    .\payload$166 (payload),
    .\payload$167 (\payload$127 ),
    .pid(pid),
    .ready(\ready$128 ),
    .\ready$169 (ready),
    .ready_for_response(ready_for_response),
    .received(received),
    .recipient(recipient),
    .request(request),
    .rx_invalid(rx_invalid),
    .rx_ready_for_response(rx_ready_for_response),
    .stall(\stall$84 ),
    .\stall$174 (stall),
    .\stall$178 (\stall$133 ),
    .\stall$213 (\stall$156 ),
    .status_requested(status_requested),
    .tx_data_pid(tx_data_pid),
    .\tx_data_pid$171 (\tx_data_pid$142 ),
    .\type (\type ),
    .valid(\valid$104 ),
    .\valid$160 (valid),
    .\valid$161 (\valid$124 ),
    .\valid$190 (\valid$151 ),
    .value(value)
  );
  \LunaUSBSerialDevice.usb0.usb.USBControlEndpoint.setup_decoder  setup_decoder (
    .ack(\ack$74 ),
    .crc(crc),
    .index(index),
    .is_in_request(is_in_request),
    .\length$28 (length),
    .new_token(new_token),
    .pid(pid),
    .received(received),
    .recipient(recipient),
    .request(request),
    .rx_active(rx_active),
    .rx_data(rx_data),
    .rx_valid(rx_valid),
    .speed(speed),
    .start(start),
    .\start$4 (\start$34 ),
    .tx_allowed(tx_allowed),
    .\type (\type ),
    .usb_clk(usb_clk),
    .usb_rst(usb_rst),
    .value(value)
  );
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$2 ) begin end
    ack = \$1 ;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          if (\$9 ) begin
            ack = 1'h1;
          end
      3'h3:
          /* empty */;
      3'h4:
          if (\$18 ) begin
            ack = 1'h1;
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$2 ) begin end
    data_requested = 1'h0;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          if (\$4 ) begin
            data_requested = 1'h1;
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$2 ) begin end
    \valid$104  = 1'h0;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          if (\$6 ) begin
            \valid$104  = \valid$105 ;
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$2 ) begin end
    next = 1'h0;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          if (\$6 ) begin
            next = \next$107 ;
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$2 ) begin end
    \payload$108  = 8'h00;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          if (\$6 ) begin
            \payload$108  = \payload$109 ;
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$2 ) begin end
    rx_ready_for_response = 1'h0;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          if (\$6 ) begin
            rx_ready_for_response = \rx_ready_for_response$111 ;
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$2 ) begin end
    rx_invalid = 1'h0;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          if (\$6 ) begin
            rx_invalid = \rx_invalid$113 ;
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$2 ) begin end
    status_requested = 1'h0;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h3:
          if (\$12 ) begin
            status_requested = 1'h1;
          end
      3'h4:
          if (\$15 ) begin
            status_requested = 1'h1;
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$2 ) begin end
    \$38  = fsm_state;
    casez (fsm_state)
      3'h0:
          if (\$25 ) begin
            (* full_case = 32'd1 *)
            if (\$26 ) begin
              (* full_case = 32'd1 *)
              if (is_in_request) begin
                \$38  = 3'h1;
              end else begin
                \$38  = 3'h2;
              end
            end else begin
              \$38  = 3'h3;
            end
          end
      3'h1:
        begin
          if (\$27 ) begin
            \$38  = 3'h0;
          end
          if (\$31 ) begin
            \$38  = 3'h4;
          end
        end
      3'h2:
        begin
          if (\$32 ) begin
            \$38  = 3'h0;
          end
          if (\$35 ) begin
            \$38  = 3'h3;
          end
        end
      3'h3:
          if (\$36 ) begin
            \$38  = 3'h0;
          end
      3'h4:
          if (\$37 ) begin
            \$38  = 3'h0;
          end
    endcase
    if (usb_rst) begin
      \$38  = 3'h0;
    end
  end
  assign \start$1  = start;
  assign \crc$3  = crc;
  assign \pid$5  = pid;
  assign \address$7  = address;
  assign \endpoint$9  = endpoint;
  assign \new_token$11  = new_token;
  assign \ready_for_response$13  = ready_for_response;
  assign \frame$15  = frame;
  assign \new_frame$17  = new_frame;
  assign \is_in$19  = is_in;
  assign \is_out$21  = is_out;
  assign \is_setup$23  = is_setup;
  assign \is_ping$25  = is_ping;
  assign \speed$27  = speed;
  assign \tx_allowed$29  = tx_allowed;
  assign \tx_timeout$31  = tx_timeout;
  assign \rx_timeout$33  = rx_timeout;
  assign \start$35  = \start$34 ;
  assign \recipient$37  = recipient;
  assign \type$39  = \type ;
  assign \is_in_request$41  = is_in_request;
  assign \request$43  = request;
  assign \value$45  = value;
  assign \index$47  = index;
  assign \length$49  = length;
  assign \received$51  = received;
  assign \pid$52  = pid;
  assign \address$53  = address;
  assign \endpoint$54  = endpoint;
  assign \new_token$55  = new_token;
  assign \ready_for_response$56  = ready_for_response;
  assign \frame$57  = frame;
  assign \new_frame$58  = new_frame;
  assign \is_in$59  = is_in;
  assign \is_out$60  = is_out;
  assign \is_setup$61  = is_setup;
  assign \is_ping$62  = is_ping;
  assign \valid$64  = valid;
  assign \first$66  = first;
  assign \last$68  = last;
  assign \payload$70  = payload;
  assign \ready$72  = ready;
  assign \nak$77  = nak;
  assign \stall$79  = stall;
  assign \ack$81  = \ack$80 ;
  assign \nak$83  = \nak$82 ;
  assign \stall$85  = \stall$84 ;
  assign \nyet$87  = nyet;
  assign \address_changed$89  = address_changed;
  assign \new_address$91  = new_address;
  assign clear_endpoint_halt = clear_endpoint_halt_out;
  assign \active_config$95  = active_config;
  assign \config_changed$97  = config_changed;
  assign \new_config$99  = new_config;
  assign tx_pid_toggle = { 1'h0, tx_data_pid };
  assign \value$120  = value;
  assign \length$121  = length;
  assign \type$122  = \type ;
  assign \data_requested$129  = data_requested;
  assign \status_requested$130  = status_requested;
  assign \recipient$132  = recipient;
  assign \ack$134  = \ack$80 ;
  assign \index$136  = index;
  assign \active_config$141  = active_config;
  assign \received$143  = received;
  assign \request$144  = request;
  assign \type$145  = \type ;
  assign \request$146  = request;
  assign \rx_ready_for_response$148  = rx_ready_for_response;
  assign \status_requested$150  = status_requested;
  assign \data_requested$153  = data_requested;
  assign \status_requested$154  = status_requested;
  assign \type$155  = \type ;
  assign \clear_endpoint_halt_out.enable  = clear_endpoint_halt_out[0];
  assign \clear_endpoint_halt_out.direction  = clear_endpoint_halt_out[1];
  assign \clear_endpoint_halt_out.number  = clear_endpoint_halt_out[5:2];
  assign \clear_endpoint_halt.enable  = clear_endpoint_halt_out[0];
  assign \clear_endpoint_halt.direction  = clear_endpoint_halt_out[1];
  assign \clear_endpoint_halt.number  = clear_endpoint_halt_out[5:2];
  assign \clear_endpoint_halt$135.enable  = \clear_endpoint_halt$135 [0];
  assign \clear_endpoint_halt$135.direction  = \clear_endpoint_halt$135 [1];
  assign \clear_endpoint_halt$135.number  = \clear_endpoint_halt$135 [5:2];
endmodule

module \LunaUSBSerialDevice.usb0.usb.USBControlEndpoint.ACMRequestHandlers (status_requested, \type , request, claim, ack, valid, last, rx_ready_for_response);
  reg \$auto$verilog_backend.cc:2373:dump_module$3  = 0;
  wire \$1 ;
  output ack;
  reg ack;
  output claim;
  reg claim;
  output last;
  reg last;
  input [7:0] request;
  wire [7:0] request;
  input rx_ready_for_response;
  wire rx_ready_for_response;
  input status_requested;
  wire status_requested;
  input [1:0] \type ;
  wire [1:0] \type ;
  output valid;
  reg valid;
  assign \$1  = \type  == 1'h1;
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$3 ) begin end
    claim = 1'h0;
    if (\$1 ) begin
      casez (request)
        8'h20:
            claim = 1'h1;
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$3 ) begin end
    ack = 1'h0;
    if (\$1 ) begin
      casez (request)
        8'h20:
            if (rx_ready_for_response) begin
              ack = 1'h1;
            end
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$3 ) begin end
    valid = 1'h0;
    if (\$1 ) begin
      casez (request)
        8'h20:
            if (status_requested) begin
              valid = 1'h1;
            end
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$3 ) begin end
    last = 1'h0;
    if (\$1 ) begin
      casez (request)
        8'h20:
            if (status_requested) begin
              last = 1'h1;
            end
      endcase
    end
  end
endmodule

module \LunaUSBSerialDevice.usb0.usb.USBControlEndpoint.StallOnlyRequestHandler (status_requested, \type , stall, data_requested);
  reg \$auto$verilog_backend.cc:2373:dump_module$4  = 0;
  wire \$1 ;
  wire \$2 ;
  wire \$3 ;
  wire \$4 ;
  input data_requested;
  wire data_requested;
  output stall;
  reg stall;
  input status_requested;
  wire status_requested;
  input [1:0] \type ;
  wire [1:0] \type ;
  assign \$1  = data_requested | status_requested;
  assign \$2  = \type  == 2'h2;
  assign \$3  = \type  == 2'h3;
  assign \$4  = \$2  | \$3 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$4 ) begin end
    stall = 1'h0;
    if (\$1 ) begin
      if (\$4 ) begin
        stall = 1'h1;
      end
    end
  end
endmodule

module \LunaUSBSerialDevice.usb0.usb.USBControlEndpoint.StandardRequestHandler (usb_rst, active_config, \ack$26 , data_requested, status_requested, received, recipient, \type , request, value, index, length, \ready$16 , claim, valid, first, last, payload, ack, stall, clear_endpoint_halt
, address_changed, new_address, config_changed, new_config, tx_data_pid, usb_clk);
  reg \$auto$verilog_backend.cc:2373:dump_module$5  = 0;
  wire \$1 ;
  wire \$10 ;
  wire \$11 ;
  wire \$12 ;
  wire \$13 ;
  wire \$14 ;
  wire \$15 ;
  wire \$16 ;
  wire \$17 ;
  wire [11:0] \$18 ;
  wire \$19 ;
  wire \$2 ;
  wire \$20 ;
  reg [10:0] \$21 ;
  reg \$22 ;
  reg [2:0] \$23 ;
  reg \$24 ;
  wire \$3 ;
  wire \$4 ;
  wire \$5 ;
  wire \$6 ;
  wire \$7 ;
  wire \$8 ;
  wire \$9 ;
  output ack;
  reg ack;
  input \ack$26 ;
  wire \ack$26 ;
  input [7:0] active_config;
  wire [7:0] active_config;
  output address_changed;
  reg address_changed;
  output claim;
  reg claim;
  output [5:0] clear_endpoint_halt;
  reg [5:0] clear_endpoint_halt;
  wire \clear_endpoint_halt.direction ;
  wire \clear_endpoint_halt.enable ;
  wire [3:0] \clear_endpoint_halt.number ;
  output config_changed;
  reg config_changed;
  input data_requested;
  wire data_requested;
  reg [7:0] datum_0;
  reg [7:0] datum_1;
  reg expecting_ack = 1'h0;
  output first;
  reg first;
  wire \first$10 ;
  wire \first$34 ;
  (* enum_base_type = "fsmState" *)
  (* enum_value_000 = "IDLE/0" *)
  (* enum_value_001 = "GET_STATUS/1" *)
  (* enum_value_010 = "CLEAR_FEATURE/2" *)
  (* enum_value_011 = "SET_ADDRESS/3" *)
  (* enum_value_100 = "SET_CONFIGURATION/4" *)
  (* enum_value_101 = "GET_DESCRIPTOR/5" *)
  (* enum_value_110 = "GET_CONFIGURATION/6" *)
  (* enum_value_111 = "UNHANDLED/7" *)
  reg [2:0] fsm_state = 3'h0;
  input [15:0] index;
  wire [15:0] index;
  output last;
  reg last;
  wire \last$12 ;
  wire \last$35 ;
  input [15:0] length;
  wire [15:0] length;
  wire [15:0] \length$3 ;
  reg [1:0] max_length;
  output [6:0] new_address;
  reg [6:0] new_address;
  output [7:0] new_config;
  reg [7:0] new_config;
  output [7:0] payload;
  reg [7:0] payload;
  wire [7:0] \payload$14 ;
  wire [7:0] \payload$36 ;
  reg ready;
  input \ready$16 ;
  wire \ready$16 ;
  reg \ready$37 ;
  input received;
  wire received;
  input [4:0] recipient;
  wire [4:0] recipient;
  input [7:0] request;
  wire [7:0] request;
  output stall;
  reg stall;
  wire \stall$38 ;
  reg start;
  reg \start$39 ;
  reg [10:0] start_position = 11'h000;
  input status_requested;
  wire status_requested;
  output tx_data_pid;
  reg tx_data_pid = 1'h1;
  input [1:0] \type ;
  wire [1:0] \type ;
  input usb_clk;
  wire usb_clk;
  input usb_rst;
  wire usb_rst;
  output valid;
  reg valid;
  wire \valid$33 ;
  wire \valid$8 ;
  input [15:0] value;
  wire [15:0] value;
  wire [15:0] \value$1 ;
  assign \$1  = ! \type ;
  assign \$3  = recipient != 2'h2;
  assign \$4  = | value;
  assign \$5  = \$3  | \$4 ;
  assign \$6  = data_requested | status_requested;
  assign \$7  = ! fsm_state;
  assign \$8  = fsm_state == 1'h1;
  assign \$9  = fsm_state == 2'h2;
  assign \$10  = fsm_state == 2'h3;
  assign \$11  = fsm_state == 3'h4;
  assign \$12  = fsm_state == 3'h5;
  assign \$13  = fsm_state == 3'h6;
  assign \$14  = fsm_state == 3'h7;
  assign \$15  = ! \type ;
  assign \$17  = \ack$26  & expecting_ack;
  assign \$18  = start_position + 7'h40;
  assign \$19  = ~ tx_data_pid;
  assign \$20  = data_requested | status_requested;
  always @(posedge usb_clk)
    start_position <= \$21 ;
  always @(posedge usb_clk)
    tx_data_pid <= \$22 ;
  always @(posedge usb_clk)
    fsm_state <= \$23 ;
  always @(posedge usb_clk)
    expecting_ack <= \$24 ;
  \LunaUSBSerialDevice.usb0.usb.USBControlEndpoint.StandardRequestHandler.get_descriptor  get_descriptor (
    .first(\first$34 ),
    .last(\last$35 ),
    .\length$20 (length),
    .payload(\payload$36 ),
    .ready(\ready$37 ),
    .stall(\stall$38 ),
    .start(\start$39 ),
    .start_position(start_position),
    .usb_clk(usb_clk),
    .usb_rst(usb_rst),
    .valid(\valid$33 ),
    .value(value)
  );
  \LunaUSBSerialDevice.usb0.usb.USBControlEndpoint.StandardRequestHandler.transmitter  transmitter (
    .datum_0(datum_0),
    .datum_1(datum_1),
    .first(\first$10 ),
    .last(\last$12 ),
    .max_length(max_length),
    .payload(\payload$14 ),
    .ready(ready),
    .start(start),
    .usb_clk(usb_clk),
    .usb_rst(usb_rst),
    .valid(\valid$8 )
  );
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$5 ) begin end
    claim = 1'h0;
    if (\$1 ) begin
      claim = \$2 ;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$5 ) begin end
    valid = 1'h0;
    if (\$1 ) begin
      casez (fsm_state)
        3'h0:
            /* empty */;
        3'h1:
            valid = \valid$8 ;
        3'h2:
            if (status_requested) begin
              (* full_case = 32'd1 *)
              if (\$5 ) begin
              end else begin
                valid = 1'h1;
              end
            end
        3'h3:
            if (status_requested) begin
              valid = 1'h1;
            end
        3'h4:
            if (status_requested) begin
              valid = 1'h1;
            end
        3'h5:
            valid = \valid$33 ;
        3'h6:
            valid = \valid$8 ;
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$5 ) begin end
    first = 1'h0;
    if (\$1 ) begin
      casez (fsm_state)
        3'h0:
            /* empty */;
        3'h1:
            first = \first$10 ;
        3'h2:
            /* empty */;
        3'h3:
            /* empty */;
        3'h4:
            /* empty */;
        3'h5:
            first = \first$34 ;
        3'h6:
            first = \first$10 ;
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$5 ) begin end
    last = 1'h0;
    if (\$1 ) begin
      casez (fsm_state)
        3'h0:
            /* empty */;
        3'h1:
            last = \last$12 ;
        3'h2:
            if (status_requested) begin
              (* full_case = 32'd1 *)
              if (\$5 ) begin
              end else begin
                last = 1'h1;
              end
            end
        3'h3:
            if (status_requested) begin
              last = 1'h1;
            end
        3'h4:
            if (status_requested) begin
              last = 1'h1;
            end
        3'h5:
            last = \last$35 ;
        3'h6:
            last = \last$12 ;
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$5 ) begin end
    payload = 8'h00;
    if (\$1 ) begin
      casez (fsm_state)
        3'h0:
            /* empty */;
        3'h1:
            payload = \payload$14 ;
        3'h2:
            /* empty */;
        3'h3:
            /* empty */;
        3'h4:
            /* empty */;
        3'h5:
            payload = \payload$36 ;
        3'h6:
            payload = \payload$14 ;
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$5 ) begin end
    ready = 1'h0;
    if (\$1 ) begin
      casez (fsm_state)
        3'h0:
            /* empty */;
        3'h1:
            ready = \ready$16 ;
        3'h2:
            /* empty */;
        3'h3:
            /* empty */;
        3'h4:
            /* empty */;
        3'h5:
            /* empty */;
        3'h6:
            ready = \ready$16 ;
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$5 ) begin end
    datum_0 = 8'h00;
    if (\$1 ) begin
      casez (fsm_state)
        3'h0:
            /* empty */;
        3'h1:
            datum_0 = 8'h00;
        3'h2:
            /* empty */;
        3'h3:
            /* empty */;
        3'h4:
            /* empty */;
        3'h5:
            /* empty */;
        3'h6:
            datum_0 = active_config;
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$5 ) begin end
    datum_1 = 8'h00;
    if (\$1 ) begin
      casez (fsm_state)
        3'h0:
            /* empty */;
        3'h1:
            datum_1 = 8'h00;
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$5 ) begin end
    max_length = 2'h0;
    if (\$1 ) begin
      casez (fsm_state)
        3'h0:
            /* empty */;
        3'h1:
            max_length = 2'h2;
        3'h2:
            /* empty */;
        3'h3:
            /* empty */;
        3'h4:
            /* empty */;
        3'h5:
            /* empty */;
        3'h6:
            max_length = 2'h1;
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$5 ) begin end
    start = 1'h0;
    if (\$1 ) begin
      casez (fsm_state)
        3'h0:
            /* empty */;
        3'h1:
            if (data_requested) begin
              start = 1'h1;
            end
        3'h2:
            /* empty */;
        3'h3:
            /* empty */;
        3'h4:
            /* empty */;
        3'h5:
            /* empty */;
        3'h6:
            if (data_requested) begin
              start = 1'h1;
            end
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$5 ) begin end
    ack = 1'h0;
    if (\$1 ) begin
      casez (fsm_state)
        3'h0:
            /* empty */;
        3'h1:
            if (status_requested) begin
              ack = 1'h1;
            end
        3'h2:
            /* empty */;
        3'h3:
            /* empty */;
        3'h4:
            /* empty */;
        3'h5:
            if (status_requested) begin
              ack = 1'h1;
            end
        3'h6:
            if (status_requested) begin
              ack = 1'h1;
            end
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$5 ) begin end
    stall = 1'h0;
    if (\$1 ) begin
      (* full_case = 32'd1 *)
      casez (fsm_state)
        3'h0:
            /* empty */;
        3'h1:
            /* empty */;
        3'h2:
            if (status_requested) begin
              if (\$5 ) begin
                stall = 1'h1;
              end
            end
        3'h3:
            /* empty */;
        3'h4:
            /* empty */;
        3'h5:
            stall = \stall$38 ;
        3'h6:
            /* empty */;
        3'h7:
            if (\$6 ) begin
              stall = 1'h1;
            end
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$5 ) begin end
    clear_endpoint_halt = 6'h00;
    if (\$1 ) begin
      casez (fsm_state)
        3'h0:
            /* empty */;
        3'h1:
            /* empty */;
        3'h2:
            if (\ack$26 ) begin
              clear_endpoint_halt[0] = 1'h1;
              clear_endpoint_halt[1] = index[7];
              clear_endpoint_halt[5:2] = index[3:0];
            end
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$5 ) begin end
    address_changed = 1'h0;
    if (\$1 ) begin
      casez (fsm_state)
        3'h0:
            /* empty */;
        3'h1:
            /* empty */;
        3'h2:
            /* empty */;
        3'h3:
            if (\ack$26 ) begin
              address_changed = 1'h1;
            end
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$5 ) begin end
    new_address = 7'h00;
    if (\$1 ) begin
      casez (fsm_state)
        3'h0:
            /* empty */;
        3'h1:
            /* empty */;
        3'h2:
            /* empty */;
        3'h3:
            if (\ack$26 ) begin
              new_address = value[6:0];
            end
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$5 ) begin end
    config_changed = 1'h0;
    if (\$1 ) begin
      casez (fsm_state)
        3'h0:
            /* empty */;
        3'h1:
            /* empty */;
        3'h2:
            /* empty */;
        3'h3:
            /* empty */;
        3'h4:
            if (\ack$26 ) begin
              config_changed = 1'h1;
            end
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$5 ) begin end
    new_config = 8'h00;
    if (\$1 ) begin
      casez (fsm_state)
        3'h0:
            /* empty */;
        3'h1:
            /* empty */;
        3'h2:
            /* empty */;
        3'h3:
            /* empty */;
        3'h4:
            if (\ack$26 ) begin
              new_config = value[7:0];
            end
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$5 ) begin end
    \ready$37  = 1'h0;
    if (\$1 ) begin
      casez (fsm_state)
        3'h0:
            /* empty */;
        3'h1:
            /* empty */;
        3'h2:
            /* empty */;
        3'h3:
            /* empty */;
        3'h4:
            /* empty */;
        3'h5:
            \ready$37  = \ready$16 ;
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$5 ) begin end
    \start$39  = 1'h0;
    if (\$1 ) begin
      casez (fsm_state)
        3'h0:
            /* empty */;
        3'h1:
            /* empty */;
        3'h2:
            /* empty */;
        3'h3:
            /* empty */;
        3'h4:
            /* empty */;
        3'h5:
            if (data_requested) begin
              \start$39  = 1'h1;
            end
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$5 ) begin end
    \$21  = start_position;
    if (\$15 ) begin
      casez (fsm_state)
        3'h0:
            \$21  = 11'h000;
        3'h1:
            /* empty */;
        3'h2:
            /* empty */;
        3'h3:
            /* empty */;
        3'h4:
            /* empty */;
        3'h5:
            if (\$17 ) begin
              \$21  = \$18 [10:0];
            end
      endcase
    end
    if (usb_rst) begin
      \$21  = 11'h000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$5 ) begin end
    \$22  = tx_data_pid;
    if (\$15 ) begin
      casez (fsm_state)
        3'h0:
            \$22  = 1'h1;
        3'h1:
            /* empty */;
        3'h2:
            /* empty */;
        3'h3:
            /* empty */;
        3'h4:
            /* empty */;
        3'h5:
            if (\$17 ) begin
              \$22  = \$19 ;
            end
      endcase
    end
    if (usb_rst) begin
      \$22  = 1'h1;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$5 ) begin end
    \$23  = fsm_state;
    if (\$15 ) begin
      (* full_case = 32'd1 *)
      casez (fsm_state)
        3'h0:
            if (received) begin
              if (\$16 ) begin
                (* full_case = 32'd1 *)
                casez (request)
                  8'h00:
                      \$23  = 3'h1;
                  8'h01:
                      \$23  = 3'h2;
                  8'h05:
                      \$23  = 3'h3;
                  8'h09:
                      \$23  = 3'h4;
                  8'h06:
                      \$23  = 3'h5;
                  8'h08:
                      \$23  = 3'h6;
                  default:
                      \$23  = 3'h7;
                endcase
              end
            end
        3'h1:
            if (status_requested) begin
              \$23  = 3'h0;
            end
        3'h2:
            if (\ack$26 ) begin
              \$23  = 3'h0;
            end
        3'h3:
            if (\ack$26 ) begin
              \$23  = 3'h0;
            end
        3'h4:
            if (\ack$26 ) begin
              \$23  = 3'h0;
            end
        3'h5:
          begin
            if (status_requested) begin
              \$23  = 3'h0;
            end
            if (\stall$38 ) begin
              \$23  = 3'h0;
            end
          end
        3'h6:
            if (status_requested) begin
              \$23  = 3'h0;
            end
        3'h7:
            if (\$20 ) begin
              \$23  = 3'h0;
            end
      endcase
    end
    if (usb_rst) begin
      \$23  = 3'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$5 ) begin end
    \$24  = expecting_ack;
    if (\$15 ) begin
      casez (fsm_state)
        3'h0:
            /* empty */;
        3'h1:
            /* empty */;
        3'h2:
            /* empty */;
        3'h3:
            /* empty */;
        3'h4:
            /* empty */;
        3'h5:
          begin
            if (data_requested) begin
              \$24  = 1'h1;
            end
            if (\$17 ) begin
              \$24  = 1'h0;
            end
            if (\stall$38 ) begin
              \$24  = 1'h0;
            end
          end
      endcase
    end
    if (usb_rst) begin
      \$24  = 1'h0;
    end
  end
  assign \value$1  = value;
  assign \length$3  = length;
  assign \clear_endpoint_halt.enable  = clear_endpoint_halt[0];
  assign \clear_endpoint_halt.direction  = clear_endpoint_halt[1];
  assign \clear_endpoint_halt.number  = clear_endpoint_halt[5:2];
  assign \$2  = 1'h1;
  assign \$16  = 1'h1;
endmodule

module \LunaUSBSerialDevice.usb0.usb.USBControlEndpoint.StandardRequestHandler.get_descriptor (usb_rst, value, \length$20 , ready, start, start_position, stall, valid, payload, first, last, usb_clk);
  reg \$auto$verilog_backend.cc:2373:dump_module$6  = 0;
  wire \$1 ;
  wire \$10 ;
  wire [16:0] \$11 ;
  wire \$12 ;
  wire [16:0] \$13 ;
  wire \$14 ;
  wire \$15 ;
  wire [16:0] \$16 ;
  wire \$17 ;
  wire [16:0] \$18 ;
  wire \$19 ;
  wire \$2 ;
  wire \$20 ;
  wire \$21 ;
  wire [6:0] \$22 ;
  wire [6:0] \$23 ;
  wire \$24 ;
  wire \$25 ;
  wire \$26 ;
  wire \$27 ;
  wire \$28 ;
  wire \$29 ;
  wire [8:0] \$3 ;
  wire [16:0] \$30 ;
  wire \$31 ;
  wire [16:0] \$32 ;
  wire \$33 ;
  wire \$34 ;
  wire \$35 ;
  wire \$36 ;
  wire [16:0] \$37 ;
  wire \$38 ;
  wire [16:0] \$39 ;
  wire [32:0] \$4 ;
  wire \$40 ;
  wire \$41 ;
  wire \$42 ;
  wire [6:0] \$43 ;
  wire [16:0] \$44 ;
  reg [15:0] \$45 ;
  reg [15:0] \$46 ;
  reg [2:0] \$47 ;
  reg [5:0] \$48 ;
  reg [5:0] \$49 ;
  wire [32:0] \$5 ;
  reg [15:0] \$50 ;
  wire [5:0] \$59 ;
  wire [5:0] \$6 ;
  wire [6:0] \$7 ;
  wire [1:0] \$8 ;
  wire [7:0] \$9 ;
  reg [15:0] bytes_sent = 16'h0000;
  reg [5:0] descriptor_data_base_address = 6'h00;
  reg [15:0] descriptor_length = 16'h0000;
  output first;
  reg first;
  (* enum_base_type = "fsmState" *)
  (* enum_value_000 = "IDLE/0" *)
  (* enum_value_001 = "START/1" *)
  (* enum_value_010 = "LOOKUP_TYPE/2" *)
  (* enum_value_011 = "SEND_ZLP/3" *)
  (* enum_value_100 = "LOOKUP_DESCRIPTOR/4" *)
  (* enum_value_101 = "SEND_DESCRIPTOR/5" *)
  reg [2:0] fsm_state = 3'h0;
  wire [7:0] index;
  output last;
  reg last;
  reg [15:0] length = 16'h0000;
  input [15:0] \length$20 ;
  wire [15:0] \length$20 ;
  output [7:0] payload;
  reg [7:0] payload;
  reg [5:0] position_in_stream = 6'h00;
  input ready;
  wire ready;
  reg [5:0] rom_read_port__addr;
  wire [31:0] rom_read_port__data;
  output stall;
  reg stall;
  input start;
  wire start;
  input [10:0] start_position;
  wire [10:0] start_position;
  wire [7:0] type_number;
  input usb_clk;
  wire usb_clk;
  input usb_rst;
  wire usb_rst;
  output valid;
  reg valid;
  input [15:0] value;
  wire [15:0] value;
  reg [31:0] rom [53:0];
  initial begin
    rom[0] = 32'd0;
    rom[1] = 32'd65552;
    rom[2] = 32'd65556;
    rom[3] = 32'd262168;
    rom[4] = 32'd1179688;
    rom[5] = 32'd4128828;
    rom[6] = 32'd262268;
    rom[7] = 32'd1835136;
    rom[8] = 32'd3670172;
    rom[9] = 32'd131284;
    rom[10] = 32'd302055426;
    rom[11] = 32'd64;
    rom[12] = 32'd152236378;
    rom[13] = 32'd258;
    rom[14] = 32'd50397184;
    rom[15] = 32'd151142144;
    rom[16] = 32'd33620096;
    rom[17] = 32'd4194894848;
    rom[18] = 32'd66050;
    rom[19] = 32'd16778532;
    rom[20] = 32'd1048837;
    rom[21] = 32'd604372993;
    rom[22] = 32'd86245632;
    rom[23] = 32'd17237379;
    rom[24] = 32'd54525963;
    rom[25] = 32'd151257344;
    rom[26] = 32'd34209792;
    rom[27] = 32'd460164;
    rom[28] = 32'd37748991;
    rom[29] = 32'd117769218;
    rom[30] = 32'd1073807104;
    rom[31] = 32'd67307780;
    rom[32] = 32'd469976832;
    rom[33] = 32'd1912631040;
    rom[34] = 32'd1962962944;
    rom[35] = 32'd1191208192;
    rom[36] = 32'd1946186496;
    rom[37] = 32'd2080392960;
    rom[38] = 32'd1929397248;
    rom[39] = 32'd939737600;
    rom[40] = 32'd1862300416;
    rom[41] = 32'd1862299136;
    rom[42] = 32'd536888320;
    rom[43] = 32'd1761634048;
    rom[44] = 32'd1761637376;
    rom[45] = 32'd1627417600;
    rom[46] = 32'd536892928;
    rom[47] = 32'd1761633280;
    rom[48] = 32'd1694527232;
    rom[49] = 32'd536887552;
    rom[50] = 32'd1677746432;
    rom[51] = 32'd1879077888;
    rom[52] = 32'd1694528000;
    rom[53] = 32'd33751040;
  end
  reg [31:0] _0_;
  always @(posedge usb_clk) begin
    _0_ <= rom[rom_read_port__addr];
  end
  assign rom_read_port__data = _0_;
  always @(posedge usb_clk)
    length <= \$45 ;
  always @(posedge usb_clk)
    bytes_sent <= \$46 ;
  always @(posedge usb_clk)
    fsm_state <= \$47 ;
  always @(posedge usb_clk)
    position_in_stream <= \$48 ;
  always @(posedge usb_clk)
    descriptor_data_base_address <= \$49 ;
  always @(posedge usb_clk)
    descriptor_length <= \$50 ;
  assign \$1  = value[15:8] <= 2'h3;
  assign \$2  = value[7:0] >= rom_read_port__data[31:16];
  assign \$3  = rom_read_port__data[7:2] + value[7:0];
  assign \$4  = rom_read_port__data + position_in_stream;
  assign \$7  = descriptor_data_base_address + \$6 ;
  assign \$8  = ~ position_in_stream[1:0];
  assign \$59  = \$8  * 4'h8;
  assign \$9  = rom_read_port__data >> \$59 ;
  assign \$10  = position_in_stream == start_position;
  assign \$11  = descriptor_length - 1'h1;
  assign \$12  = position_in_stream == \$11 ;
  assign \$13  = bytes_sent + 1'h1;
  assign \$14  = \$13  >= length;
  assign \$15  = \$12  | \$14 ;
  assign \$16  = descriptor_length - 1'h1;
  assign \$17  = position_in_stream == \$16 ;
  assign \$18  = bytes_sent + 1'h1;
  assign \$19  = \$18  >= length;
  assign \$20  = \$17  | \$19 ;
  assign \$21  = ~ \$20 ;
  assign \$22  = position_in_stream + 1'h1;
  assign \$23  = descriptor_data_base_address + \$22 [5:2];
  assign \$24  = ! fsm_state;
  assign \$25  = fsm_state == 1'h1;
  assign \$26  = fsm_state == 2'h2;
  assign \$27  = fsm_state == 2'h3;
  assign \$28  = fsm_state == 3'h4;
  assign \$29  = fsm_state == 3'h5;
  assign \$30  = \length$20  - start_position;
  assign \$31  = $signed(\$30 ) <= $signed(8'h40);
  assign \$32  = \length$20  - start_position;
  assign \$33  = value[15:8] <= 2'h3;
  assign \$34  = value[7:0] >= rom_read_port__data[31:16];
  assign \$35  = ! length;
  assign \$36  = position_in_stream >= rom_read_port__data[31:16];
  assign \$37  = descriptor_length - 1'h1;
  assign \$38  = position_in_stream == \$37 ;
  assign \$39  = bytes_sent + 1'h1;
  assign \$40  = \$39  >= length;
  assign \$41  = \$38  | \$40 ;
  assign \$42  = ~ \$41 ;
  assign \$43  = position_in_stream + 1'h1;
  assign \$44  = bytes_sent + 1'h1;
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$6 ) begin end
    stall = 1'h0;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          (* full_case = 32'd1 *)
          if (\$1 ) begin
          end else begin
            stall = 1'h1;
          end
      3'h2:
          if (\$2 ) begin
            stall = 1'h1;
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$6 ) begin end
    valid = 1'h0;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h4:
          /* empty */;
      3'h5:
          valid = 1'h1;
      3'h3:
          valid = 1'h1;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$6 ) begin end
    payload = 8'h00;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h4:
          /* empty */;
      3'h5:
          payload = \$9 ;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$6 ) begin end
    first = 1'h0;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h4:
          /* empty */;
      3'h5:
          first = \$10 ;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$6 ) begin end
    last = 1'h0;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h4:
          /* empty */;
      3'h5:
          last = \$15 ;
      3'h3:
          last = 1'h1;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$6 ) begin end
    (* full_case = 32'd1 *)
    if (\$31 ) begin
      \$45  = \$32 [15:0];
    end else begin
      \$45  = 16'h0040;
    end
    if (usb_rst) begin
      \$45  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$6 ) begin end
    \$46  = bytes_sent;
    casez (fsm_state)
      3'h0:
          \$46  = 16'h0000;
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h4:
          /* empty */;
      3'h5:
          if (ready) begin
            if (\$42 ) begin
              \$46  = \$44 [15:0];
            end
          end
    endcase
    if (usb_rst) begin
      \$46  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$6 ) begin end
    \$47  = fsm_state;
    casez (fsm_state)
      3'h0:
          if (start) begin
            \$47  = 3'h1;
          end
      3'h1:
          (* full_case = 32'd1 *)
          if (\$33 ) begin
            \$47  = 3'h2;
          end else begin
            \$47  = 3'h0;
          end
      3'h2:
          (* full_case = 32'd1 *)
          if (\$34 ) begin
            \$47  = 3'h0;
          end else begin
            (* full_case = 32'd1 *)
            if (\$35 ) begin
              \$47  = 3'h3;
            end else begin
              \$47  = 3'h4;
            end
          end
      3'h4:
          (* full_case = 32'd1 *)
          if (\$36 ) begin
            \$47  = 3'h3;
          end else begin
            \$47  = 3'h5;
          end
      3'h5:
          if (ready) begin
            (* full_case = 32'd1 *)
            if (\$42 ) begin
            end else begin
              \$47  = 3'h0;
            end
          end
      3'h3:
          \$47  = 3'h0;
    endcase
    if (usb_rst) begin
      \$47  = 3'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$6 ) begin end
    \$48  = position_in_stream;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          \$48  = start_position[5:0];
      3'h2:
          /* empty */;
      3'h4:
          /* empty */;
      3'h5:
          if (ready) begin
            if (\$42 ) begin
              \$48  = \$43 [5:0];
            end
          end
    endcase
    if (usb_rst) begin
      \$48  = 6'h00;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$6 ) begin end
    \$49  = descriptor_data_base_address;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h4:
          \$49  = rom_read_port__data[7:2];
      3'h5:
          if (ready) begin
            (* full_case = 32'd1 *)
            if (\$42 ) begin
            end else begin
              \$49  = 6'h00;
            end
          end
    endcase
    if (usb_rst) begin
      \$49  = 6'h00;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$6 ) begin end
    \$50  = descriptor_length;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h4:
          \$50  = rom_read_port__data[31:16];
      3'h5:
          if (ready) begin
            (* full_case = 32'd1 *)
            if (\$42 ) begin
            end else begin
              \$50  = 16'h0000;
            end
          end
    endcase
    if (usb_rst) begin
      \$50  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$6 ) begin end
    rom_read_port__addr = 6'h00;
    casez (fsm_state)
      3'h0:
          rom_read_port__addr = value[13:8];
      3'h1:
          rom_read_port__addr = value[13:8];
      3'h2:
          (* full_case = 32'd1 *)
          if (\$2 ) begin
          end else begin
            rom_read_port__addr = \$3 [5:0];
          end
      3'h4:
          rom_read_port__addr = \$5 [5:0];
      3'h5:
        begin
          rom_read_port__addr = \$7 [5:0];
          if (ready) begin
            if (\$21 ) begin
              rom_read_port__addr = \$23 [5:0];
            end
          end
        end
    endcase
  end
  assign index = value[7:0];
  assign type_number = value[15:8];
  assign \$5  = { 2'h0, \$4 [32:2] };
  assign \$6  = { 2'h0, position_in_stream[5:2] };
endmodule

module \LunaUSBSerialDevice.usb0.usb.USBControlEndpoint.StandardRequestHandler.transmitter (usb_rst, first, last, valid, ready, datum_0, datum_1, max_length, start, payload, usb_clk);
  reg \$auto$verilog_backend.cc:2373:dump_module$7  = 0;
  wire \$1 ;
  wire \$10 ;
  wire [2:0] \$11 ;
  wire \$12 ;
  wire \$13 ;
  wire \$14 ;
  wire [1:0] \$15 ;
  wire [2:0] \$16 ;
  wire \$17 ;
  wire \$18 ;
  wire \$19 ;
  wire \$2 ;
  wire [2:0] \$20 ;
  wire \$21 ;
  wire \$22 ;
  wire \$23 ;
  reg \$24 ;
  reg [1:0] \$25 ;
  reg [1:0] \$26 ;
  wire [2:0] \$3 ;
  wire \$4 ;
  wire \$5 ;
  wire \$6 ;
  reg [7:0] \$7 ;
  wire \$8 ;
  wire \$9 ;
  reg [1:0] bytes_sent = 2'h0;
  input [7:0] datum_0;
  wire [7:0] datum_0;
  input [7:0] datum_1;
  wire [7:0] datum_1;
  reg done;
  output first;
  wire first;
  (* enum_base_type = "fsmState" *)
  (* enum_value_00 = "STREAMING/0" *)
  (* enum_value_01 = "IDLE/1" *)
  (* enum_value_10 = "DONE/2" *)
  reg [1:0] fsm_state = 2'h1;
  output last;
  wire last;
  input [1:0] max_length;
  wire [1:0] max_length;
  output [7:0] payload;
  reg [7:0] payload;
  reg position_in_stream = 1'h0;
  input ready;
  wire ready;
  input start;
  wire start;
  wire start_position;
  reg \start_position$7 ;
  input usb_clk;
  wire usb_clk;
  input usb_rst;
  wire usb_rst;
  output valid;
  wire valid;
  assign \$1  = ! position_in_stream;
  assign first = \$1  & valid;
  assign \$3  = max_length - 1'h1;
  assign \$4  = bytes_sent == \$3 ;
  assign \$5  = \$2  | \$4 ;
  assign last = \$5  & valid;
  assign valid = ! fsm_state;
  assign \$8  = fsm_state == 1'h1;
  assign \$9  = fsm_state == 2'h2;
  assign \$11  = max_length - 1'h1;
  assign \$12  = bytes_sent == \$11 ;
  assign \$13  = \$10  | \$12 ;
  assign \$14  = ~ \$13 ;
  assign \$15  = position_in_stream + 1'h1;
  assign \$16  = bytes_sent + 1'h1;
  assign \$17  = max_length > 1'h0;
  assign \$18  = start & \$17 ;
  assign \$20  = max_length - 1'h1;
  assign \$21  = bytes_sent == \$20 ;
  assign \$22  = \$19  | \$21 ;
  assign \$23  = ~ \$22 ;
  always @(posedge usb_clk)
    position_in_stream <= \$24 ;
  always @(posedge usb_clk)
    bytes_sent <= \$25 ;
  always @(posedge usb_clk)
    fsm_state <= \$26 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$7 ) begin end
    (* full_case = 32'd1 *)
    casez (position_in_stream)
      1'h0:
          \$7  = datum_0;
      1'h1:
          \$7  = datum_1;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$7 ) begin end
    (* full_case = 32'd1 *)
    if (\$6 ) begin
      \start_position$7  = 1'h1;
    end else begin
      \start_position$7  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$7 ) begin end
    payload = 8'h00;
    casez (fsm_state)
      2'h1:
          /* empty */;
      2'h0:
          payload = \$7 ;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$7 ) begin end
    done = 1'h0;
    casez (fsm_state)
      2'h1:
          /* empty */;
      2'h0:
          /* empty */;
      2'h2:
          done = 1'h1;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$7 ) begin end
    \$24  = position_in_stream;
    casez (fsm_state)
      2'h1:
          \$24  = \start_position$7 ;
      2'h0:
          if (ready) begin
            if (\$14 ) begin
              \$24  = \$15 [0];
            end
          end
    endcase
    if (usb_rst) begin
      \$24  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$7 ) begin end
    \$25  = bytes_sent;
    casez (fsm_state)
      2'h1:
          \$25  = 2'h0;
      2'h0:
          if (ready) begin
            if (\$14 ) begin
              \$25  = \$16 [1:0];
            end
          end
    endcase
    if (usb_rst) begin
      \$25  = 2'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$7 ) begin end
    \$26  = fsm_state;
    casez (fsm_state)
      2'h1:
          if (\$18 ) begin
            \$26  = 2'h0;
          end
      2'h0:
          if (ready) begin
            (* full_case = 32'd1 *)
            if (\$23 ) begin
            end else begin
              \$26  = 2'h2;
            end
          end
      2'h2:
          \$26  = 2'h1;
    endcase
    if (usb_rst) begin
      \$26  = 2'h1;
    end
  end
  assign start_position = 1'h0;
  assign \$2  = position_in_stream;
  assign \$6  = 1'h0;
  assign \$10  = position_in_stream;
  assign \$19  = position_in_stream;
endmodule

module \LunaUSBSerialDevice.usb0.usb.USBControlEndpoint.request_mux (is_out, is_setup, is_ping, active_config, new_frame, new_token, frame, pid, address, endpoint, ready_for_response, \ready$169 , ack, nak, stall, nyet, data_requested, valid, next, payload, rx_ready_for_response
, rx_invalid, status_requested, received, recipient, \type , is_in_request, request, value, index, length, \valid$160 , first, last, \payload$166 , ready, tx_data_pid, \ack$172 , \nak$173 , \stall$174 , address_changed, new_address
, config_changed, new_config, clear_endpoint_halt, claim, \valid$161 , \first$163 , \last$165 , \payload$167 , \ack$176 , \stall$178 , \clear_endpoint_halt$189 , \address_changed$181 , \new_address$183 , \config_changed$185 , \new_config$187 , \tx_data_pid$171 , \claim$157 , \ack$196 , \valid$190 , \last$192 , \stall$213 
, is_in);
  reg \$auto$verilog_backend.cc:2373:dump_module$8  = 0;
  input ack;
  wire ack;
  wire \ack$114 ;
  wire \ack$145 ;
  output \ack$172 ;
  reg \ack$172 ;
  input \ack$176 ;
  wire \ack$176 ;
  input \ack$196 ;
  wire \ack$196 ;
  wire \ack$211 ;
  wire \ack$227 ;
  wire \ack$43 ;
  wire \ack$83 ;
  input [7:0] active_config;
  wire [7:0] active_config;
  wire [7:0] \active_config$118 ;
  wire [7:0] \active_config$149 ;
  wire [7:0] \active_config$51 ;
  wire [7:0] \active_config$87 ;
  input [6:0] address;
  wire [6:0] address;
  wire [6:0] \address$102 ;
  wire [6:0] \address$133 ;
  wire [6:0] \address$19 ;
  wire [6:0] \address$71 ;
  output address_changed;
  reg address_changed;
  input \address_changed$181 ;
  wire \address_changed$181 ;
  wire \address_changed$200 ;
  wire \address_changed$215 ;
  wire \address_changed$231 ;
  input claim;
  wire claim;
  input \claim$157 ;
  wire \claim$157 ;
  wire \claim$158 ;
  output [5:0] clear_endpoint_halt;
  reg [5:0] clear_endpoint_halt;
  input [5:0] \clear_endpoint_halt$189 ;
  wire [5:0] \clear_endpoint_halt$189 ;
  wire \clear_endpoint_halt$189.direction ;
  wire \clear_endpoint_halt$189.enable ;
  wire [3:0] \clear_endpoint_halt$189.number ;
  wire [5:0] \clear_endpoint_halt$204 ;
  wire \clear_endpoint_halt$204.direction ;
  wire \clear_endpoint_halt$204.enable ;
  wire [3:0] \clear_endpoint_halt$204.number ;
  wire [5:0] \clear_endpoint_halt$219 ;
  wire \clear_endpoint_halt$219.direction ;
  wire \clear_endpoint_halt$219.enable ;
  wire [3:0] \clear_endpoint_halt$219.number ;
  wire [5:0] \clear_endpoint_halt$235 ;
  wire \clear_endpoint_halt$235.direction ;
  wire \clear_endpoint_halt$235.enable ;
  wire [3:0] \clear_endpoint_halt$235.number ;
  wire \clear_endpoint_halt.direction ;
  wire \clear_endpoint_halt.enable ;
  wire [3:0] \clear_endpoint_halt.number ;
  output config_changed;
  reg config_changed;
  input \config_changed$185 ;
  wire \config_changed$185 ;
  wire \config_changed$202 ;
  wire \config_changed$217 ;
  wire \config_changed$233 ;
  input data_requested;
  wire data_requested;
  wire \data_requested$112 ;
  wire \data_requested$143 ;
  wire \data_requested$39 ;
  wire \data_requested$81 ;
  input [3:0] endpoint;
  wire [3:0] endpoint;
  wire [3:0] \endpoint$103 ;
  wire [3:0] \endpoint$134 ;
  wire [3:0] \endpoint$21 ;
  wire [3:0] \endpoint$72 ;
  output first;
  reg first;
  input \first$163 ;
  wire \first$163 ;
  wire \first$191 ;
  wire \first$206 ;
  wire \first$222 ;
  input [10:0] frame;
  wire [10:0] frame;
  wire [10:0] \frame$106 ;
  wire [10:0] \frame$137 ;
  wire [10:0] \frame$27 ;
  wire [10:0] \frame$75 ;
  wire [2:0] i;
  input [15:0] index;
  wire [15:0] index;
  wire [15:0] \index$11 ;
  wire [15:0] \index$129 ;
  wire [15:0] \index$67 ;
  wire [15:0] \index$98 ;
  input is_in;
  wire is_in;
  wire \is_in$108 ;
  wire \is_in$139 ;
  wire \is_in$31 ;
  wire \is_in$77 ;
  input is_in_request;
  wire is_in_request;
  wire \is_in_request$126 ;
  wire \is_in_request$5 ;
  wire \is_in_request$64 ;
  wire \is_in_request$95 ;
  input is_out;
  wire is_out;
  wire \is_out$109 ;
  wire \is_out$140 ;
  wire \is_out$33 ;
  wire \is_out$78 ;
  input is_ping;
  wire is_ping;
  wire \is_ping$111 ;
  wire \is_ping$142 ;
  wire \is_ping$37 ;
  wire \is_ping$80 ;
  input is_setup;
  wire is_setup;
  wire \is_setup$110 ;
  wire \is_setup$141 ;
  wire \is_setup$35 ;
  wire \is_setup$79 ;
  output last;
  reg last;
  input \last$165 ;
  wire \last$165 ;
  input \last$192 ;
  wire \last$192 ;
  wire \last$207 ;
  wire \last$223 ;
  input [15:0] length;
  wire [15:0] length;
  wire [15:0] \length$13 ;
  wire [15:0] \length$130 ;
  wire [15:0] \length$68 ;
  wire [15:0] \length$99 ;
  wire n;
  input nak;
  wire nak;
  wire \nak$115 ;
  wire \nak$146 ;
  output \nak$173 ;
  reg \nak$173 ;
  wire \nak$177 ;
  wire \nak$197 ;
  wire \nak$212 ;
  wire \nak$228 ;
  wire \nak$45 ;
  wire \nak$84 ;
  output [6:0] new_address;
  reg [6:0] new_address;
  input [6:0] \new_address$183 ;
  wire [6:0] \new_address$183 ;
  wire [6:0] \new_address$201 ;
  wire [6:0] \new_address$216 ;
  wire [6:0] \new_address$232 ;
  output [7:0] new_config;
  reg [7:0] new_config;
  input [7:0] \new_config$187 ;
  wire [7:0] \new_config$187 ;
  wire [7:0] \new_config$203 ;
  wire [7:0] \new_config$218 ;
  wire [7:0] \new_config$234 ;
  input new_frame;
  wire new_frame;
  wire \new_frame$107 ;
  wire \new_frame$138 ;
  wire \new_frame$29 ;
  wire \new_frame$76 ;
  input new_token;
  wire new_token;
  wire \new_token$104 ;
  wire \new_token$135 ;
  wire \new_token$23 ;
  wire \new_token$73 ;
  input next;
  wire next;
  wire \next$120 ;
  wire \next$151 ;
  wire \next$55 ;
  wire \next$89 ;
  input nyet;
  wire nyet;
  wire \nyet$117 ;
  wire \nyet$148 ;
  reg \nyet$175 ;
  wire \nyet$179 ;
  wire \nyet$199 ;
  wire \nyet$214 ;
  wire \nyet$230 ;
  wire \nyet$49 ;
  wire \nyet$86 ;
  wire [1:0] o;
  input [7:0] payload;
  wire [7:0] payload;
  wire [7:0] \payload$121 ;
  wire [7:0] \payload$152 ;
  output [7:0] \payload$166 ;
  reg [7:0] \payload$166 ;
  input [7:0] \payload$167 ;
  wire [7:0] \payload$167 ;
  wire [7:0] \payload$193 ;
  wire [7:0] \payload$208 ;
  wire [7:0] \payload$224 ;
  wire [7:0] \payload$57 ;
  wire [7:0] \payload$90 ;
  input [3:0] pid;
  wire [3:0] pid;
  wire [3:0] \pid$101 ;
  wire [3:0] \pid$132 ;
  wire [3:0] \pid$17 ;
  wire [3:0] \pid$70 ;
  output ready;
  reg ready;
  input \ready$169 ;
  wire \ready$169 ;
  reg \ready$194 ;
  reg \ready$209 ;
  reg \ready$225 ;
  input ready_for_response;
  wire ready_for_response;
  wire \ready_for_response$105 ;
  wire \ready_for_response$136 ;
  wire \ready_for_response$25 ;
  wire \ready_for_response$74 ;
  input received;
  wire received;
  wire \received$100 ;
  wire \received$131 ;
  wire \received$15 ;
  wire \received$69 ;
  input [4:0] recipient;
  wire [4:0] recipient;
  wire [4:0] \recipient$1 ;
  wire [4:0] \recipient$124 ;
  wire [4:0] \recipient$62 ;
  wire [4:0] \recipient$93 ;
  input [7:0] request;
  wire [7:0] request;
  wire [7:0] \request$127 ;
  wire [7:0] \request$65 ;
  wire [7:0] \request$7 ;
  wire [7:0] \request$96 ;
  input rx_invalid;
  wire rx_invalid;
  wire \rx_invalid$123 ;
  wire \rx_invalid$154 ;
  wire \rx_invalid$61 ;
  wire \rx_invalid$92 ;
  input rx_ready_for_response;
  wire rx_ready_for_response;
  wire \rx_ready_for_response$122 ;
  wire \rx_ready_for_response$153 ;
  wire \rx_ready_for_response$59 ;
  wire \rx_ready_for_response$91 ;
  input stall;
  wire stall;
  wire \stall$116 ;
  wire \stall$147 ;
  output \stall$174 ;
  reg \stall$174 ;
  input \stall$178 ;
  wire \stall$178 ;
  wire \stall$198 ;
  input \stall$213 ;
  wire \stall$213 ;
  wire \stall$229 ;
  wire \stall$47 ;
  wire \stall$85 ;
  input status_requested;
  wire status_requested;
  wire \status_requested$113 ;
  wire \status_requested$144 ;
  wire \status_requested$41 ;
  wire \status_requested$82 ;
  output tx_data_pid;
  reg tx_data_pid;
  input \tx_data_pid$171 ;
  wire \tx_data_pid$171 ;
  wire \tx_data_pid$195 ;
  wire \tx_data_pid$210 ;
  wire \tx_data_pid$226 ;
  input [1:0] \type ;
  wire [1:0] \type ;
  wire [1:0] \type$125 ;
  wire [1:0] \type$3 ;
  wire [1:0] \type$63 ;
  wire [1:0] \type$94 ;
  input valid;
  wire valid;
  wire \valid$119 ;
  wire \valid$150 ;
  output \valid$160 ;
  reg \valid$160 ;
  input \valid$161 ;
  wire \valid$161 ;
  input \valid$190 ;
  wire \valid$190 ;
  wire \valid$205 ;
  wire \valid$221 ;
  wire \valid$53 ;
  wire \valid$88 ;
  input [15:0] value;
  wire [15:0] value;
  wire [15:0] \value$128 ;
  wire [15:0] \value$66 ;
  wire [15:0] \value$9 ;
  wire [15:0] \value$97 ;
  \LunaUSBSerialDevice.usb0.usb.USBControlEndpoint.request_mux.encoder  encoder (
    .n(n),
    .o(o),
    .\port$1925$0 (claim),
    .\port$1982$0 (\claim$157 )
  );
  \LunaUSBSerialDevice.usb0.usb.USBControlEndpoint.request_mux.stall_handler  stall_handler (
    .data_requested(data_requested),
    .stall(\stall$229 ),
    .status_requested(status_requested)
  );
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$8 ) begin end
    \valid$160  = 1'h0;
    casez (o)
      2'h0:
          \valid$160  = \valid$161 ;
      2'h1:
          \valid$160  = \valid$190 ;
      2'h2:
          \valid$160  = 1'h0;
    endcase
    if (n) begin
      \valid$160  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$8 ) begin end
    \nyet$175  = 1'h0;
    casez (o)
      2'h0:
          \nyet$175  = 1'h0;
      2'h1:
          \nyet$175  = 1'h0;
      2'h2:
          \nyet$175  = 1'h0;
    endcase
    if (n) begin
      \nyet$175  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$8 ) begin end
    address_changed = 1'h0;
    casez (o)
      2'h0:
          address_changed = \address_changed$181 ;
      2'h1:
          address_changed = 1'h0;
      2'h2:
          address_changed = 1'h0;
    endcase
    if (n) begin
      address_changed = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$8 ) begin end
    new_address = 7'h00;
    casez (o)
      2'h0:
          new_address = \new_address$183 ;
      2'h1:
          new_address = 7'h00;
      2'h2:
          new_address = 7'h00;
    endcase
    if (n) begin
      new_address = 7'h00;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$8 ) begin end
    config_changed = 1'h0;
    casez (o)
      2'h0:
          config_changed = \config_changed$185 ;
      2'h1:
          config_changed = 1'h0;
      2'h2:
          config_changed = 1'h0;
    endcase
    if (n) begin
      config_changed = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$8 ) begin end
    new_config = 8'h00;
    casez (o)
      2'h0:
          new_config = \new_config$187 ;
      2'h1:
          new_config = 8'h00;
      2'h2:
          new_config = 8'h00;
    endcase
    if (n) begin
      new_config = 8'h00;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$8 ) begin end
    clear_endpoint_halt = 6'h00;
    casez (o)
      2'h0:
          clear_endpoint_halt = \clear_endpoint_halt$189 ;
      2'h1:
          clear_endpoint_halt = 6'h00;
      2'h2:
          clear_endpoint_halt = 6'h00;
    endcase
    if (n) begin
      clear_endpoint_halt = 6'h00;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$8 ) begin end
    \ready$194  = 1'h0;
    casez (o)
      2'h0:
          /* empty */;
      2'h1:
          \ready$194  = \ready$169 ;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$8 ) begin end
    \ready$209  = 1'h0;
    casez (o)
      2'h0:
          /* empty */;
      2'h1:
          /* empty */;
      2'h2:
          \ready$209  = \ready$169 ;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$8 ) begin end
    \ready$225  = 1'h0;
    if (n) begin
      \ready$225  = \ready$169 ;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$8 ) begin end
    first = 1'h0;
    casez (o)
      2'h0:
          first = \first$163 ;
      2'h1:
          first = 1'h0;
      2'h2:
          first = 1'h0;
    endcase
    if (n) begin
      first = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$8 ) begin end
    last = 1'h0;
    casez (o)
      2'h0:
          last = \last$165 ;
      2'h1:
          last = \last$192 ;
      2'h2:
          last = 1'h0;
    endcase
    if (n) begin
      last = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$8 ) begin end
    \payload$166  = 8'h00;
    casez (o)
      2'h0:
          \payload$166  = \payload$167 ;
      2'h1:
          \payload$166  = 8'h00;
      2'h2:
          \payload$166  = 8'h00;
    endcase
    if (n) begin
      \payload$166  = 8'h00;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$8 ) begin end
    ready = 1'h0;
    casez (o)
      2'h0:
          ready = \ready$169 ;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$8 ) begin end
    tx_data_pid = 1'h1;
    casez (o)
      2'h0:
          tx_data_pid = \tx_data_pid$171 ;
      2'h1:
          tx_data_pid = 1'h1;
      2'h2:
          tx_data_pid = 1'h1;
    endcase
    if (n) begin
      tx_data_pid = 1'h1;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$8 ) begin end
    \ack$172  = 1'h0;
    casez (o)
      2'h0:
          \ack$172  = \ack$176 ;
      2'h1:
          \ack$172  = \ack$196 ;
      2'h2:
          \ack$172  = 1'h0;
    endcase
    if (n) begin
      \ack$172  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$8 ) begin end
    \nak$173  = 1'h0;
    casez (o)
      2'h0:
          \nak$173  = 1'h0;
      2'h1:
          \nak$173  = 1'h0;
      2'h2:
          \nak$173  = 1'h0;
    endcase
    if (n) begin
      \nak$173  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$8 ) begin end
    \stall$174  = 1'h0;
    casez (o)
      2'h0:
          \stall$174  = \stall$178 ;
      2'h1:
          \stall$174  = 1'h0;
      2'h2:
          \stall$174  = \stall$213 ;
    endcase
    if (n) begin
      \stall$174  = \stall$229 ;
    end
  end
  assign \recipient$1  = recipient;
  assign \type$3  = \type ;
  assign \is_in_request$5  = is_in_request;
  assign \request$7  = request;
  assign \value$9  = value;
  assign \index$11  = index;
  assign \length$13  = length;
  assign \received$15  = received;
  assign \pid$17  = pid;
  assign \address$19  = address;
  assign \endpoint$21  = endpoint;
  assign \new_token$23  = new_token;
  assign \ready_for_response$25  = ready_for_response;
  assign \frame$27  = frame;
  assign \new_frame$29  = new_frame;
  assign \is_in$31  = is_in;
  assign \is_out$33  = is_out;
  assign \is_setup$35  = is_setup;
  assign \is_ping$37  = is_ping;
  assign \data_requested$39  = data_requested;
  assign \status_requested$41  = status_requested;
  assign \ack$43  = ack;
  assign \nak$45  = nak;
  assign \stall$47  = stall;
  assign \nyet$49  = nyet;
  assign \active_config$51  = active_config;
  assign \valid$53  = valid;
  assign \next$55  = next;
  assign \payload$57  = payload;
  assign \rx_ready_for_response$59  = rx_ready_for_response;
  assign \rx_invalid$61  = rx_invalid;
  assign \recipient$62  = recipient;
  assign \type$63  = \type ;
  assign \is_in_request$64  = is_in_request;
  assign \request$65  = request;
  assign \value$66  = value;
  assign \index$67  = index;
  assign \length$68  = length;
  assign \received$69  = received;
  assign \pid$70  = pid;
  assign \address$71  = address;
  assign \endpoint$72  = endpoint;
  assign \new_token$73  = new_token;
  assign \ready_for_response$74  = ready_for_response;
  assign \frame$75  = frame;
  assign \new_frame$76  = new_frame;
  assign \is_in$77  = is_in;
  assign \is_out$78  = is_out;
  assign \is_setup$79  = is_setup;
  assign \is_ping$80  = is_ping;
  assign \data_requested$81  = data_requested;
  assign \status_requested$82  = status_requested;
  assign \ack$83  = ack;
  assign \nak$84  = nak;
  assign \stall$85  = stall;
  assign \nyet$86  = nyet;
  assign \active_config$87  = active_config;
  assign \valid$88  = valid;
  assign \next$89  = next;
  assign \payload$90  = payload;
  assign \rx_ready_for_response$91  = rx_ready_for_response;
  assign \rx_invalid$92  = rx_invalid;
  assign \recipient$93  = recipient;
  assign \type$94  = \type ;
  assign \is_in_request$95  = is_in_request;
  assign \request$96  = request;
  assign \value$97  = value;
  assign \index$98  = index;
  assign \length$99  = length;
  assign \received$100  = received;
  assign \pid$101  = pid;
  assign \address$102  = address;
  assign \endpoint$103  = endpoint;
  assign \new_token$104  = new_token;
  assign \ready_for_response$105  = ready_for_response;
  assign \frame$106  = frame;
  assign \new_frame$107  = new_frame;
  assign \is_in$108  = is_in;
  assign \is_out$109  = is_out;
  assign \is_setup$110  = is_setup;
  assign \is_ping$111  = is_ping;
  assign \data_requested$112  = data_requested;
  assign \status_requested$113  = status_requested;
  assign \ack$114  = ack;
  assign \nak$115  = nak;
  assign \stall$116  = stall;
  assign \nyet$117  = nyet;
  assign \active_config$118  = active_config;
  assign \valid$119  = valid;
  assign \next$120  = next;
  assign \payload$121  = payload;
  assign \rx_ready_for_response$122  = rx_ready_for_response;
  assign \rx_invalid$123  = rx_invalid;
  assign \recipient$124  = recipient;
  assign \type$125  = \type ;
  assign \is_in_request$126  = is_in_request;
  assign \request$127  = request;
  assign \value$128  = value;
  assign \index$129  = index;
  assign \length$130  = length;
  assign \received$131  = received;
  assign \pid$132  = pid;
  assign \address$133  = address;
  assign \endpoint$134  = endpoint;
  assign \new_token$135  = new_token;
  assign \ready_for_response$136  = ready_for_response;
  assign \frame$137  = frame;
  assign \new_frame$138  = new_frame;
  assign \is_in$139  = is_in;
  assign \is_out$140  = is_out;
  assign \is_setup$141  = is_setup;
  assign \is_ping$142  = is_ping;
  assign \data_requested$143  = data_requested;
  assign \status_requested$144  = status_requested;
  assign \ack$145  = ack;
  assign \nak$146  = nak;
  assign \stall$147  = stall;
  assign \nyet$148  = nyet;
  assign \active_config$149  = active_config;
  assign \valid$150  = valid;
  assign \next$151  = next;
  assign \payload$152  = payload;
  assign \rx_ready_for_response$153  = rx_ready_for_response;
  assign \rx_invalid$154  = rx_invalid;
  assign i = { 1'h0, \claim$157 , claim };
  assign \claim$158  = 1'h0;
  assign \nak$177  = 1'h0;
  assign \nyet$179  = 1'h0;
  assign \first$191  = 1'h0;
  assign \payload$193  = 8'h00;
  assign \tx_data_pid$195  = 1'h1;
  assign \nak$197  = 1'h0;
  assign \stall$198  = 1'h0;
  assign \nyet$199  = 1'h0;
  assign \address_changed$200  = 1'h0;
  assign \new_address$201  = 7'h00;
  assign \config_changed$202  = 1'h0;
  assign \new_config$203  = 8'h00;
  assign \clear_endpoint_halt$204  = 6'h00;
  assign \valid$205  = 1'h0;
  assign \first$206  = 1'h0;
  assign \last$207  = 1'h0;
  assign \payload$208  = 8'h00;
  assign \tx_data_pid$210  = 1'h1;
  assign \ack$211  = 1'h0;
  assign \nak$212  = 1'h0;
  assign \nyet$214  = 1'h0;
  assign \address_changed$215  = 1'h0;
  assign \new_address$216  = 7'h00;
  assign \config_changed$217  = 1'h0;
  assign \new_config$218  = 8'h00;
  assign \clear_endpoint_halt$219  = 6'h00;
  assign \valid$221  = 1'h0;
  assign \first$222  = 1'h0;
  assign \last$223  = 1'h0;
  assign \payload$224  = 8'h00;
  assign \tx_data_pid$226  = 1'h1;
  assign \ack$227  = 1'h0;
  assign \nak$228  = 1'h0;
  assign \nyet$230  = 1'h0;
  assign \address_changed$231  = 1'h0;
  assign \new_address$232  = 7'h00;
  assign \config_changed$233  = 1'h0;
  assign \new_config$234  = 8'h00;
  assign \clear_endpoint_halt$235  = 6'h00;
  assign \clear_endpoint_halt.enable  = clear_endpoint_halt[0];
  assign \clear_endpoint_halt.direction  = clear_endpoint_halt[1];
  assign \clear_endpoint_halt.number  = clear_endpoint_halt[5:2];
  assign \clear_endpoint_halt$189.enable  = \clear_endpoint_halt$189 [0];
  assign \clear_endpoint_halt$189.direction  = \clear_endpoint_halt$189 [1];
  assign \clear_endpoint_halt$189.number  = \clear_endpoint_halt$189 [5:2];
  assign \clear_endpoint_halt$204.enable  = 1'h0;
  assign \clear_endpoint_halt$204.direction  = 1'h0;
  assign \clear_endpoint_halt$204.number  = 4'h0;
  assign \clear_endpoint_halt$219.enable  = 1'h0;
  assign \clear_endpoint_halt$219.direction  = 1'h0;
  assign \clear_endpoint_halt$219.number  = 4'h0;
  assign \clear_endpoint_halt$235.enable  = 1'h0;
  assign \clear_endpoint_halt$235.direction  = 1'h0;
  assign \clear_endpoint_halt$235.number  = 4'h0;
endmodule

module \LunaUSBSerialDevice.usb0.usb.USBControlEndpoint.request_mux.encoder (n, \port$1925$0 , \port$1982$0 , o);
  reg \$auto$verilog_backend.cc:2373:dump_module$9  = 0;
  wire [2:0] i;
  output n;
  reg n;
  output [1:0] o;
  reg [1:0] o;
  input \port$1925$0 ;
  wire \port$1925$0 ;
  input \port$1982$0 ;
  wire \port$1982$0 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$9 ) begin end
    o = 2'h0;
    casez ({ 1'h0, \port$1982$0 , \port$1925$0  })
      3'h1:
          o = 2'h0;
      3'h2:
          o = 2'h1;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$9 ) begin end
    n = 1'h0;
    (* full_case = 32'd1 *)
    casez ({ 1'h0, \port$1982$0 , \port$1925$0  })
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      default:
          n = 1'h1;
    endcase
  end
  assign i = { 1'h0, \port$1982$0 , \port$1925$0  };
endmodule

module \LunaUSBSerialDevice.usb0.usb.USBControlEndpoint.request_mux.stall_handler (status_requested, stall, data_requested);
  reg \$auto$verilog_backend.cc:2373:dump_module$10  = 0;
  wire \$1 ;
  input data_requested;
  wire data_requested;
  output stall;
  reg stall;
  input status_requested;
  wire status_requested;
  assign \$1  = data_requested | status_requested;
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$10 ) begin end
    stall = 1'h0;
    if (\$1 ) begin
      stall = 1'h1;
    end
  end
endmodule

module \LunaUSBSerialDevice.usb0.usb.USBControlEndpoint.setup_decoder (usb_rst, rx_valid, crc, rx_active, rx_data, speed, new_token, pid, tx_allowed, ack, received, recipient, \type , is_in_request, request, value, index, \length$28 , \start$4 , start, usb_clk
);
  reg \$auto$verilog_backend.cc:2373:dump_module$11  = 0;
  wire \$1 ;
  wire \$10 ;
  wire \$11 ;
  reg \$12 ;
  reg [1:0] \$13 ;
  reg [4:0] \$14 ;
  reg [1:0] \$15 ;
  reg \$16 ;
  reg [7:0] \$17 ;
  reg [15:0] \$18 ;
  reg [15:0] \$19 ;
  wire \$2 ;
  reg [15:0] \$20 ;
  wire \$3 ;
  wire \$4 ;
  wire \$5 ;
  wire \$6 ;
  wire \$7 ;
  wire \$8 ;
  wire \$9 ;
  output ack;
  reg ack;
  input [15:0] crc;
  wire [15:0] crc;
  wire [15:0] \crc$3 ;
  (* enum_base_type = "fsmState" *)
  (* enum_value_00 = "IDLE/0" *)
  (* enum_value_01 = "READ_DATA/1" *)
  (* enum_value_10 = "INTERPACKET_DELAY/2" *)
  reg [1:0] fsm_state = 2'h0;
  output [15:0] index;
  reg [15:0] index = 16'h0000;
  output is_in_request;
  reg is_in_request = 1'h0;
  wire [3:0] length;
  output [15:0] \length$28 ;
  reg [15:0] \length$28  = 16'h0000;
  wire new_packet;
  input new_token;
  wire new_token;
  wire [7:0] packet_0;
  wire [7:0] packet_1;
  wire [7:0] packet_2;
  wire [7:0] packet_3;
  wire [7:0] packet_4;
  wire [7:0] packet_5;
  wire [7:0] packet_6;
  wire [7:0] packet_7;
  input [3:0] pid;
  wire [3:0] pid;
  output received;
  reg received = 1'h0;
  output [4:0] recipient;
  reg [4:0] recipient = 5'h00;
  output [7:0] request;
  reg [7:0] request = 8'h00;
  input rx_active;
  wire rx_active;
  input [7:0] rx_data;
  wire [7:0] rx_data;
  input rx_valid;
  wire rx_valid;
  input [1:0] speed;
  wire [1:0] speed;
  output start;
  wire start;
  wire \start$1 ;
  output \start$4 ;
  wire \start$4 ;
  input tx_allowed;
  wire tx_allowed;
  output [1:0] \type ;
  reg [1:0] \type  = 2'h0;
  input usb_clk;
  wire usb_clk;
  input usb_rst;
  wire usb_rst;
  output [15:0] value;
  reg [15:0] value = 16'h0000;
  assign \$1  = length == 4'h8;
  assign \$2  = ! speed;
  assign \$3  = tx_allowed | \$2 ;
  assign \$4  = ! fsm_state;
  assign \$5  = fsm_state == 1'h1;
  assign \$6  = fsm_state == 2'h2;
  assign \$7  = pid == 4'hd;
  assign \$8  = \$7  & new_token;
  assign \$9  = length == 4'h8;
  assign \$10  = ! speed;
  assign \$11  = tx_allowed | \$10 ;
  always @(posedge usb_clk)
    received <= \$12 ;
  always @(posedge usb_clk)
    fsm_state <= \$13 ;
  always @(posedge usb_clk)
    recipient <= \$14 ;
  always @(posedge usb_clk)
    \type  <= \$15 ;
  always @(posedge usb_clk)
    is_in_request <= \$16 ;
  always @(posedge usb_clk)
    request <= \$17 ;
  always @(posedge usb_clk)
    value <= \$18 ;
  always @(posedge usb_clk)
    index <= \$19 ;
  always @(posedge usb_clk)
    \length$28  <= \$20 ;
  \LunaUSBSerialDevice.usb0.usb.USBControlEndpoint.setup_decoder.data_handler  data_handler (
    .crc(crc),
    .length(length),
    .new_packet(\start$4 ),
    .packet_0(packet_0),
    .packet_1(packet_1),
    .packet_2(packet_2),
    .packet_3(packet_3),
    .packet_4(packet_4),
    .packet_5(packet_5),
    .packet_6(packet_6),
    .packet_7(packet_7),
    .rx_active(rx_active),
    .rx_data(rx_data),
    .rx_valid(rx_valid),
    .start(start),
    .usb_clk(usb_clk),
    .usb_rst(usb_rst)
  );
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$11 ) begin end
    ack = 1'h0;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          if (\start$4 ) begin
            if (\$1 ) begin
              if (\$3 ) begin
                ack = 1'h1;
              end
            end
          end
      2'h2:
          if (tx_allowed) begin
            ack = 1'h1;
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$11 ) begin end
    \$12  = 1'h0;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          if (\start$4 ) begin
            if (\$9 ) begin
              \$12  = 1'h1;
            end
          end
    endcase
    if (usb_rst) begin
      \$12  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$11 ) begin end
    \$13  = fsm_state;
    casez (fsm_state)
      2'h0:
          if (\$8 ) begin
            \$13  = 2'h1;
          end
      2'h1:
        begin
          if (new_token) begin
            \$13  = 2'h0;
          end
          if (\start$4 ) begin
            (* full_case = 32'd1 *)
            if (\$9 ) begin
              (* full_case = 32'd1 *)
              if (\$11 ) begin
                \$13  = 2'h0;
              end else begin
                \$13  = 2'h2;
              end
            end else begin
              \$13  = 2'h0;
            end
          end
        end
      2'h2:
          if (tx_allowed) begin
            \$13  = 2'h0;
          end
    endcase
    if (usb_rst) begin
      \$13  = 2'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$11 ) begin end
    \$14  = recipient;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          if (\start$4 ) begin
            if (\$9 ) begin
              \$14  = packet_0[4:0];
            end
          end
    endcase
    if (usb_rst) begin
      \$14  = 5'h00;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$11 ) begin end
    \$15  = \type ;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          if (\start$4 ) begin
            if (\$9 ) begin
              \$15  = packet_0[6:5];
            end
          end
    endcase
    if (usb_rst) begin
      \$15  = 2'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$11 ) begin end
    \$16  = is_in_request;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          if (\start$4 ) begin
            if (\$9 ) begin
              \$16  = packet_0[7];
            end
          end
    endcase
    if (usb_rst) begin
      \$16  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$11 ) begin end
    \$17  = request;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          if (\start$4 ) begin
            if (\$9 ) begin
              \$17  = packet_1;
            end
          end
    endcase
    if (usb_rst) begin
      \$17  = 8'h00;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$11 ) begin end
    \$18  = value;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          if (\start$4 ) begin
            if (\$9 ) begin
              \$18  = { packet_3, packet_2 };
            end
          end
    endcase
    if (usb_rst) begin
      \$18  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$11 ) begin end
    \$19  = index;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          if (\start$4 ) begin
            if (\$9 ) begin
              \$19  = { packet_5, packet_4 };
            end
          end
    endcase
    if (usb_rst) begin
      \$19  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$11 ) begin end
    \$20  = \length$28 ;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          if (\start$4 ) begin
            if (\$9 ) begin
              \$20  = { packet_7, packet_6 };
            end
          end
    endcase
    if (usb_rst) begin
      \$20  = 16'h0000;
    end
  end
  assign \start$1  = start;
  assign \crc$3  = crc;
  assign new_packet = \start$4 ;
endmodule

module \LunaUSBSerialDevice.usb0.usb.USBControlEndpoint.setup_decoder.data_handler (usb_rst, rx_valid, crc, rx_active, rx_data, new_packet, length, packet_0, packet_1, packet_2, packet_3, packet_4, packet_5, packet_6, packet_7, start, usb_clk);
  reg \$auto$verilog_backend.cc:2373:dump_module$12  = 0;
  wire \$1 ;
  wire [4:0] \$10 ;
  wire \$11 ;
  wire \$12 ;
  wire \$13 ;
  wire \$14 ;
  wire \$15 ;
  reg \$16 ;
  reg [1:0] \$17 ;
  reg [3:0] \$18 ;
  reg [3:0] \$19 ;
  wire [3:0] \$2 ;
  reg [7:0] \$20 ;
  reg [7:0] \$21 ;
  reg [7:0] \$22 ;
  reg [7:0] \$23 ;
  reg [7:0] \$24 ;
  reg [7:0] \$25 ;
  reg [7:0] \$26 ;
  reg [7:0] \$27 ;
  reg [7:0] \$28 ;
  reg [7:0] \$29 ;
  wire \$3 ;
  reg [15:0] \$30 ;
  reg [15:0] \$31 ;
  reg [15:0] \$32 ;
  reg [3:0] \$33 ;
  reg [3:0] \$34 ;
  reg [7:0] \$35 ;
  reg [7:0] \$36 ;
  reg [7:0] \$37 ;
  reg [7:0] \$38 ;
  reg [7:0] \$39 ;
  wire \$4 ;
  reg [7:0] \$40 ;
  reg [7:0] \$41 ;
  reg [7:0] \$42 ;
  wire \$5 ;
  wire \$6 ;
  wire [4:0] \$7 ;
  wire \$8 ;
  wire \$9 ;
  reg [7:0] \$signal  = 8'h00;
  reg [7:0] \$signal$10  = 8'h00;
  reg [7:0] \$signal$11  = 8'h00;
  reg [7:0] \$signal$12  = 8'h00;
  reg [7:0] \$signal$13  = 8'h00;
  reg [7:0] \$signal$14  = 8'h00;
  reg [7:0] \$signal$15  = 8'h00;
  reg [7:0] \$signal$16  = 8'h00;
  reg [7:0] \$signal$17  = 8'h00;
  reg [7:0] \$signal$18  = 8'h00;
  reg [3:0] active_pid = 4'h0;
  input [15:0] crc;
  wire [15:0] crc;
  (* enum_base_type = "fsmState" *)
  (* enum_value_00 = "IDLE/0" *)
  (* enum_value_01 = "READ_PID/1" *)
  (* enum_value_10 = "CAPTURE_DATA/2" *)
  (* enum_value_11 = "IRRELEVANT/3" *)
  reg [1:0] fsm_state = 2'h0;
  reg [15:0] last_byte_crc = 16'h0000;
  reg [15:0] last_word = 16'h0000;
  reg [15:0] last_word_crc = 16'h0000;
  output [3:0] length;
  reg [3:0] length = 4'h0;
  output new_packet;
  reg new_packet = 1'h0;
  output [7:0] packet_0;
  reg [7:0] packet_0 = 8'h00;
  output [7:0] packet_1;
  reg [7:0] packet_1 = 8'h00;
  output [7:0] packet_2;
  reg [7:0] packet_2 = 8'h00;
  output [7:0] packet_3;
  reg [7:0] packet_3 = 8'h00;
  output [7:0] packet_4;
  reg [7:0] packet_4 = 8'h00;
  output [7:0] packet_5;
  reg [7:0] packet_5 = 8'h00;
  output [7:0] packet_6;
  reg [7:0] packet_6 = 8'h00;
  output [7:0] packet_7;
  reg [7:0] packet_7 = 8'h00;
  reg [3:0] packet_id = 4'h0;
  reg [3:0] position_in_packet = 4'h0;
  input rx_active;
  wire rx_active;
  input [7:0] rx_data;
  wire [7:0] rx_data;
  input rx_valid;
  wire rx_valid;
  output start;
  reg start;
  input usb_clk;
  wire usb_clk;
  input usb_rst;
  wire usb_rst;
  always @(posedge usb_clk)
    packet_2 <= \$37 ;
  always @(posedge usb_clk)
    packet_3 <= \$38 ;
  always @(posedge usb_clk)
    packet_4 <= \$39 ;
  always @(posedge usb_clk)
    packet_5 <= \$40 ;
  always @(posedge usb_clk)
    packet_6 <= \$41 ;
  always @(posedge usb_clk)
    packet_7 <= \$42 ;
  assign \$1  = ~ rx_active;
  assign \$2  = ~ rx_data[7:4];
  assign \$3  = rx_data[3:0] == \$2 ;
  assign \$4  = rx_data[1:0] == 2'h3;
  assign \$5  = \$3  & \$4 ;
  assign \$6  = position_in_packet >= 4'ha;
  assign \$7  = position_in_packet + 1'h1;
  assign \$8  = ~ rx_active;
  assign \$9  = last_word_crc == last_word;
  assign \$10  = position_in_packet - 2'h2;
  assign \$11  = ~ rx_active;
  assign \$12  = ! fsm_state;
  assign \$13  = fsm_state == 1'h1;
  assign \$14  = fsm_state == 2'h2;
  assign \$15  = fsm_state == 2'h3;
  always @(posedge usb_clk)
    new_packet <= \$16 ;
  always @(posedge usb_clk)
    fsm_state <= \$17 ;
  always @(posedge usb_clk)
    active_pid <= \$18 ;
  always @(posedge usb_clk)
    position_in_packet <= \$19 ;
  always @(posedge usb_clk)
    \$signal  <= \$20 ;
  always @(posedge usb_clk)
    \$signal$10  <= \$21 ;
  always @(posedge usb_clk)
    \$signal$11  <= \$22 ;
  always @(posedge usb_clk)
    \$signal$12  <= \$23 ;
  always @(posedge usb_clk)
    \$signal$13  <= \$24 ;
  always @(posedge usb_clk)
    \$signal$14  <= \$25 ;
  always @(posedge usb_clk)
    \$signal$15  <= \$26 ;
  always @(posedge usb_clk)
    \$signal$16  <= \$27 ;
  always @(posedge usb_clk)
    \$signal$17  <= \$28 ;
  always @(posedge usb_clk)
    \$signal$18  <= \$29 ;
  always @(posedge usb_clk)
    last_word <= \$30 ;
  always @(posedge usb_clk)
    last_word_crc <= \$31 ;
  always @(posedge usb_clk)
    last_byte_crc <= \$32 ;
  always @(posedge usb_clk)
    packet_id <= \$33 ;
  always @(posedge usb_clk)
    length <= \$34 ;
  always @(posedge usb_clk)
    packet_0 <= \$35 ;
  always @(posedge usb_clk)
    packet_1 <= \$36 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$12 ) begin end
    \$37  = packet_2;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          /* empty */;
      2'h2:
          if (\$8 ) begin
            if (\$9 ) begin
              \$37  = \$signal$11 ;
            end
          end
    endcase
    if (usb_rst) begin
      \$37  = 8'h00;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$12 ) begin end
    \$38  = packet_3;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          /* empty */;
      2'h2:
          if (\$8 ) begin
            if (\$9 ) begin
              \$38  = \$signal$12 ;
            end
          end
    endcase
    if (usb_rst) begin
      \$38  = 8'h00;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$12 ) begin end
    \$39  = packet_4;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          /* empty */;
      2'h2:
          if (\$8 ) begin
            if (\$9 ) begin
              \$39  = \$signal$13 ;
            end
          end
    endcase
    if (usb_rst) begin
      \$39  = 8'h00;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$12 ) begin end
    \$40  = packet_5;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          /* empty */;
      2'h2:
          if (\$8 ) begin
            if (\$9 ) begin
              \$40  = \$signal$14 ;
            end
          end
    endcase
    if (usb_rst) begin
      \$40  = 8'h00;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$12 ) begin end
    \$41  = packet_6;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          /* empty */;
      2'h2:
          if (\$8 ) begin
            if (\$9 ) begin
              \$41  = \$signal$15 ;
            end
          end
    endcase
    if (usb_rst) begin
      \$41  = 8'h00;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$12 ) begin end
    \$42  = packet_7;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          /* empty */;
      2'h2:
          if (\$8 ) begin
            if (\$9 ) begin
              \$42  = \$signal$16 ;
            end
          end
    endcase
    if (usb_rst) begin
      \$42  = 8'h00;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$12 ) begin end
    start = 1'h0;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          start = 1'h1;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$12 ) begin end
    \$16  = 1'h0;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          /* empty */;
      2'h2:
          if (\$8 ) begin
            if (\$9 ) begin
              \$16  = 1'h1;
            end
          end
    endcase
    if (usb_rst) begin
      \$16  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$12 ) begin end
    \$17  = fsm_state;
    (* full_case = 32'd1 *)
    casez (fsm_state)
      2'h0:
          if (rx_active) begin
            \$17  = 2'h1;
          end
      2'h1:
          if (\$1 ) begin
            \$17  = 2'h0;
          end else if (rx_valid) begin
            (* full_case = 32'd1 *)
            if (\$5 ) begin
              \$17  = 2'h2;
            end else begin
              \$17  = 2'h3;
            end
          end
      2'h2:
        begin
          if (rx_valid) begin
            if (\$6 ) begin
              \$17  = 2'h3;
            end
          end
          if (\$8 ) begin
            if (\$9 ) begin
              \$17  = 2'h0;
            end
          end
        end
      2'h3:
          if (\$11 ) begin
            \$17  = 2'h0;
          end
    endcase
    if (usb_rst) begin
      \$17  = 2'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$12 ) begin end
    \$18  = active_pid;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          if (\$1 ) begin
          end else if (rx_valid) begin
            if (\$5 ) begin
              \$18  = rx_data[3:0];
            end
          end
    endcase
    if (usb_rst) begin
      \$18  = 4'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$12 ) begin end
    \$19  = position_in_packet;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          if (\$1 ) begin
          end else if (rx_valid) begin
            if (\$5 ) begin
              \$19  = 4'h0;
            end
          end
      2'h2:
          if (rx_valid) begin
            (* full_case = 32'd1 *)
            if (\$6 ) begin
            end else begin
              \$19  = \$7 [3:0];
            end
          end
    endcase
    if (usb_rst) begin
      \$19  = 4'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$12 ) begin end
    \$20  = \$signal ;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          /* empty */;
      2'h2:
          if (rx_valid) begin
            (* full_case = 32'd1 *)
            if (\$6 ) begin
            end else begin
              casez (position_in_packet)
                4'h0:
                    \$20  = rx_data;
              endcase
            end
          end
    endcase
    if (usb_rst) begin
      \$20  = 8'h00;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$12 ) begin end
    \$21  = \$signal$10 ;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          /* empty */;
      2'h2:
          if (rx_valid) begin
            (* full_case = 32'd1 *)
            if (\$6 ) begin
            end else begin
              casez (position_in_packet)
                4'h0:
                    /* empty */;
                4'h1:
                    \$21  = rx_data;
              endcase
            end
          end
    endcase
    if (usb_rst) begin
      \$21  = 8'h00;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$12 ) begin end
    \$22  = \$signal$11 ;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          /* empty */;
      2'h2:
          if (rx_valid) begin
            (* full_case = 32'd1 *)
            if (\$6 ) begin
            end else begin
              casez (position_in_packet)
                4'h0:
                    /* empty */;
                4'h1:
                    /* empty */;
                4'h2:
                    \$22  = rx_data;
              endcase
            end
          end
    endcase
    if (usb_rst) begin
      \$22  = 8'h00;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$12 ) begin end
    \$23  = \$signal$12 ;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          /* empty */;
      2'h2:
          if (rx_valid) begin
            (* full_case = 32'd1 *)
            if (\$6 ) begin
            end else begin
              casez (position_in_packet)
                4'h0:
                    /* empty */;
                4'h1:
                    /* empty */;
                4'h2:
                    /* empty */;
                4'h3:
                    \$23  = rx_data;
              endcase
            end
          end
    endcase
    if (usb_rst) begin
      \$23  = 8'h00;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$12 ) begin end
    \$24  = \$signal$13 ;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          /* empty */;
      2'h2:
          if (rx_valid) begin
            (* full_case = 32'd1 *)
            if (\$6 ) begin
            end else begin
              casez (position_in_packet)
                4'h0:
                    /* empty */;
                4'h1:
                    /* empty */;
                4'h2:
                    /* empty */;
                4'h3:
                    /* empty */;
                4'h4:
                    \$24  = rx_data;
              endcase
            end
          end
    endcase
    if (usb_rst) begin
      \$24  = 8'h00;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$12 ) begin end
    \$25  = \$signal$14 ;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          /* empty */;
      2'h2:
          if (rx_valid) begin
            (* full_case = 32'd1 *)
            if (\$6 ) begin
            end else begin
              casez (position_in_packet)
                4'h0:
                    /* empty */;
                4'h1:
                    /* empty */;
                4'h2:
                    /* empty */;
                4'h3:
                    /* empty */;
                4'h4:
                    /* empty */;
                4'h5:
                    \$25  = rx_data;
              endcase
            end
          end
    endcase
    if (usb_rst) begin
      \$25  = 8'h00;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$12 ) begin end
    \$26  = \$signal$15 ;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          /* empty */;
      2'h2:
          if (rx_valid) begin
            (* full_case = 32'd1 *)
            if (\$6 ) begin
            end else begin
              casez (position_in_packet)
                4'h0:
                    /* empty */;
                4'h1:
                    /* empty */;
                4'h2:
                    /* empty */;
                4'h3:
                    /* empty */;
                4'h4:
                    /* empty */;
                4'h5:
                    /* empty */;
                4'h6:
                    \$26  = rx_data;
              endcase
            end
          end
    endcase
    if (usb_rst) begin
      \$26  = 8'h00;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$12 ) begin end
    \$27  = \$signal$16 ;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          /* empty */;
      2'h2:
          if (rx_valid) begin
            (* full_case = 32'd1 *)
            if (\$6 ) begin
            end else begin
              casez (position_in_packet)
                4'h0:
                    /* empty */;
                4'h1:
                    /* empty */;
                4'h2:
                    /* empty */;
                4'h3:
                    /* empty */;
                4'h4:
                    /* empty */;
                4'h5:
                    /* empty */;
                4'h6:
                    /* empty */;
                4'h7:
                    \$27  = rx_data;
              endcase
            end
          end
    endcase
    if (usb_rst) begin
      \$27  = 8'h00;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$12 ) begin end
    \$28  = \$signal$17 ;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          /* empty */;
      2'h2:
          if (rx_valid) begin
            (* full_case = 32'd1 *)
            if (\$6 ) begin
            end else begin
              casez (position_in_packet)
                4'h0:
                    /* empty */;
                4'h1:
                    /* empty */;
                4'h2:
                    /* empty */;
                4'h3:
                    /* empty */;
                4'h4:
                    /* empty */;
                4'h5:
                    /* empty */;
                4'h6:
                    /* empty */;
                4'h7:
                    /* empty */;
                4'h8:
                    \$28  = rx_data;
              endcase
            end
          end
    endcase
    if (usb_rst) begin
      \$28  = 8'h00;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$12 ) begin end
    \$29  = \$signal$18 ;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          /* empty */;
      2'h2:
          if (rx_valid) begin
            (* full_case = 32'd1 *)
            if (\$6 ) begin
            end else begin
              casez (position_in_packet)
                4'h0:
                    /* empty */;
                4'h1:
                    /* empty */;
                4'h2:
                    /* empty */;
                4'h3:
                    /* empty */;
                4'h4:
                    /* empty */;
                4'h5:
                    /* empty */;
                4'h6:
                    /* empty */;
                4'h7:
                    /* empty */;
                4'h8:
                    /* empty */;
                4'h9:
                    \$29  = rx_data;
              endcase
            end
          end
    endcase
    if (usb_rst) begin
      \$29  = 8'h00;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$12 ) begin end
    \$30  = last_word;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          /* empty */;
      2'h2:
          if (rx_valid) begin
            (* full_case = 32'd1 *)
            if (\$6 ) begin
            end else begin
              \$30  = { rx_data, last_word[15:8] };
            end
          end
    endcase
    if (usb_rst) begin
      \$30  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$12 ) begin end
    \$31  = last_word_crc;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          /* empty */;
      2'h2:
          if (rx_valid) begin
            (* full_case = 32'd1 *)
            if (\$6 ) begin
            end else begin
              \$31  = last_byte_crc;
            end
          end
    endcase
    if (usb_rst) begin
      \$31  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$12 ) begin end
    \$32  = last_byte_crc;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          /* empty */;
      2'h2:
          if (rx_valid) begin
            (* full_case = 32'd1 *)
            if (\$6 ) begin
            end else begin
              \$32  = crc;
            end
          end
    endcase
    if (usb_rst) begin
      \$32  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$12 ) begin end
    \$33  = packet_id;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          /* empty */;
      2'h2:
          if (\$8 ) begin
            if (\$9 ) begin
              \$33  = active_pid;
            end
          end
    endcase
    if (usb_rst) begin
      \$33  = 4'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$12 ) begin end
    \$34  = length;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          /* empty */;
      2'h2:
          if (\$8 ) begin
            if (\$9 ) begin
              \$34  = \$10 [3:0];
            end
          end
    endcase
    if (usb_rst) begin
      \$34  = 4'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$12 ) begin end
    \$35  = packet_0;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          /* empty */;
      2'h2:
          if (\$8 ) begin
            if (\$9 ) begin
              \$35  = \$signal ;
            end
          end
    endcase
    if (usb_rst) begin
      \$35  = 8'h00;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$12 ) begin end
    \$36  = packet_1;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          /* empty */;
      2'h2:
          if (\$8 ) begin
            if (\$9 ) begin
              \$36  = \$signal$10 ;
            end
          end
    endcase
    if (usb_rst) begin
      \$36  = 8'h00;
    end
  end
endmodule

module \LunaUSBSerialDevice.usb0.usb.USBStreamInEndpoint (usb_rst, is_in, is_out, is_setup, is_ping, \payload$25 , new_frame, new_token, frame, pid, address, endpoint, ready_for_response, \ready$27 , \ack$60 , \nak$62 , \stall$64 , \nyet$66 , clear_endpoint_halt_in, tx_pid_toggle, \first$21 
, nak, \valid$19 , \last$23 , usb_clk);
  wire \$1 ;
  wire \$2 ;
  wire ack;
  wire \ack$53 ;
  input \ack$60 ;
  wire \ack$60 ;
  wire \ack$61 ;
  wire active;
  input [6:0] address;
  wire [6:0] address;
  wire [6:0] \address$34 ;
  input [5:0] clear_endpoint_halt_in;
  wire [5:0] clear_endpoint_halt_in;
  wire \clear_endpoint_halt_in.direction ;
  wire \clear_endpoint_halt_in.enable ;
  wire [3:0] \clear_endpoint_halt_in.number ;
  wire [1:0] data_pid;
  wire discard;
  wire \discard$16 ;
  input [3:0] endpoint;
  wire [3:0] endpoint;
  wire [3:0] \endpoint$35 ;
  wire first;
  output \first$21 ;
  wire \first$21 ;
  wire \first$22 ;
  wire \first$6 ;
  wire flush;
  wire \flush$14 ;
  input [10:0] frame;
  wire [10:0] frame;
  wire [10:0] \frame$41 ;
  wire generate_zlps;
  input is_in;
  wire is_in;
  wire \is_in$45 ;
  input is_out;
  wire is_out;
  wire \is_out$47 ;
  input is_ping;
  wire is_ping;
  wire \is_ping$51 ;
  input is_setup;
  wire is_setup;
  wire \is_setup$49 ;
  wire last;
  output \last$23 ;
  wire \last$23 ;
  wire \last$24 ;
  wire \last$8 ;
  output nak;
  wire nak;
  wire \nak$55 ;
  input \nak$62 ;
  wire \nak$62 ;
  wire \nak$63 ;
  input new_frame;
  wire new_frame;
  wire \new_frame$43 ;
  input new_token;
  wire new_token;
  wire \new_token$37 ;
  wire nyet;
  wire \nyet$59 ;
  input \nyet$66 ;
  wire \nyet$66 ;
  wire \nyet$67 ;
  wire [7:0] payload;
  wire [7:0] \payload$10 ;
  output [7:0] \payload$25 ;
  wire [7:0] \payload$25 ;
  wire [7:0] \payload$26 ;
  input [3:0] pid;
  wire [3:0] pid;
  wire [3:0] \pid$32 ;
  wire ready;
  wire \ready$12 ;
  input \ready$27 ;
  wire \ready$27 ;
  wire \ready$28 ;
  input ready_for_response;
  wire ready_for_response;
  wire \ready_for_response$39 ;
  wire reset_sequence;
  wire stall;
  wire \stall$57 ;
  input \stall$64 ;
  wire \stall$64 ;
  wire \stall$65 ;
  output [1:0] tx_pid_toggle;
  wire [1:0] tx_pid_toggle;
  input usb_clk;
  wire usb_clk;
  input usb_rst;
  wire usb_rst;
  wire valid;
  output \valid$19 ;
  wire \valid$19 ;
  wire \valid$20 ;
  wire \valid$4 ;
  assign active = endpoint == 2'h3;
  assign \$1  = clear_endpoint_halt_in[0] & clear_endpoint_halt_in[1];
  assign \$2  = clear_endpoint_halt_in[5:2] == 2'h3;
  assign reset_sequence = \$1  & \$2 ;
  \LunaUSBSerialDevice.usb0.usb.USBStreamInEndpoint.tx_manager  tx_manager (
    .ack(\ack$60 ),
    .active(active),
    .data_pid(tx_pid_toggle),
    .first(\first$21 ),
    .is_in(is_in),
    .\last$39 (\last$23 ),
    .nak(nak),
    .new_token(new_token),
    .\payload$34 (\payload$25 ),
    .ready(\ready$27 ),
    .\ready$25 (ready),
    .ready_for_response(ready_for_response),
    .reset_sequence(reset_sequence),
    .usb_clk(usb_clk),
    .usb_rst(usb_rst),
    .\valid$38 (\valid$19 )
  );
  assign generate_zlps = 1'h1;
  assign valid = 1'h0;
  assign \valid$4  = 1'h0;
  assign first = 1'h0;
  assign \first$6  = 1'h0;
  assign last = 1'h0;
  assign \last$8  = 1'h0;
  assign payload = 8'h00;
  assign \payload$10  = 8'h00;
  assign \ready$12  = ready;
  assign flush = 1'h0;
  assign \flush$14  = 1'h0;
  assign discard = 1'h0;
  assign \discard$16  = 1'h0;
  assign \valid$20  = \valid$19 ;
  assign \first$22  = \first$21 ;
  assign \last$24  = \last$23 ;
  assign \payload$26  = \payload$25 ;
  assign \ready$28  = \ready$27 ;
  assign data_pid = tx_pid_toggle;
  assign \pid$32  = pid;
  assign \address$34  = address;
  assign \endpoint$35  = endpoint;
  assign \new_token$37  = new_token;
  assign \ready_for_response$39  = ready_for_response;
  assign \frame$41  = frame;
  assign \new_frame$43  = new_frame;
  assign \is_in$45  = is_in;
  assign \is_out$47  = is_out;
  assign \is_setup$49  = is_setup;
  assign \is_ping$51  = is_ping;
  assign ack = 1'h0;
  assign \ack$53  = 1'h0;
  assign \nak$55  = nak;
  assign stall = 1'h0;
  assign \stall$57  = 1'h0;
  assign nyet = 1'h0;
  assign \nyet$59  = 1'h0;
  assign \ack$61  = \ack$60 ;
  assign \nak$63  = \nak$62 ;
  assign \stall$65  = \stall$64 ;
  assign \nyet$67  = \nyet$66 ;
  assign \clear_endpoint_halt_in.enable  = clear_endpoint_halt_in[0];
  assign \clear_endpoint_halt_in.direction  = clear_endpoint_halt_in[1];
  assign \clear_endpoint_halt_in.number  = clear_endpoint_halt_in[5:2];
endmodule

module \LunaUSBSerialDevice.usb0.usb.USBStreamInEndpoint.tx_manager (usb_rst, is_in, active, reset_sequence, \payload$34 , \ready$25 , new_token, ready_for_response, ready, ack, data_pid, first, nak, \valid$38 , \last$39 , usb_clk);
  reg \$auto$verilog_backend.cc:2373:dump_module$13  = 0;
  wire \$1 ;
  wire [7:0] \$10 ;
  wire \$11 ;
  wire \$12 ;
  wire \$13 ;
  reg [6:0] \$14 ;
  wire \$15 ;
  wire \$16 ;
  wire \$17 ;
  wire \$18 ;
  wire \$19 ;
  reg \$2 ;
  wire \$20 ;
  wire \$21 ;
  wire \$22 ;
  wire \$23 ;
  wire \$24 ;
  wire \$25 ;
  wire \$26 ;
  reg [6:0] \$27 ;
  wire \$28 ;
  wire \$29 ;
  wire \$3 ;
  wire [7:0] \$30 ;
  wire \$31 ;
  reg [6:0] \$32 ;
  wire [7:0] \$33 ;
  wire \$34 ;
  wire \$35 ;
  wire \$36 ;
  reg [6:0] \$37 ;
  wire \$38 ;
  wire \$39 ;
  wire \$4 ;
  wire \$40 ;
  reg \$41 ;
  wire \$42 ;
  wire \$43 ;
  reg [6:0] \$44 ;
  wire [7:0] \$45 ;
  wire \$46 ;
  wire \$47 ;
  wire \$48 ;
  reg [6:0] \$49 ;
  reg [6:0] \$5 ;
  wire \$50 ;
  wire \$51 ;
  wire \$52 ;
  wire \$53 ;
  wire \$54 ;
  wire \$55 ;
  wire \$56 ;
  wire \$57 ;
  wire \$58 ;
  wire \$59 ;
  wire [7:0] \$6 ;
  wire \$60 ;
  wire \$61 ;
  reg [6:0] \$62 ;
  reg [6:0] \$63 ;
  wire \$64 ;
  wire \$65 ;
  reg [6:0] \$66 ;
  wire \$67 ;
  reg \$68 ;
  wire \$69 ;
  reg \$7 ;
  wire \$70 ;
  wire \$71 ;
  wire \$72 ;
  wire \$73 ;
  wire \$74 ;
  wire \$75 ;
  reg [6:0] \$76 ;
  wire \$77 ;
  wire \$78 ;
  reg [6:0] \$79 ;
  wire \$8 ;
  wire [7:0] \$80 ;
  wire \$81 ;
  wire [7:0] \$82 ;
  wire \$83 ;
  wire \$84 ;
  wire \$85 ;
  wire \$86 ;
  wire \$87 ;
  reg [1:0] \$88 ;
  reg [6:0] \$89 ;
  reg [6:0] \$9 ;
  reg [6:0] \$90 ;
  reg \$91 ;
  reg \$92 ;
  reg [1:0] \$93 ;
  reg \$94 ;
  reg [6:0] \$95 ;
  reg \$96 ;
  reg [6:0] \$signal  = 7'h00;
  reg [6:0] \$signal$10  = 7'h00;
  wire [5:0] \$signature__addr ;
  wire [5:0] \$signature__addr$31 ;
  reg [5:0] \$signature__addr$32 ;
  reg [5:0] \$signature__addr$33 ;
  wire [7:0] \$signature__data ;
  wire [7:0] \$signature__data$30 ;
  wire [7:0] \$signature__data$35 ;
  wire [7:0] \$signature__data$36 ;
  reg \$signature__en ;
  reg \$signature__en$8 ;
  input ack;
  wire ack;
  input active;
  wire active;
  reg buffer_toggle = 1'h0;
  output [1:0] data_pid;
  reg [1:0] data_pid = 2'h1;
  wire discard;
  output first;
  reg first = 1'h0;
  wire flush;
  (* enum_base_type = "fsmState" *)
  (* enum_value_00 = "WAIT_FOR_DATA/0" *)
  (* enum_value_01 = "WAIT_TO_SEND/1" *)
  (* enum_value_10 = "SEND_PACKET/2" *)
  (* enum_value_11 = "WAIT_FOR_ACK/3" *)
  reg [1:0] fsm_state = 2'h0;
  wire generate_zlps;
  input is_in;
  wire is_in;
  wire last;
  output \last$39 ;
  reg \last$39 ;
  output nak;
  reg nak;
  input new_token;
  wire new_token;
  wire [7:0] payload;
  output [7:0] \payload$34 ;
  reg [7:0] \payload$34 ;
  input ready;
  wire ready;
  output \ready$25 ;
  wire \ready$25 ;
  input ready_for_response;
  wire ready_for_response;
  input reset_sequence;
  wire reset_sequence;
  reg [6:0] send_position = 7'h00;
  wire start_with_data1;
  reg stream_ended_in_buffer0 = 1'h0;
  reg stream_ended_in_buffer1 = 1'h0;
  input usb_clk;
  wire usb_clk;
  input usb_rst;
  wire usb_rst;
  wire valid;
  output \valid$38 ;
  reg \valid$38 ;
  reg [7:0] transmit_buffer_0 [63:0];
  initial begin
    transmit_buffer_0[0] = 8'h00;
    transmit_buffer_0[1] = 8'h00;
    transmit_buffer_0[2] = 8'h00;
    transmit_buffer_0[3] = 8'h00;
    transmit_buffer_0[4] = 8'h00;
    transmit_buffer_0[5] = 8'h00;
    transmit_buffer_0[6] = 8'h00;
    transmit_buffer_0[7] = 8'h00;
    transmit_buffer_0[8] = 8'h00;
    transmit_buffer_0[9] = 8'h00;
    transmit_buffer_0[10] = 8'h00;
    transmit_buffer_0[11] = 8'h00;
    transmit_buffer_0[12] = 8'h00;
    transmit_buffer_0[13] = 8'h00;
    transmit_buffer_0[14] = 8'h00;
    transmit_buffer_0[15] = 8'h00;
    transmit_buffer_0[16] = 8'h00;
    transmit_buffer_0[17] = 8'h00;
    transmit_buffer_0[18] = 8'h00;
    transmit_buffer_0[19] = 8'h00;
    transmit_buffer_0[20] = 8'h00;
    transmit_buffer_0[21] = 8'h00;
    transmit_buffer_0[22] = 8'h00;
    transmit_buffer_0[23] = 8'h00;
    transmit_buffer_0[24] = 8'h00;
    transmit_buffer_0[25] = 8'h00;
    transmit_buffer_0[26] = 8'h00;
    transmit_buffer_0[27] = 8'h00;
    transmit_buffer_0[28] = 8'h00;
    transmit_buffer_0[29] = 8'h00;
    transmit_buffer_0[30] = 8'h00;
    transmit_buffer_0[31] = 8'h00;
    transmit_buffer_0[32] = 8'h00;
    transmit_buffer_0[33] = 8'h00;
    transmit_buffer_0[34] = 8'h00;
    transmit_buffer_0[35] = 8'h00;
    transmit_buffer_0[36] = 8'h00;
    transmit_buffer_0[37] = 8'h00;
    transmit_buffer_0[38] = 8'h00;
    transmit_buffer_0[39] = 8'h00;
    transmit_buffer_0[40] = 8'h00;
    transmit_buffer_0[41] = 8'h00;
    transmit_buffer_0[42] = 8'h00;
    transmit_buffer_0[43] = 8'h00;
    transmit_buffer_0[44] = 8'h00;
    transmit_buffer_0[45] = 8'h00;
    transmit_buffer_0[46] = 8'h00;
    transmit_buffer_0[47] = 8'h00;
    transmit_buffer_0[48] = 8'h00;
    transmit_buffer_0[49] = 8'h00;
    transmit_buffer_0[50] = 8'h00;
    transmit_buffer_0[51] = 8'h00;
    transmit_buffer_0[52] = 8'h00;
    transmit_buffer_0[53] = 8'h00;
    transmit_buffer_0[54] = 8'h00;
    transmit_buffer_0[55] = 8'h00;
    transmit_buffer_0[56] = 8'h00;
    transmit_buffer_0[57] = 8'h00;
    transmit_buffer_0[58] = 8'h00;
    transmit_buffer_0[59] = 8'h00;
    transmit_buffer_0[60] = 8'h00;
    transmit_buffer_0[61] = 8'h00;
    transmit_buffer_0[62] = 8'h00;
    transmit_buffer_0[63] = 8'h00;
  end
  always @(posedge usb_clk) begin
    if (\$signature__en )
      transmit_buffer_0[\$62 [5:0]] <= 8'h00;
  end
  reg [7:0] _0_;
  always @(posedge usb_clk) begin
    _0_ <= transmit_buffer_0[\$signature__addr$32 ];
  end
  assign \$signature__data$35  = _0_;
  reg [7:0] transmit_buffer_1 [63:0];
  initial begin
    transmit_buffer_1[0] = 8'h00;
    transmit_buffer_1[1] = 8'h00;
    transmit_buffer_1[2] = 8'h00;
    transmit_buffer_1[3] = 8'h00;
    transmit_buffer_1[4] = 8'h00;
    transmit_buffer_1[5] = 8'h00;
    transmit_buffer_1[6] = 8'h00;
    transmit_buffer_1[7] = 8'h00;
    transmit_buffer_1[8] = 8'h00;
    transmit_buffer_1[9] = 8'h00;
    transmit_buffer_1[10] = 8'h00;
    transmit_buffer_1[11] = 8'h00;
    transmit_buffer_1[12] = 8'h00;
    transmit_buffer_1[13] = 8'h00;
    transmit_buffer_1[14] = 8'h00;
    transmit_buffer_1[15] = 8'h00;
    transmit_buffer_1[16] = 8'h00;
    transmit_buffer_1[17] = 8'h00;
    transmit_buffer_1[18] = 8'h00;
    transmit_buffer_1[19] = 8'h00;
    transmit_buffer_1[20] = 8'h00;
    transmit_buffer_1[21] = 8'h00;
    transmit_buffer_1[22] = 8'h00;
    transmit_buffer_1[23] = 8'h00;
    transmit_buffer_1[24] = 8'h00;
    transmit_buffer_1[25] = 8'h00;
    transmit_buffer_1[26] = 8'h00;
    transmit_buffer_1[27] = 8'h00;
    transmit_buffer_1[28] = 8'h00;
    transmit_buffer_1[29] = 8'h00;
    transmit_buffer_1[30] = 8'h00;
    transmit_buffer_1[31] = 8'h00;
    transmit_buffer_1[32] = 8'h00;
    transmit_buffer_1[33] = 8'h00;
    transmit_buffer_1[34] = 8'h00;
    transmit_buffer_1[35] = 8'h00;
    transmit_buffer_1[36] = 8'h00;
    transmit_buffer_1[37] = 8'h00;
    transmit_buffer_1[38] = 8'h00;
    transmit_buffer_1[39] = 8'h00;
    transmit_buffer_1[40] = 8'h00;
    transmit_buffer_1[41] = 8'h00;
    transmit_buffer_1[42] = 8'h00;
    transmit_buffer_1[43] = 8'h00;
    transmit_buffer_1[44] = 8'h00;
    transmit_buffer_1[45] = 8'h00;
    transmit_buffer_1[46] = 8'h00;
    transmit_buffer_1[47] = 8'h00;
    transmit_buffer_1[48] = 8'h00;
    transmit_buffer_1[49] = 8'h00;
    transmit_buffer_1[50] = 8'h00;
    transmit_buffer_1[51] = 8'h00;
    transmit_buffer_1[52] = 8'h00;
    transmit_buffer_1[53] = 8'h00;
    transmit_buffer_1[54] = 8'h00;
    transmit_buffer_1[55] = 8'h00;
    transmit_buffer_1[56] = 8'h00;
    transmit_buffer_1[57] = 8'h00;
    transmit_buffer_1[58] = 8'h00;
    transmit_buffer_1[59] = 8'h00;
    transmit_buffer_1[60] = 8'h00;
    transmit_buffer_1[61] = 8'h00;
    transmit_buffer_1[62] = 8'h00;
    transmit_buffer_1[63] = 8'h00;
  end
  always @(posedge usb_clk) begin
    if (\$signature__en$8 )
      transmit_buffer_1[\$63 [5:0]] <= 8'h00;
  end
  reg [7:0] _1_;
  always @(posedge usb_clk) begin
    _1_ <= transmit_buffer_1[\$signature__addr$33 ];
  end
  assign \$signature__data$36  = _1_;
  assign \$4  = ~ buffer_toggle;
  assign \$6  = \$5  + 1'h1;
  assign \$10  = \$9  + 1'h1;
  assign \$11  = \$10  == 7'h40;
  assign \$15  = | \$14 ;
  assign \$20  = ~ buffer_toggle;
  assign \$21  = ~ data_pid[0];
  assign \$22  = ~ buffer_toggle;
  assign \$23  = active & is_in;
  assign \$24  = \$23  & ready_for_response;
  assign \$25  = ~ data_pid[0];
  assign \$26  = ~ buffer_toggle;
  assign \$28  = | \$27 ;
  assign \$29  = ~ buffer_toggle;
  assign \$30  = send_position + 1'h1;
  assign \$31  = ~ buffer_toggle;
  assign \$33  = send_position + 1'h1;
  assign \$34  = \$32  == \$33 ;
  assign \$35  = ~ buffer_toggle;
  assign \$36  = ~ buffer_toggle;
  assign \$38  = \$37  == 7'h40;
  assign \$40  = ~ buffer_toggle;
  assign \$42  = \$39  & \$41 ;
  assign \$43  = ~ \ready$25 ;
  assign \$45  = \$44  + 1'h1;
  assign \$46  = \$45  == 7'h40;
  assign \$50  = | \$49 ;
  assign \$56  = ~ data_pid[0];
  assign \$57  = ~ buffer_toggle;
  assign \$58  = ~ data_pid[0];
  assign \$59  = ~ buffer_toggle;
  assign \$64  = ~ buffer_toggle;
  assign \$65  = ~ buffer_toggle;
  assign \$67  = \$66  != 7'h40;
  assign \$69  = ~ \$68 ;
  assign \ready$25  = \$67  & \$69 ;
  assign \$71  = active & is_in;
  assign \$72  = \$71  & ready_for_response;
  assign \$73  = active & is_in;
  assign \$74  = \$73  & ready_for_response;
  assign \$75  = ~ buffer_toggle;
  assign \$77  = | \$76 ;
  assign \$78  = ~ buffer_toggle;
  assign \$80  = send_position + 1'h1;
  assign \$81  = \$79  == \$80 ;
  assign \$82  = send_position + 1'h1;
  assign \$83  = ~ buffer_toggle;
  assign \$84  = ! fsm_state;
  assign \$85  = fsm_state == 1'h1;
  assign \$86  = fsm_state == 2'h2;
  assign \$87  = fsm_state == 2'h3;
  always @(posedge usb_clk)
    data_pid <= \$88 ;
  always @(posedge usb_clk)
    \$signal  <= \$89 ;
  always @(posedge usb_clk)
    \$signal$10  <= \$90 ;
  always @(posedge usb_clk)
    stream_ended_in_buffer0 <= \$91 ;
  always @(posedge usb_clk)
    stream_ended_in_buffer1 <= \$92 ;
  always @(posedge usb_clk)
    fsm_state <= \$93 ;
  always @(posedge usb_clk)
    buffer_toggle <= \$94 ;
  always @(posedge usb_clk)
    send_position <= \$95 ;
  always @(posedge usb_clk)
    first <= \$96 ;
  assign \$3  = ~ buffer_toggle;
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$13 ) begin end
    (* full_case = 32'd1 *)
    casez (buffer_toggle)
      1'h0:
          \$5  = \$signal ;
      1'h1:
          \$5  = \$signal$10 ;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$13 ) begin end
    (* full_case = 32'd1 *)
    casez (buffer_toggle)
      1'h0:
          \$7  = \$signature__en ;
      1'h1:
          \$7  = \$signature__en$8 ;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$13 ) begin end
    (* full_case = 32'd1 *)
    casez (buffer_toggle)
      1'h0:
          \$9  = \$signal ;
      1'h1:
          \$9  = \$signal$10 ;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$13 ) begin end
    (* full_case = 32'd1 *)
    casez (buffer_toggle)
      1'h0:
          \$14  = \$signal ;
      1'h1:
          \$14  = \$signal$10 ;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$13 ) begin end
    (* full_case = 32'd1 *)
    casez (\$26 )
      1'h0:
          \$27  = \$signal ;
      1'h1:
          \$27  = \$signal$10 ;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$13 ) begin end
    (* full_case = 32'd1 *)
    casez (\$31 )
      1'h0:
          \$32  = \$signal ;
      1'h1:
          \$32  = \$signal$10 ;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$13 ) begin end
    (* full_case = 32'd1 *)
    casez (\$36 )
      1'h0:
          \$37  = \$signal ;
      1'h1:
          \$37  = \$signal$10 ;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$13 ) begin end
    (* full_case = 32'd1 *)
    casez (\$40 )
      1'h0:
          \$41  = stream_ended_in_buffer0;
      1'h1:
          \$41  = stream_ended_in_buffer1;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$13 ) begin end
    (* full_case = 32'd1 *)
    casez (buffer_toggle)
      1'h0:
          \$44  = \$signal ;
      1'h1:
          \$44  = \$signal$10 ;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$13 ) begin end
    (* full_case = 32'd1 *)
    casez (buffer_toggle)
      1'h0:
          \$49  = \$signal ;
      1'h1:
          \$49  = \$signal$10 ;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$13 ) begin end
    (* full_case = 32'd1 *)
    casez (buffer_toggle)
      1'h0:
          \$62  = \$signal ;
      1'h1:
          \$62  = \$signal$10 ;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$13 ) begin end
    (* full_case = 32'd1 *)
    casez (buffer_toggle)
      1'h0:
          \$63  = \$signal ;
      1'h1:
          \$63  = \$signal$10 ;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$13 ) begin end
    (* full_case = 32'd1 *)
    casez (\$65 )
      1'h0:
          \payload$34  = \$signature__data$35 ;
      1'h1:
          \payload$34  = \$signature__data$36 ;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$13 ) begin end
    (* full_case = 32'd1 *)
    casez (buffer_toggle)
      1'h0:
          \$66  = \$signal ;
      1'h1:
          \$66  = \$signal$10 ;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$13 ) begin end
    (* full_case = 32'd1 *)
    casez (buffer_toggle)
      1'h0:
          \$68  = stream_ended_in_buffer0;
      1'h1:
          \$68  = stream_ended_in_buffer1;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$13 ) begin end
    (* full_case = 32'd1 *)
    casez (\$75 )
      1'h0:
          \$76  = \$signal ;
      1'h1:
          \$76  = \$signal$10 ;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$13 ) begin end
    (* full_case = 32'd1 *)
    casez (\$78 )
      1'h0:
          \$79  = \$signal ;
      1'h1:
          \$79  = \$signal$10 ;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$13 ) begin end
    \$88  = data_pid;
    if (reset_sequence) begin
      \$88  = { 1'h0, \$1  };
    end
    (* full_case = 32'd1 *)
    casez (fsm_state)
      2'h0:
          if (\$19 ) begin
            \$88 [0] = \$21 ;
          end
      2'h1:
          casez ({ \$24 , reset_sequence, 1'h0 })
            3'b?1?:
                \$88  = 2'h0;
          endcase
      2'h2:
          /* empty */;
      2'h3:
          casez ({ ack, 1'h0 })
            2'b1?:
                if (\$42 ) begin
                  \$88 [0] = \$56 ;
                end else if (\$55 ) begin
                  \$88 [0] = \$58 ;
                end
          endcase
    endcase
    if (usb_rst) begin
      \$88  = 2'h1;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$13 ) begin end
    \$89  = \$signal ;
    casez ({ \$2 , 1'h0 })
      2'b1?:
          casez (buffer_toggle)
            1'h0:
                \$89  = \$6 [6:0];
          endcase
    endcase
    (* full_case = 32'd1 *)
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          /* empty */;
      2'h2:
          /* empty */;
      2'h3:
          casez ({ ack, 1'h0 })
            2'b1?:
                casez (\$35 )
                  1'h0:
                      \$89  = 7'h00;
                endcase
          endcase
    endcase
    if (usb_rst) begin
      \$89  = 7'h00;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$13 ) begin end
    \$90  = \$signal$10 ;
    casez ({ \$2 , 1'h0 })
      2'b1?:
          (* full_case = 32'd1 *)
          casez (buffer_toggle)
            1'h0:
                /* empty */;
            1'h1:
                \$90  = \$6 [6:0];
          endcase
    endcase
    (* full_case = 32'd1 *)
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          /* empty */;
      2'h2:
          /* empty */;
      2'h3:
          casez ({ ack, 1'h0 })
            2'b1?:
                (* full_case = 32'd1 *)
                casez (\$35 )
                  1'h0:
                      /* empty */;
                  1'h1:
                      \$90  = 7'h00;
                endcase
          endcase
    endcase
    if (usb_rst) begin
      \$90  = 7'h00;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$13 ) begin end
    \$91  = stream_ended_in_buffer0;
    if (\$8 ) begin
      casez (buffer_toggle)
        1'h0:
            \$91  = 1'h1;
      endcase
    end
    (* full_case = 32'd1 *)
    casez (fsm_state)
      2'h0:
          if (\$19 ) begin
            casez (\$22 )
              1'h0:
                  \$91  = 1'h0;
            endcase
          end
      2'h1:
          casez ({ \$24 , reset_sequence, 1'h0 })
            3'b?1?:
                /* empty */;
            3'b1??:
                (* full_case = 32'd1 *)
                if (\$28 ) begin
                end else begin
                  casez (\$29 )
                    1'h0:
                        \$91  = 1'h0;
                  endcase
                end
          endcase
      2'h2:
          /* empty */;
      2'h3:
          casez ({ ack, 1'h0 })
            2'b1?:
                if (\$42 ) begin
                end else if (\$55 ) begin
                  casez (\$59 )
                    1'h0:
                        \$91  = 1'h0;
                  endcase
                end
          endcase
    endcase
    if (usb_rst) begin
      \$91  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$13 ) begin end
    \$92  = stream_ended_in_buffer1;
    if (\$8 ) begin
      (* full_case = 32'd1 *)
      casez (buffer_toggle)
        1'h0:
            /* empty */;
        1'h1:
            \$92  = 1'h1;
      endcase
    end
    (* full_case = 32'd1 *)
    casez (fsm_state)
      2'h0:
          if (\$19 ) begin
            (* full_case = 32'd1 *)
            casez (\$22 )
              1'h0:
                  /* empty */;
              1'h1:
                  \$92  = 1'h0;
            endcase
          end
      2'h1:
          casez ({ \$24 , reset_sequence, 1'h0 })
            3'b?1?:
                /* empty */;
            3'b1??:
                (* full_case = 32'd1 *)
                if (\$28 ) begin
                end else begin
                  (* full_case = 32'd1 *)
                  casez (\$29 )
                    1'h0:
                        /* empty */;
                    1'h1:
                        \$92  = 1'h0;
                  endcase
                end
          endcase
      2'h2:
          /* empty */;
      2'h3:
          casez ({ ack, 1'h0 })
            2'b1?:
                if (\$42 ) begin
                end else if (\$55 ) begin
                  (* full_case = 32'd1 *)
                  casez (\$59 )
                    1'h0:
                        /* empty */;
                    1'h1:
                        \$92  = 1'h0;
                  endcase
                end
          endcase
    endcase
    if (usb_rst) begin
      \$92  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$13 ) begin end
    \$93  = fsm_state;
    (* full_case = 32'd1 *)
    casez (fsm_state)
      2'h0:
          if (\$19 ) begin
            \$93  = 2'h1;
          end
      2'h1:
          casez ({ \$24 , reset_sequence, 1'h0 })
            3'b?1?:
                /* empty */;
            3'b1??:
                (* full_case = 32'd1 *)
                if (\$28 ) begin
                  \$93  = 2'h2;
                end else begin
                  \$93  = 2'h3;
                end
          endcase
      2'h2:
          if (ready) begin
            if (\$34 ) begin
              \$93  = 2'h3;
            end
          end
      2'h3:
        begin
          casez ({ ack, 1'h0 })
            2'b1?:
                (* full_case = 32'd1 *)
                if (\$42 ) begin
                  \$93  = 2'h1;
                end else if (\$55 ) begin
                  \$93  = 2'h1;
                end else begin
                  \$93  = 2'h0;
                end
          endcase
          if (\$61 ) begin
            \$93  = 2'h1;
          end
        end
    endcase
    if (usb_rst) begin
      \$93  = 2'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$13 ) begin end
    \$94  = buffer_toggle;
    (* full_case = 32'd1 *)
    casez (fsm_state)
      2'h0:
          if (\$19 ) begin
            \$94  = \$20 ;
          end
      2'h1:
          /* empty */;
      2'h2:
          /* empty */;
      2'h3:
          casez ({ ack, 1'h0 })
            2'b1?:
                if (\$42 ) begin
                end else if (\$55 ) begin
                  \$94  = \$57 ;
                end
          endcase
    endcase
    if (usb_rst) begin
      \$94  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$13 ) begin end
    \$95  = send_position;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          \$95  = 7'h00;
      2'h2:
          if (ready) begin
            \$95  = \$30 [6:0];
          end
    endcase
    if (usb_rst) begin
      \$95  = 7'h00;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$13 ) begin end
    \$96  = first;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          casez ({ \$24 , reset_sequence, 1'h0 })
            3'b?1?:
                /* empty */;
            3'b1??:
                if (\$28 ) begin
                  \$96  = 1'h1;
                end
          endcase
      2'h2:
          if (ready) begin
            \$96  = 1'h0;
          end
    endcase
    if (usb_rst) begin
      \$96  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$13 ) begin end
    \$signature__addr$32  = 6'h00;
    casez (\$64 )
      1'h0:
          \$signature__addr$32  = send_position[5:0];
    endcase
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          /* empty */;
      2'h2:
          if (ready) begin
            casez (\$83 )
              1'h0:
                  \$signature__addr$32  = \$82 [5:0];
            endcase
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$13 ) begin end
    \$signature__addr$33  = 6'h00;
    (* full_case = 32'd1 *)
    casez (\$64 )
      1'h0:
          /* empty */;
      1'h1:
          \$signature__addr$33  = send_position[5:0];
    endcase
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          /* empty */;
      2'h2:
          if (ready) begin
            (* full_case = 32'd1 *)
            casez (\$83 )
              1'h0:
                  /* empty */;
              1'h1:
                  \$signature__addr$33  = \$82 [5:0];
            endcase
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$13 ) begin end
    \$signature__en  = 1'h0;
    casez (buffer_toggle)
      1'h0:
          \$signature__en  = \$70 ;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$13 ) begin end
    \$signature__en$8  = 1'h0;
    (* full_case = 32'd1 *)
    casez (buffer_toggle)
      1'h0:
          /* empty */;
      1'h1:
          \$signature__en$8  = \$70 ;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$13 ) begin end
    nak = 1'h0;
    casez (fsm_state)
      2'h0:
          nak = \$72 ;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$13 ) begin end
    \valid$38  = 1'h0;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          casez ({ \$74 , reset_sequence, 1'h0 })
            3'b?1?:
                /* empty */;
            3'b1??:
                (* full_case = 32'd1 *)
                if (\$77 ) begin
                end else begin
                  \valid$38  = 1'h1;
                end
          endcase
      2'h2:
          \valid$38  = 1'h1;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$13 ) begin end
    \last$39  = 1'h0;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          casez ({ \$74 , reset_sequence, 1'h0 })
            3'b?1?:
                /* empty */;
            3'b1??:
                (* full_case = 32'd1 *)
                if (\$77 ) begin
                end else begin
                  \last$39  = 1'h1;
                end
          endcase
      2'h2:
          \last$39  = \$81 ;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$13 ) begin end
    (* full_case = 32'd1 *)
    casez (buffer_toggle)
      1'h0:
          \$2  = \$signature__en ;
      1'h1:
          \$2  = \$signature__en$8 ;
    endcase
  end
  assign start_with_data1 = 1'h0;
  assign discard = 1'h0;
  assign last = 1'h0;
  assign valid = 1'h0;
  assign flush = 1'h0;
  assign generate_zlps = 1'h1;
  assign \$signature__data  = 8'h00;
  assign payload = 8'h00;
  assign \$signature__addr  = \$62 [5:0];
  assign \$signature__data$30  = 8'h00;
  assign \$signature__addr$31  = \$63 [5:0];
  assign \$1  = 1'h1;
  assign \$8  = 1'h0;
  assign \$12  = \$11 ;
  assign \$13  = 1'h0;
  assign \$16  = 1'h0;
  assign \$17  = 1'h0;
  assign \$18  = 1'h1;
  assign \$19  = 1'h0;
  assign \$39  = \$38 ;
  assign \$47  = \$46 ;
  assign \$48  = 1'h0;
  assign \$51  = 1'h0;
  assign \$52  = 1'h0;
  assign \$53  = 1'h1;
  assign \$54  = 1'h0;
  assign \$55  = \$43 ;
  assign \$60  = 1'h1;
  assign \$61  = new_token;
  assign \$70  = 1'h0;
endmodule

module \LunaUSBSerialDevice.usb0.usb.USBStreamInEndpoint_281473594507584 (first, last, payload, usb_clk, usb_rst, is_in, is_out, is_setup, is_ping, \payload$25 , ready, new_frame, new_token, frame, pid, address, endpoint, ready_for_response, \ready$27 , \ack$60 , \nak$62 
, \stall$64 , \nyet$66 , clear_endpoint_halt_in, tx_pid_toggle, \first$21 , nak, \valid$19 , \last$23 , valid);
  wire \$1 ;
  wire \$2 ;
  wire ack;
  wire \ack$53 ;
  input \ack$60 ;
  wire \ack$60 ;
  wire \ack$61 ;
  wire active;
  input [6:0] address;
  wire [6:0] address;
  wire [6:0] \address$34 ;
  input [5:0] clear_endpoint_halt_in;
  wire [5:0] clear_endpoint_halt_in;
  wire \clear_endpoint_halt_in.direction ;
  wire \clear_endpoint_halt_in.enable ;
  wire [3:0] \clear_endpoint_halt_in.number ;
  wire [1:0] data_pid;
  wire discard;
  wire \discard$16 ;
  input [3:0] endpoint;
  wire [3:0] endpoint;
  wire [3:0] \endpoint$35 ;
  input first;
  wire first;
  output \first$21 ;
  wire \first$21 ;
  wire \first$22 ;
  wire \first$6 ;
  wire flush;
  wire \flush$14 ;
  input [10:0] frame;
  wire [10:0] frame;
  wire [10:0] \frame$41 ;
  wire generate_zlps;
  input is_in;
  wire is_in;
  wire \is_in$45 ;
  input is_out;
  wire is_out;
  wire \is_out$47 ;
  input is_ping;
  wire is_ping;
  wire \is_ping$51 ;
  input is_setup;
  wire is_setup;
  wire \is_setup$49 ;
  input last;
  wire last;
  output \last$23 ;
  wire \last$23 ;
  wire \last$24 ;
  wire \last$8 ;
  output nak;
  wire nak;
  wire \nak$55 ;
  input \nak$62 ;
  wire \nak$62 ;
  wire \nak$63 ;
  input new_frame;
  wire new_frame;
  wire \new_frame$43 ;
  input new_token;
  wire new_token;
  wire \new_token$37 ;
  wire nyet;
  wire \nyet$59 ;
  input \nyet$66 ;
  wire \nyet$66 ;
  wire \nyet$67 ;
  input [7:0] payload;
  wire [7:0] payload;
  wire [7:0] \payload$10 ;
  output [7:0] \payload$25 ;
  wire [7:0] \payload$25 ;
  wire [7:0] \payload$26 ;
  input [3:0] pid;
  wire [3:0] pid;
  wire [3:0] \pid$32 ;
  output ready;
  wire ready;
  wire \ready$12 ;
  input \ready$27 ;
  wire \ready$27 ;
  wire \ready$28 ;
  input ready_for_response;
  wire ready_for_response;
  wire \ready_for_response$39 ;
  wire reset_sequence;
  wire stall;
  wire \stall$57 ;
  input \stall$64 ;
  wire \stall$64 ;
  wire \stall$65 ;
  output [1:0] tx_pid_toggle;
  wire [1:0] tx_pid_toggle;
  input usb_clk;
  wire usb_clk;
  input usb_rst;
  wire usb_rst;
  input valid;
  wire valid;
  output \valid$19 ;
  wire \valid$19 ;
  wire \valid$20 ;
  wire \valid$4 ;
  assign active = endpoint == 3'h4;
  assign \$1  = clear_endpoint_halt_in[0] & clear_endpoint_halt_in[1];
  assign \$2  = clear_endpoint_halt_in[5:2] == 3'h4;
  assign reset_sequence = \$1  & \$2 ;
  \LunaUSBSerialDevice.usb0.usb.USBStreamInEndpoint_281473594507584.tx_manager  tx_manager (
    .ack(\ack$60 ),
    .active(active),
    .data_pid(tx_pid_toggle),
    .first(\first$21 ),
    .is_in(is_in),
    .last(last),
    .\last$39 (\last$23 ),
    .nak(nak),
    .new_token(new_token),
    .payload(payload),
    .\payload$34 (\payload$25 ),
    .ready(\ready$27 ),
    .\ready$25 (ready),
    .ready_for_response(ready_for_response),
    .reset_sequence(reset_sequence),
    .usb_clk(usb_clk),
    .usb_rst(usb_rst),
    .valid(valid),
    .\valid$38 (\valid$19 )
  );
  assign generate_zlps = 1'h1;
  assign \valid$4  = valid;
  assign \first$6  = first;
  assign \last$8  = last;
  assign \payload$10  = payload;
  assign \ready$12  = ready;
  assign flush = 1'h0;
  assign \flush$14  = 1'h0;
  assign discard = 1'h0;
  assign \discard$16  = 1'h0;
  assign \valid$20  = \valid$19 ;
  assign \first$22  = \first$21 ;
  assign \last$24  = \last$23 ;
  assign \payload$26  = \payload$25 ;
  assign \ready$28  = \ready$27 ;
  assign data_pid = tx_pid_toggle;
  assign \pid$32  = pid;
  assign \address$34  = address;
  assign \endpoint$35  = endpoint;
  assign \new_token$37  = new_token;
  assign \ready_for_response$39  = ready_for_response;
  assign \frame$41  = frame;
  assign \new_frame$43  = new_frame;
  assign \is_in$45  = is_in;
  assign \is_out$47  = is_out;
  assign \is_setup$49  = is_setup;
  assign \is_ping$51  = is_ping;
  assign ack = 1'h0;
  assign \ack$53  = 1'h0;
  assign \nak$55  = nak;
  assign stall = 1'h0;
  assign \stall$57  = 1'h0;
  assign nyet = 1'h0;
  assign \nyet$59  = 1'h0;
  assign \ack$61  = \ack$60 ;
  assign \nak$63  = \nak$62 ;
  assign \stall$65  = \stall$64 ;
  assign \nyet$67  = \nyet$66 ;
  assign \clear_endpoint_halt_in.enable  = clear_endpoint_halt_in[0];
  assign \clear_endpoint_halt_in.direction  = clear_endpoint_halt_in[1];
  assign \clear_endpoint_halt_in.number  = clear_endpoint_halt_in[5:2];
endmodule

module \LunaUSBSerialDevice.usb0.usb.USBStreamInEndpoint_281473594507584.tx_manager (last, payload, usb_clk, usb_rst, is_in, active, reset_sequence, \payload$34 , \ready$25 , new_token, ready_for_response, ready, ack, data_pid, first, nak, \valid$38 , \last$39 , valid);
  reg \$auto$verilog_backend.cc:2373:dump_module$14  = 0;
  wire \$1 ;
  wire [7:0] \$10 ;
  wire \$11 ;
  wire \$12 ;
  wire \$13 ;
  reg [6:0] \$14 ;
  wire \$15 ;
  wire \$16 ;
  wire \$17 ;
  wire \$18 ;
  wire \$19 ;
  reg \$2 ;
  wire \$20 ;
  wire \$21 ;
  wire \$22 ;
  wire \$23 ;
  wire \$24 ;
  wire \$25 ;
  wire \$26 ;
  reg [6:0] \$27 ;
  wire \$28 ;
  wire \$29 ;
  wire \$3 ;
  wire [7:0] \$30 ;
  wire \$31 ;
  reg [6:0] \$32 ;
  wire [7:0] \$33 ;
  wire \$34 ;
  wire \$35 ;
  wire \$36 ;
  reg [6:0] \$37 ;
  wire \$38 ;
  wire \$39 ;
  wire \$4 ;
  wire \$40 ;
  reg \$41 ;
  wire \$42 ;
  wire \$43 ;
  reg [6:0] \$44 ;
  wire [7:0] \$45 ;
  wire \$46 ;
  wire \$47 ;
  wire \$48 ;
  reg [6:0] \$49 ;
  reg [6:0] \$5 ;
  wire \$50 ;
  wire \$51 ;
  wire \$52 ;
  wire \$53 ;
  wire \$54 ;
  wire \$55 ;
  wire \$56 ;
  wire \$57 ;
  wire \$58 ;
  wire \$59 ;
  wire [7:0] \$6 ;
  wire \$60 ;
  wire \$61 ;
  reg [6:0] \$62 ;
  reg [6:0] \$63 ;
  wire \$64 ;
  wire \$65 ;
  reg [6:0] \$66 ;
  wire \$67 ;
  reg \$68 ;
  wire \$69 ;
  reg \$7 ;
  wire \$70 ;
  wire \$71 ;
  wire \$72 ;
  wire \$73 ;
  wire \$74 ;
  wire \$75 ;
  reg [6:0] \$76 ;
  wire \$77 ;
  wire \$78 ;
  reg [6:0] \$79 ;
  wire \$8 ;
  wire [7:0] \$80 ;
  wire \$81 ;
  wire [7:0] \$82 ;
  wire \$83 ;
  wire \$84 ;
  wire \$85 ;
  wire \$86 ;
  wire \$87 ;
  reg [1:0] \$88 ;
  reg [6:0] \$89 ;
  reg [6:0] \$9 ;
  reg [6:0] \$90 ;
  reg \$91 ;
  reg \$92 ;
  reg [1:0] \$93 ;
  reg \$94 ;
  reg [6:0] \$95 ;
  reg \$96 ;
  reg [6:0] \$signal  = 7'h00;
  reg [6:0] \$signal$10  = 7'h00;
  wire [5:0] \$signature__addr ;
  wire [5:0] \$signature__addr$31 ;
  reg [5:0] \$signature__addr$32 ;
  reg [5:0] \$signature__addr$33 ;
  wire [7:0] \$signature__data ;
  wire [7:0] \$signature__data$30 ;
  wire [7:0] \$signature__data$35 ;
  wire [7:0] \$signature__data$36 ;
  reg \$signature__en ;
  reg \$signature__en$8 ;
  input ack;
  wire ack;
  input active;
  wire active;
  reg buffer_toggle = 1'h0;
  output [1:0] data_pid;
  reg [1:0] data_pid = 2'h1;
  wire discard;
  output first;
  reg first = 1'h0;
  wire flush;
  (* enum_base_type = "fsmState" *)
  (* enum_value_00 = "WAIT_FOR_DATA/0" *)
  (* enum_value_01 = "WAIT_TO_SEND/1" *)
  (* enum_value_10 = "SEND_PACKET/2" *)
  (* enum_value_11 = "WAIT_FOR_ACK/3" *)
  reg [1:0] fsm_state = 2'h0;
  wire generate_zlps;
  input is_in;
  wire is_in;
  input last;
  wire last;
  output \last$39 ;
  reg \last$39 ;
  output nak;
  reg nak;
  input new_token;
  wire new_token;
  input [7:0] payload;
  wire [7:0] payload;
  output [7:0] \payload$34 ;
  reg [7:0] \payload$34 ;
  input ready;
  wire ready;
  output \ready$25 ;
  wire \ready$25 ;
  input ready_for_response;
  wire ready_for_response;
  input reset_sequence;
  wire reset_sequence;
  reg [6:0] send_position = 7'h00;
  wire start_with_data1;
  reg stream_ended_in_buffer0 = 1'h0;
  reg stream_ended_in_buffer1 = 1'h0;
  input usb_clk;
  wire usb_clk;
  input usb_rst;
  wire usb_rst;
  input valid;
  wire valid;
  output \valid$38 ;
  reg \valid$38 ;
  reg [7:0] transmit_buffer_0 [63:0];
  initial begin
    transmit_buffer_0[0] = 8'h00;
    transmit_buffer_0[1] = 8'h00;
    transmit_buffer_0[2] = 8'h00;
    transmit_buffer_0[3] = 8'h00;
    transmit_buffer_0[4] = 8'h00;
    transmit_buffer_0[5] = 8'h00;
    transmit_buffer_0[6] = 8'h00;
    transmit_buffer_0[7] = 8'h00;
    transmit_buffer_0[8] = 8'h00;
    transmit_buffer_0[9] = 8'h00;
    transmit_buffer_0[10] = 8'h00;
    transmit_buffer_0[11] = 8'h00;
    transmit_buffer_0[12] = 8'h00;
    transmit_buffer_0[13] = 8'h00;
    transmit_buffer_0[14] = 8'h00;
    transmit_buffer_0[15] = 8'h00;
    transmit_buffer_0[16] = 8'h00;
    transmit_buffer_0[17] = 8'h00;
    transmit_buffer_0[18] = 8'h00;
    transmit_buffer_0[19] = 8'h00;
    transmit_buffer_0[20] = 8'h00;
    transmit_buffer_0[21] = 8'h00;
    transmit_buffer_0[22] = 8'h00;
    transmit_buffer_0[23] = 8'h00;
    transmit_buffer_0[24] = 8'h00;
    transmit_buffer_0[25] = 8'h00;
    transmit_buffer_0[26] = 8'h00;
    transmit_buffer_0[27] = 8'h00;
    transmit_buffer_0[28] = 8'h00;
    transmit_buffer_0[29] = 8'h00;
    transmit_buffer_0[30] = 8'h00;
    transmit_buffer_0[31] = 8'h00;
    transmit_buffer_0[32] = 8'h00;
    transmit_buffer_0[33] = 8'h00;
    transmit_buffer_0[34] = 8'h00;
    transmit_buffer_0[35] = 8'h00;
    transmit_buffer_0[36] = 8'h00;
    transmit_buffer_0[37] = 8'h00;
    transmit_buffer_0[38] = 8'h00;
    transmit_buffer_0[39] = 8'h00;
    transmit_buffer_0[40] = 8'h00;
    transmit_buffer_0[41] = 8'h00;
    transmit_buffer_0[42] = 8'h00;
    transmit_buffer_0[43] = 8'h00;
    transmit_buffer_0[44] = 8'h00;
    transmit_buffer_0[45] = 8'h00;
    transmit_buffer_0[46] = 8'h00;
    transmit_buffer_0[47] = 8'h00;
    transmit_buffer_0[48] = 8'h00;
    transmit_buffer_0[49] = 8'h00;
    transmit_buffer_0[50] = 8'h00;
    transmit_buffer_0[51] = 8'h00;
    transmit_buffer_0[52] = 8'h00;
    transmit_buffer_0[53] = 8'h00;
    transmit_buffer_0[54] = 8'h00;
    transmit_buffer_0[55] = 8'h00;
    transmit_buffer_0[56] = 8'h00;
    transmit_buffer_0[57] = 8'h00;
    transmit_buffer_0[58] = 8'h00;
    transmit_buffer_0[59] = 8'h00;
    transmit_buffer_0[60] = 8'h00;
    transmit_buffer_0[61] = 8'h00;
    transmit_buffer_0[62] = 8'h00;
    transmit_buffer_0[63] = 8'h00;
  end
  always @(posedge usb_clk) begin
    if (\$signature__en )
      transmit_buffer_0[\$62 [5:0]] <= payload;
  end
  reg [7:0] _0_;
  always @(posedge usb_clk) begin
    _0_ <= transmit_buffer_0[\$signature__addr$32 ];
  end
  assign \$signature__data$35  = _0_;
  reg [7:0] transmit_buffer_1 [63:0];
  initial begin
    transmit_buffer_1[0] = 8'h00;
    transmit_buffer_1[1] = 8'h00;
    transmit_buffer_1[2] = 8'h00;
    transmit_buffer_1[3] = 8'h00;
    transmit_buffer_1[4] = 8'h00;
    transmit_buffer_1[5] = 8'h00;
    transmit_buffer_1[6] = 8'h00;
    transmit_buffer_1[7] = 8'h00;
    transmit_buffer_1[8] = 8'h00;
    transmit_buffer_1[9] = 8'h00;
    transmit_buffer_1[10] = 8'h00;
    transmit_buffer_1[11] = 8'h00;
    transmit_buffer_1[12] = 8'h00;
    transmit_buffer_1[13] = 8'h00;
    transmit_buffer_1[14] = 8'h00;
    transmit_buffer_1[15] = 8'h00;
    transmit_buffer_1[16] = 8'h00;
    transmit_buffer_1[17] = 8'h00;
    transmit_buffer_1[18] = 8'h00;
    transmit_buffer_1[19] = 8'h00;
    transmit_buffer_1[20] = 8'h00;
    transmit_buffer_1[21] = 8'h00;
    transmit_buffer_1[22] = 8'h00;
    transmit_buffer_1[23] = 8'h00;
    transmit_buffer_1[24] = 8'h00;
    transmit_buffer_1[25] = 8'h00;
    transmit_buffer_1[26] = 8'h00;
    transmit_buffer_1[27] = 8'h00;
    transmit_buffer_1[28] = 8'h00;
    transmit_buffer_1[29] = 8'h00;
    transmit_buffer_1[30] = 8'h00;
    transmit_buffer_1[31] = 8'h00;
    transmit_buffer_1[32] = 8'h00;
    transmit_buffer_1[33] = 8'h00;
    transmit_buffer_1[34] = 8'h00;
    transmit_buffer_1[35] = 8'h00;
    transmit_buffer_1[36] = 8'h00;
    transmit_buffer_1[37] = 8'h00;
    transmit_buffer_1[38] = 8'h00;
    transmit_buffer_1[39] = 8'h00;
    transmit_buffer_1[40] = 8'h00;
    transmit_buffer_1[41] = 8'h00;
    transmit_buffer_1[42] = 8'h00;
    transmit_buffer_1[43] = 8'h00;
    transmit_buffer_1[44] = 8'h00;
    transmit_buffer_1[45] = 8'h00;
    transmit_buffer_1[46] = 8'h00;
    transmit_buffer_1[47] = 8'h00;
    transmit_buffer_1[48] = 8'h00;
    transmit_buffer_1[49] = 8'h00;
    transmit_buffer_1[50] = 8'h00;
    transmit_buffer_1[51] = 8'h00;
    transmit_buffer_1[52] = 8'h00;
    transmit_buffer_1[53] = 8'h00;
    transmit_buffer_1[54] = 8'h00;
    transmit_buffer_1[55] = 8'h00;
    transmit_buffer_1[56] = 8'h00;
    transmit_buffer_1[57] = 8'h00;
    transmit_buffer_1[58] = 8'h00;
    transmit_buffer_1[59] = 8'h00;
    transmit_buffer_1[60] = 8'h00;
    transmit_buffer_1[61] = 8'h00;
    transmit_buffer_1[62] = 8'h00;
    transmit_buffer_1[63] = 8'h00;
  end
  always @(posedge usb_clk) begin
    if (\$signature__en$8 )
      transmit_buffer_1[\$63 [5:0]] <= payload;
  end
  reg [7:0] _1_;
  always @(posedge usb_clk) begin
    _1_ <= transmit_buffer_1[\$signature__addr$33 ];
  end
  assign \$signature__data$36  = _1_;
  assign \$4  = ~ buffer_toggle;
  assign \$6  = \$5  + 1'h1;
  assign \$8  = last & \$7 ;
  assign \$10  = \$9  + 1'h1;
  assign \$11  = \$10  == 7'h40;
  assign \$12  = last | \$11 ;
  assign \$13  = valid & \$12 ;
  assign \$15  = | \$14 ;
  assign \$20  = ~ buffer_toggle;
  assign \$21  = ~ data_pid[0];
  assign \$22  = ~ buffer_toggle;
  assign \$23  = active & is_in;
  assign \$24  = \$23  & ready_for_response;
  assign \$25  = ~ data_pid[0];
  assign \$26  = ~ buffer_toggle;
  assign \$28  = | \$27 ;
  assign \$29  = ~ buffer_toggle;
  assign \$30  = send_position + 1'h1;
  assign \$31  = ~ buffer_toggle;
  assign \$33  = send_position + 1'h1;
  assign \$34  = \$32  == \$33 ;
  assign \$35  = ~ buffer_toggle;
  assign \$36  = ~ buffer_toggle;
  assign \$38  = \$37  == 7'h40;
  assign \$40  = ~ buffer_toggle;
  assign \$42  = \$39  & \$41 ;
  assign \$43  = ~ \ready$25 ;
  assign \$45  = \$44  + 1'h1;
  assign \$46  = \$45  == 7'h40;
  assign \$47  = last | \$46 ;
  assign \$48  = valid & \$47 ;
  assign \$50  = | \$49 ;
  assign \$55  = \$43  | \$54 ;
  assign \$56  = ~ data_pid[0];
  assign \$57  = ~ buffer_toggle;
  assign \$58  = ~ data_pid[0];
  assign \$59  = ~ buffer_toggle;
  assign \$64  = ~ buffer_toggle;
  assign \$65  = ~ buffer_toggle;
  assign \$67  = \$66  != 7'h40;
  assign \$69  = ~ \$68 ;
  assign \ready$25  = \$67  & \$69 ;
  assign \$70  = valid & \ready$25 ;
  assign \$71  = active & is_in;
  assign \$72  = \$71  & ready_for_response;
  assign \$73  = active & is_in;
  assign \$74  = \$73  & ready_for_response;
  assign \$75  = ~ buffer_toggle;
  assign \$77  = | \$76 ;
  assign \$78  = ~ buffer_toggle;
  assign \$80  = send_position + 1'h1;
  assign \$81  = \$79  == \$80 ;
  assign \$82  = send_position + 1'h1;
  assign \$83  = ~ buffer_toggle;
  assign \$84  = ! fsm_state;
  assign \$85  = fsm_state == 1'h1;
  assign \$86  = fsm_state == 2'h2;
  assign \$87  = fsm_state == 2'h3;
  always @(posedge usb_clk)
    data_pid <= \$88 ;
  always @(posedge usb_clk)
    \$signal  <= \$89 ;
  always @(posedge usb_clk)
    \$signal$10  <= \$90 ;
  always @(posedge usb_clk)
    stream_ended_in_buffer0 <= \$91 ;
  always @(posedge usb_clk)
    stream_ended_in_buffer1 <= \$92 ;
  always @(posedge usb_clk)
    fsm_state <= \$93 ;
  always @(posedge usb_clk)
    buffer_toggle <= \$94 ;
  always @(posedge usb_clk)
    send_position <= \$95 ;
  always @(posedge usb_clk)
    first <= \$96 ;
  assign \$3  = ~ buffer_toggle;
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$14 ) begin end
    (* full_case = 32'd1 *)
    casez (buffer_toggle)
      1'h0:
          \$5  = \$signal ;
      1'h1:
          \$5  = \$signal$10 ;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$14 ) begin end
    (* full_case = 32'd1 *)
    casez (buffer_toggle)
      1'h0:
          \$7  = \$signature__en ;
      1'h1:
          \$7  = \$signature__en$8 ;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$14 ) begin end
    (* full_case = 32'd1 *)
    casez (buffer_toggle)
      1'h0:
          \$9  = \$signal ;
      1'h1:
          \$9  = \$signal$10 ;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$14 ) begin end
    (* full_case = 32'd1 *)
    casez (buffer_toggle)
      1'h0:
          \$14  = \$signal ;
      1'h1:
          \$14  = \$signal$10 ;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$14 ) begin end
    (* full_case = 32'd1 *)
    casez (\$26 )
      1'h0:
          \$27  = \$signal ;
      1'h1:
          \$27  = \$signal$10 ;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$14 ) begin end
    (* full_case = 32'd1 *)
    casez (\$31 )
      1'h0:
          \$32  = \$signal ;
      1'h1:
          \$32  = \$signal$10 ;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$14 ) begin end
    (* full_case = 32'd1 *)
    casez (\$36 )
      1'h0:
          \$37  = \$signal ;
      1'h1:
          \$37  = \$signal$10 ;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$14 ) begin end
    (* full_case = 32'd1 *)
    casez (\$40 )
      1'h0:
          \$41  = stream_ended_in_buffer0;
      1'h1:
          \$41  = stream_ended_in_buffer1;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$14 ) begin end
    (* full_case = 32'd1 *)
    casez (buffer_toggle)
      1'h0:
          \$44  = \$signal ;
      1'h1:
          \$44  = \$signal$10 ;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$14 ) begin end
    (* full_case = 32'd1 *)
    casez (buffer_toggle)
      1'h0:
          \$49  = \$signal ;
      1'h1:
          \$49  = \$signal$10 ;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$14 ) begin end
    (* full_case = 32'd1 *)
    casez (buffer_toggle)
      1'h0:
          \$62  = \$signal ;
      1'h1:
          \$62  = \$signal$10 ;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$14 ) begin end
    (* full_case = 32'd1 *)
    casez (buffer_toggle)
      1'h0:
          \$63  = \$signal ;
      1'h1:
          \$63  = \$signal$10 ;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$14 ) begin end
    (* full_case = 32'd1 *)
    casez (\$65 )
      1'h0:
          \payload$34  = \$signature__data$35 ;
      1'h1:
          \payload$34  = \$signature__data$36 ;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$14 ) begin end
    (* full_case = 32'd1 *)
    casez (buffer_toggle)
      1'h0:
          \$66  = \$signal ;
      1'h1:
          \$66  = \$signal$10 ;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$14 ) begin end
    (* full_case = 32'd1 *)
    casez (buffer_toggle)
      1'h0:
          \$68  = stream_ended_in_buffer0;
      1'h1:
          \$68  = stream_ended_in_buffer1;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$14 ) begin end
    (* full_case = 32'd1 *)
    casez (\$75 )
      1'h0:
          \$76  = \$signal ;
      1'h1:
          \$76  = \$signal$10 ;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$14 ) begin end
    (* full_case = 32'd1 *)
    casez (\$78 )
      1'h0:
          \$79  = \$signal ;
      1'h1:
          \$79  = \$signal$10 ;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$14 ) begin end
    \$88  = data_pid;
    if (reset_sequence) begin
      \$88  = { 1'h0, \$1  };
    end
    (* full_case = 32'd1 *)
    casez (fsm_state)
      2'h0:
          if (\$19 ) begin
            \$88 [0] = \$21 ;
          end
      2'h1:
          casez ({ \$24 , reset_sequence, 1'h0 })
            3'b?1?:
                \$88  = 2'h0;
          endcase
      2'h2:
          /* empty */;
      2'h3:
          casez ({ ack, 1'h0 })
            2'b1?:
                if (\$42 ) begin
                  \$88 [0] = \$56 ;
                end else if (\$55 ) begin
                  \$88 [0] = \$58 ;
                end
          endcase
    endcase
    if (usb_rst) begin
      \$88  = 2'h1;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$14 ) begin end
    \$89  = \$signal ;
    casez ({ \$2 , 1'h0 })
      2'b1?:
          casez (buffer_toggle)
            1'h0:
                \$89  = \$6 [6:0];
          endcase
    endcase
    (* full_case = 32'd1 *)
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          /* empty */;
      2'h2:
          /* empty */;
      2'h3:
          casez ({ ack, 1'h0 })
            2'b1?:
                casez (\$35 )
                  1'h0:
                      \$89  = 7'h00;
                endcase
          endcase
    endcase
    if (usb_rst) begin
      \$89  = 7'h00;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$14 ) begin end
    \$90  = \$signal$10 ;
    casez ({ \$2 , 1'h0 })
      2'b1?:
          (* full_case = 32'd1 *)
          casez (buffer_toggle)
            1'h0:
                /* empty */;
            1'h1:
                \$90  = \$6 [6:0];
          endcase
    endcase
    (* full_case = 32'd1 *)
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          /* empty */;
      2'h2:
          /* empty */;
      2'h3:
          casez ({ ack, 1'h0 })
            2'b1?:
                (* full_case = 32'd1 *)
                casez (\$35 )
                  1'h0:
                      /* empty */;
                  1'h1:
                      \$90  = 7'h00;
                endcase
          endcase
    endcase
    if (usb_rst) begin
      \$90  = 7'h00;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$14 ) begin end
    \$91  = stream_ended_in_buffer0;
    if (\$8 ) begin
      casez (buffer_toggle)
        1'h0:
            \$91  = 1'h1;
      endcase
    end
    (* full_case = 32'd1 *)
    casez (fsm_state)
      2'h0:
          if (\$19 ) begin
            casez (\$22 )
              1'h0:
                  \$91  = 1'h0;
            endcase
          end
      2'h1:
          casez ({ \$24 , reset_sequence, 1'h0 })
            3'b?1?:
                /* empty */;
            3'b1??:
                (* full_case = 32'd1 *)
                if (\$28 ) begin
                end else begin
                  casez (\$29 )
                    1'h0:
                        \$91  = 1'h0;
                  endcase
                end
          endcase
      2'h2:
          /* empty */;
      2'h3:
          casez ({ ack, 1'h0 })
            2'b1?:
                if (\$42 ) begin
                end else if (\$55 ) begin
                  casez (\$59 )
                    1'h0:
                        \$91  = 1'h0;
                  endcase
                end
          endcase
    endcase
    if (usb_rst) begin
      \$91  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$14 ) begin end
    \$92  = stream_ended_in_buffer1;
    if (\$8 ) begin
      (* full_case = 32'd1 *)
      casez (buffer_toggle)
        1'h0:
            /* empty */;
        1'h1:
            \$92  = 1'h1;
      endcase
    end
    (* full_case = 32'd1 *)
    casez (fsm_state)
      2'h0:
          if (\$19 ) begin
            (* full_case = 32'd1 *)
            casez (\$22 )
              1'h0:
                  /* empty */;
              1'h1:
                  \$92  = 1'h0;
            endcase
          end
      2'h1:
          casez ({ \$24 , reset_sequence, 1'h0 })
            3'b?1?:
                /* empty */;
            3'b1??:
                (* full_case = 32'd1 *)
                if (\$28 ) begin
                end else begin
                  (* full_case = 32'd1 *)
                  casez (\$29 )
                    1'h0:
                        /* empty */;
                    1'h1:
                        \$92  = 1'h0;
                  endcase
                end
          endcase
      2'h2:
          /* empty */;
      2'h3:
          casez ({ ack, 1'h0 })
            2'b1?:
                if (\$42 ) begin
                end else if (\$55 ) begin
                  (* full_case = 32'd1 *)
                  casez (\$59 )
                    1'h0:
                        /* empty */;
                    1'h1:
                        \$92  = 1'h0;
                  endcase
                end
          endcase
    endcase
    if (usb_rst) begin
      \$92  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$14 ) begin end
    \$93  = fsm_state;
    (* full_case = 32'd1 *)
    casez (fsm_state)
      2'h0:
          if (\$19 ) begin
            \$93  = 2'h1;
          end
      2'h1:
          casez ({ \$24 , reset_sequence, 1'h0 })
            3'b?1?:
                /* empty */;
            3'b1??:
                (* full_case = 32'd1 *)
                if (\$28 ) begin
                  \$93  = 2'h2;
                end else begin
                  \$93  = 2'h3;
                end
          endcase
      2'h2:
          if (ready) begin
            if (\$34 ) begin
              \$93  = 2'h3;
            end
          end
      2'h3:
        begin
          casez ({ ack, 1'h0 })
            2'b1?:
                (* full_case = 32'd1 *)
                if (\$42 ) begin
                  \$93  = 2'h1;
                end else if (\$55 ) begin
                  \$93  = 2'h1;
                end else begin
                  \$93  = 2'h0;
                end
          endcase
          if (\$61 ) begin
            \$93  = 2'h1;
          end
        end
    endcase
    if (usb_rst) begin
      \$93  = 2'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$14 ) begin end
    \$94  = buffer_toggle;
    (* full_case = 32'd1 *)
    casez (fsm_state)
      2'h0:
          if (\$19 ) begin
            \$94  = \$20 ;
          end
      2'h1:
          /* empty */;
      2'h2:
          /* empty */;
      2'h3:
          casez ({ ack, 1'h0 })
            2'b1?:
                if (\$42 ) begin
                end else if (\$55 ) begin
                  \$94  = \$57 ;
                end
          endcase
    endcase
    if (usb_rst) begin
      \$94  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$14 ) begin end
    \$95  = send_position;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          \$95  = 7'h00;
      2'h2:
          if (ready) begin
            \$95  = \$30 [6:0];
          end
    endcase
    if (usb_rst) begin
      \$95  = 7'h00;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$14 ) begin end
    \$96  = first;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          casez ({ \$24 , reset_sequence, 1'h0 })
            3'b?1?:
                /* empty */;
            3'b1??:
                if (\$28 ) begin
                  \$96  = 1'h1;
                end
          endcase
      2'h2:
          if (ready) begin
            \$96  = 1'h0;
          end
    endcase
    if (usb_rst) begin
      \$96  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$14 ) begin end
    \$signature__addr$32  = 6'h00;
    casez (\$64 )
      1'h0:
          \$signature__addr$32  = send_position[5:0];
    endcase
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          /* empty */;
      2'h2:
          if (ready) begin
            casez (\$83 )
              1'h0:
                  \$signature__addr$32  = \$82 [5:0];
            endcase
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$14 ) begin end
    \$signature__addr$33  = 6'h00;
    (* full_case = 32'd1 *)
    casez (\$64 )
      1'h0:
          /* empty */;
      1'h1:
          \$signature__addr$33  = send_position[5:0];
    endcase
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          /* empty */;
      2'h2:
          if (ready) begin
            (* full_case = 32'd1 *)
            casez (\$83 )
              1'h0:
                  /* empty */;
              1'h1:
                  \$signature__addr$33  = \$82 [5:0];
            endcase
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$14 ) begin end
    \$signature__en  = 1'h0;
    casez (buffer_toggle)
      1'h0:
          \$signature__en  = \$70 ;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$14 ) begin end
    \$signature__en$8  = 1'h0;
    (* full_case = 32'd1 *)
    casez (buffer_toggle)
      1'h0:
          /* empty */;
      1'h1:
          \$signature__en$8  = \$70 ;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$14 ) begin end
    nak = 1'h0;
    casez (fsm_state)
      2'h0:
          nak = \$72 ;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$14 ) begin end
    \valid$38  = 1'h0;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          casez ({ \$74 , reset_sequence, 1'h0 })
            3'b?1?:
                /* empty */;
            3'b1??:
                (* full_case = 32'd1 *)
                if (\$77 ) begin
                end else begin
                  \valid$38  = 1'h1;
                end
          endcase
      2'h2:
          \valid$38  = 1'h1;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$14 ) begin end
    \last$39  = 1'h0;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          casez ({ \$74 , reset_sequence, 1'h0 })
            3'b?1?:
                /* empty */;
            3'b1??:
                (* full_case = 32'd1 *)
                if (\$77 ) begin
                end else begin
                  \last$39  = 1'h1;
                end
          endcase
      2'h2:
          \last$39  = \$81 ;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$14 ) begin end
    (* full_case = 32'd1 *)
    casez (buffer_toggle)
      1'h0:
          \$2  = \$signature__en ;
      1'h1:
          \$2  = \$signature__en$8 ;
    endcase
  end
  assign start_with_data1 = 1'h0;
  assign discard = 1'h0;
  assign flush = 1'h0;
  assign generate_zlps = 1'h1;
  assign \$signature__data  = payload;
  assign \$signature__addr  = \$62 [5:0];
  assign \$signature__data$30  = payload;
  assign \$signature__addr$31  = \$63 [5:0];
  assign \$1  = 1'h1;
  assign \$16  = 1'h0;
  assign \$17  = \$13 ;
  assign \$18  = 1'h1;
  assign \$19  = \$13 ;
  assign \$39  = \$38 ;
  assign \$51  = 1'h0;
  assign \$52  = \$48 ;
  assign \$53  = 1'h1;
  assign \$54  = \$48 ;
  assign \$60  = 1'h1;
  assign \$61  = new_token;
endmodule

module \LunaUSBSerialDevice.usb0.usb.USBStreamOutEndpoint (usb_clk, usb_rst, is_out, is_ping, ack, nak, \valid$35 , read_data, endpoint, ready_for_response, complete_in, invalid_in, \port$1761$3 , next, valid, payload, rx_ready_for_response, clear_endpoint_halt_in, read_en);
  reg \$auto$verilog_backend.cc:2373:dump_module$15  = 0;
  wire \$1 ;
  wire \$10 ;
  wire \$100 ;
  wire \$101 ;
  wire \$102 ;
  wire \$103 ;
  wire \$104 ;
  wire \$105 ;
  wire \$106 ;
  wire \$107 ;
  wire \$108 ;
  wire \$109 ;
  wire \$11 ;
  wire \$110 ;
  wire \$111 ;
  wire \$112 ;
  wire \$113 ;
  wire \$114 ;
  wire \$115 ;
  wire \$116 ;
  wire \$117 ;
  wire \$118 ;
  wire \$119 ;
  wire \$12 ;
  wire \$120 ;
  wire \$121 ;
  wire \$122 ;
  wire \$123 ;
  wire \$124 ;
  wire \$125 ;
  reg [5:0] \$126 ;
  reg \$127 ;
  reg \$128 ;
  reg \$129 ;
  wire \$13 ;
  wire \$14 ;
  wire \$15 ;
  wire \$16 ;
  wire \$17 ;
  wire \$18 ;
  wire \$19 ;
  wire \$2 ;
  wire \$20 ;
  wire \$21 ;
  wire \$22 ;
  wire \$23 ;
  wire \$24 ;
  wire \$25 ;
  wire \$26 ;
  wire \$27 ;
  wire \$28 ;
  wire \$29 ;
  wire \$3 ;
  wire \$30 ;
  wire \$31 ;
  wire \$32 ;
  wire \$33 ;
  wire \$34 ;
  wire \$35 ;
  wire \$36 ;
  wire \$37 ;
  wire \$38 ;
  wire \$39 ;
  wire \$4 ;
  wire \$40 ;
  wire \$41 ;
  wire \$42 ;
  wire \$43 ;
  wire \$44 ;
  wire \$45 ;
  wire \$46 ;
  wire \$47 ;
  wire \$48 ;
  wire \$49 ;
  wire \$5 ;
  wire \$50 ;
  wire \$51 ;
  wire \$52 ;
  wire \$53 ;
  wire \$54 ;
  wire \$55 ;
  wire \$56 ;
  wire \$57 ;
  wire \$58 ;
  wire \$59 ;
  wire \$6 ;
  wire \$60 ;
  wire \$61 ;
  wire \$62 ;
  wire \$63 ;
  wire \$64 ;
  wire \$65 ;
  wire \$66 ;
  wire \$67 ;
  wire \$68 ;
  wire \$69 ;
  wire \$7 ;
  wire \$70 ;
  wire \$71 ;
  wire \$72 ;
  wire \$73 ;
  wire \$74 ;
  wire \$75 ;
  wire \$76 ;
  wire \$77 ;
  wire \$78 ;
  wire \$79 ;
  wire \$8 ;
  wire \$80 ;
  wire \$81 ;
  wire \$82 ;
  wire \$83 ;
  wire \$84 ;
  wire \$85 ;
  wire \$86 ;
  wire \$87 ;
  wire \$88 ;
  wire \$89 ;
  wire \$9 ;
  wire \$90 ;
  wire [6:0] \$91 ;
  wire \$92 ;
  wire \$93 ;
  wire \$94 ;
  wire \$95 ;
  wire \$96 ;
  wire \$97 ;
  wire \$98 ;
  wire \$99 ;
  output ack;
  wire ack;
  input [5:0] clear_endpoint_halt_in;
  wire [5:0] clear_endpoint_halt_in;
  wire \clear_endpoint_halt_in.direction ;
  wire \clear_endpoint_halt_in.enable ;
  wire [3:0] \clear_endpoint_halt_in.number ;
  input complete_in;
  wire complete_in;
  wire complete_out;
  wire empty;
  input [3:0] endpoint;
  wire [3:0] endpoint;
  reg expected_data_toggle = 1'h0;
  wire first;
  wire \first$40 ;
  wire full;
  input invalid_in;
  wire invalid_in;
  wire invalid_out;
  input is_out;
  wire is_out;
  input is_ping;
  wire is_ping;
  wire last;
  wire \last$39 ;
  output nak;
  wire nak;
  input next;
  wire next;
  wire \next$21 ;
  wire \next$3 ;
  reg overflow = 1'h0;
  input [7:0] payload;
  wire [7:0] payload;
  wire [7:0] \payload$11 ;
  wire [7:0] \payload$37 ;
  wire [7:0] \payload$5 ;
  input \port$1761$3 ;
  wire \port$1761$3 ;
  wire read_commit;
  output [9:0] read_data;
  wire [9:0] read_data;
  input read_en;
  wire read_en;
  wire ready;
  input ready_for_response;
  wire ready_for_response;
  reg [5:0] rx_cnt = 6'h00;
  wire rx_complete;
  wire rx_invalid;
  wire [1:0] rx_pid_toggle;
  input rx_ready_for_response;
  wire rx_ready_for_response;
  wire [6:0] space_available;
  reg transfer_active = 1'h0;
  input usb_clk;
  wire usb_clk;
  input usb_rst;
  wire usb_rst;
  input valid;
  wire valid;
  wire \valid$1 ;
  wire \valid$22 ;
  output \valid$35 ;
  wire \valid$35 ;
  wire write_commit;
  wire [9:0] write_data;
  wire write_discard;
  wire write_en;
  assign \$1  = rx_cnt == 6'h3f;
  assign \$2  = ~ \$1 ;
  assign \$3  = last & \$2 ;
  assign \$4  = ~ transfer_active;
  assign \$5  = first & \$4 ;
  assign \$6  = endpoint == 3'h4;
  assign \$7  = \$6  & is_out;
  assign \$8  = \port$1761$3  == expected_data_toggle;
  assign \$9  = \$7  & \$8 ;
  assign \$10  = \$9  & \next$21 ;
  assign \$11  = \$10  & \valid$22 ;
  assign \$12  = ~ full;
  assign write_en = \$11  & \$12 ;
  assign \$13  = endpoint == 3'h4;
  assign \$14  = \$13  & is_out;
  assign \$15  = \$14  & complete_out;
  assign \$16  = ~ overflow;
  assign write_commit = \$15  & \$16 ;
  assign \$17  = endpoint == 3'h4;
  assign \$18  = \$17  & is_out;
  assign \$19  = complete_out & overflow;
  assign \$20  = invalid_out | \$19 ;
  assign write_discard = \$18  & \$20 ;
  assign \$21  = endpoint == 3'h4;
  assign \$22  = \$21  & is_out;
  assign \$23  = \$22  & is_out;
  assign \$24  = \$23  & rx_ready_for_response;
  assign \$25  = endpoint == 3'h4;
  assign \$26  = \$25  & is_out;
  assign \$27  = \port$1761$3  == expected_data_toggle;
  assign \$28  = \$26  & \$27 ;
  assign \$29  = endpoint == 3'h4;
  assign \$30  = \$29  & is_out;
  assign \$31  = \port$1761$3  == expected_data_toggle;
  assign \$32  = \$30  & \$31 ;
  assign \$33  = \$32  & \next$21 ;
  assign \$34  = \$33  & \valid$22 ;
  assign \$35  = \$34  & full;
  assign \$36  = ~ \$35 ;
  assign \$37  = \$28  & \$36 ;
  assign \$38  = ~ overflow;
  assign \$39  = \$37  & \$38 ;
  assign \$40  = \$24  & \$39 ;
  assign \$41  = endpoint == 3'h4;
  assign \$42  = \$41  & is_ping;
  assign \$43  = \$42  & ready_for_response;
  assign \$44  = space_available >= 7'h40;
  assign \$45  = \$43  & \$44 ;
  assign \$46  = \$40  | \$45 ;
  assign \$47  = endpoint == 3'h4;
  assign \$48  = \$47  & is_out;
  assign \$49  = \$48  & is_out;
  assign \$50  = \$49  & rx_ready_for_response;
  assign \$51  = endpoint == 3'h4;
  assign \$52  = \$51  & is_out;
  assign \$53  = \port$1761$3  == expected_data_toggle;
  assign \$54  = ~ \$53 ;
  assign \$55  = \$52  & \$54 ;
  assign \$56  = \$50  & \$55 ;
  assign ack = \$46  | \$56 ;
  assign \$57  = endpoint == 3'h4;
  assign \$58  = \$57  & is_out;
  assign \$59  = \$58  & is_out;
  assign \$60  = \$59  & rx_ready_for_response;
  assign \$61  = endpoint == 3'h4;
  assign \$62  = \$61  & is_out;
  assign \$63  = \port$1761$3  == expected_data_toggle;
  assign \$64  = \$62  & \$63 ;
  assign \$65  = endpoint == 3'h4;
  assign \$66  = \$65  & is_out;
  assign \$67  = \port$1761$3  == expected_data_toggle;
  assign \$68  = \$66  & \$67 ;
  assign \$69  = \$68  & \next$21 ;
  assign \$70  = \$69  & \valid$22 ;
  assign \$71  = \$70  & full;
  assign \$72  = ~ \$71 ;
  assign \$73  = \$64  & \$72 ;
  assign \$74  = ~ overflow;
  assign \$75  = \$73  & \$74 ;
  assign \$76  = ~ \$75 ;
  assign \$77  = \$60  & \$76 ;
  assign \$78  = endpoint == 3'h4;
  assign \$79  = \$78  & is_out;
  assign \$80  = \port$1761$3  == expected_data_toggle;
  assign \$81  = ~ \$80 ;
  assign \$82  = \$79  & \$81 ;
  assign \$83  = ~ \$82 ;
  assign \$84  = \$77  & \$83 ;
  assign \$85  = endpoint == 3'h4;
  assign \$86  = \$85  & is_ping;
  assign \$87  = \$86  & ready_for_response;
  assign \$88  = space_available >= 7'h40;
  assign \$89  = ~ \$88 ;
  assign \$90  = \$87  & \$89 ;
  assign nak = \$84  | \$90 ;
  assign \valid$35  = ~ empty;
  assign \$91  = rx_cnt + 1'h1;
  assign \$92  = rx_cnt == 6'h3f;
  assign \$93  = endpoint == 3'h4;
  assign \$94  = \$93  & is_out;
  assign \$95  = \port$1761$3  == expected_data_toggle;
  assign \$96  = \$94  & \$95 ;
  assign \$97  = \$96  & \next$21 ;
  assign \$98  = \$97  & \valid$22 ;
  assign \$99  = \$98  & full;
  assign \$100  = write_commit | write_discard;
  assign \$101  = endpoint == 3'h4;
  assign \$102  = \$101  & is_out;
  assign \$103  = \$102  & is_out;
  assign \$104  = \$103  & rx_ready_for_response;
  assign \$105  = endpoint == 3'h4;
  assign \$106  = \$105  & is_out;
  assign \$107  = \port$1761$3  == expected_data_toggle;
  assign \$108  = \$106  & \$107 ;
  assign \$109  = endpoint == 3'h4;
  assign \$110  = \$109  & is_out;
  assign \$111  = \port$1761$3  == expected_data_toggle;
  assign \$112  = \$110  & \$111 ;
  assign \$113  = \$112  & \next$21 ;
  assign \$114  = \$113  & \valid$22 ;
  assign \$115  = \$114  & full;
  assign \$116  = ~ \$115 ;
  assign \$117  = \$108  & \$116 ;
  assign \$118  = ~ overflow;
  assign \$119  = \$117  & \$118 ;
  assign \$120  = \$104  & \$119 ;
  assign \$121  = ~ expected_data_toggle;
  assign \$122  = ~ clear_endpoint_halt_in[1];
  assign \$123  = clear_endpoint_halt_in[0] & \$122 ;
  assign \$124  = clear_endpoint_halt_in[5:2] == 3'h4;
  assign \$125  = \$123  & \$124 ;
  always @(posedge usb_clk)
    rx_cnt <= \$126 ;
  always @(posedge usb_clk)
    transfer_active <= \$127 ;
  always @(posedge usb_clk)
    overflow <= \$128 ;
  always @(posedge usb_clk)
    expected_data_toggle <= \$129 ;
  \LunaUSBSerialDevice.usb0.usb.USBStreamOutEndpoint.boundary_detector  boundary_detector (
    .complete_in(complete_in),
    .complete_out(complete_out),
    .first(first),
    .invalid_in(invalid_in),
    .invalid_out(invalid_out),
    .last(last),
    .next(\next$21 ),
    .\next$12 (next),
    .payload(payload),
    .\payload$18 (\payload$11 ),
    .usb_clk(usb_clk),
    .usb_rst(usb_rst),
    .valid(\valid$22 ),
    .\valid$11 (valid)
  );
  \LunaUSBSerialDevice.usb0.usb.USBStreamOutEndpoint.fifo  fifo (
    .empty(empty),
    .full(full),
    .read_data(read_data),
    .read_en(read_en),
    .space_available(space_available),
    .usb_clk(usb_clk),
    .usb_rst(usb_rst),
    .write_commit(write_commit),
    .write_discard(write_discard),
    .write_en(write_en),
    .write_port__data(write_data)
  );
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$15 ) begin end
    \$126  = rx_cnt;
    if (write_en) begin
      \$126  = \$91 [5:0];
    end
    if (\$99 ) begin
    end else if (\$100 ) begin
      \$126  = 6'h00;
    end
    if (usb_rst) begin
      \$126  = 6'h00;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$15 ) begin end
    \$127  = transfer_active;
    if (write_en) begin
      if (last) begin
        \$127  = \$92 ;
      end
    end
    if (usb_rst) begin
      \$127  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$15 ) begin end
    \$128  = overflow;
    if (\$99 ) begin
      \$128  = 1'h1;
    end else if (\$100 ) begin
      \$128  = 1'h0;
    end
    if (usb_rst) begin
      \$128  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$15 ) begin end
    \$129  = expected_data_toggle;
    if (\$120 ) begin
      \$129  = \$121 ;
    end
    if (\$125 ) begin
      \$129  = 1'h0;
    end
    if (usb_rst) begin
      \$129  = 1'h0;
    end
  end
  assign \valid$1  = valid;
  assign \next$3  = next;
  assign \payload$5  = payload;
  assign rx_complete = complete_in;
  assign rx_invalid = invalid_in;
  assign rx_pid_toggle = { 1'h0, \port$1761$3  };
  assign \payload$37  = read_data[7:0];
  assign \last$39  = read_data[8];
  assign \first$40  = read_data[9];
  assign ready = read_en;
  assign read_commit = 1'h1;
  assign \clear_endpoint_halt_in.enable  = clear_endpoint_halt_in[0];
  assign \clear_endpoint_halt_in.direction  = clear_endpoint_halt_in[1];
  assign \clear_endpoint_halt_in.number  = clear_endpoint_halt_in[5:2];
  assign write_data[9] = \$5 ;
  assign write_data[8] = \$3 ;
  assign write_data[7:0] = \payload$11 ;
endmodule

module \LunaUSBSerialDevice.usb0.usb.USBStreamOutEndpoint.boundary_detector (usb_rst, complete_in, invalid_in, \next$12 , \valid$11 , payload, valid, first, last, next, complete_out, invalid_out, \payload$18 , usb_clk);
  reg \$auto$verilog_backend.cc:2373:dump_module$16  = 0;
  wire \$1 ;
  reg \$10 ;
  reg \$11 ;
  reg \$12 ;
  reg \$13 ;
  reg \$14 ;
  reg \$15 ;
  reg \$16 ;
  reg [7:0] \$17 ;
  reg \$18 ;
  reg [1:0] \$19 ;
  wire \$2 ;
  reg [7:0] \$20 ;
  wire \$3 ;
  wire \$4 ;
  wire \$5 ;
  wire \$6 ;
  wire \$7 ;
  wire \$8 ;
  reg \$9 ;
  reg [7:0] buffered_byte = 8'h00;
  reg buffered_complete = 1'h0;
  reg buffered_invalid = 1'h0;
  input complete_in;
  wire complete_in;
  output complete_out;
  reg complete_out = 1'h0;
  output first;
  reg first = 1'h0;
  (* enum_base_type = "fsmState" *)
  (* enum_value_00 = "WAIT_FOR_FIRST_BYTE/0" *)
  (* enum_value_01 = "RECEIVE_AND_TRANSMIT/1" *)
  (* enum_value_10 = "OUTPUT_STROBES/2" *)
  reg [1:0] fsm_state = 2'h0;
  input invalid_in;
  wire invalid_in;
  output invalid_out;
  reg invalid_out = 1'h0;
  reg is_first_byte = 1'h0;
  output last;
  reg last = 1'h0;
  output next;
  reg next = 1'h0;
  input \next$12 ;
  wire \next$12 ;
  input [7:0] payload;
  wire [7:0] payload;
  output [7:0] \payload$18 ;
  reg [7:0] \payload$18  = 8'h00;
  input usb_clk;
  wire usb_clk;
  input usb_rst;
  wire usb_rst;
  output valid;
  reg valid = 1'h0;
  input \valid$11 ;
  wire \valid$11 ;
  assign \$1  = \valid$11  & \next$12 ;
  assign \$2  = buffered_complete | complete_in;
  assign \$3  = buffered_invalid | invalid_in;
  assign \$4  = \valid$11  & \next$12 ;
  assign \$5  = ~ \valid$11 ;
  assign \$6  = ! fsm_state;
  assign \$7  = fsm_state == 1'h1;
  assign \$8  = fsm_state == 2'h2;
  always @(posedge usb_clk)
    valid <= \$9 ;
  always @(posedge usb_clk)
    first <= \$10 ;
  always @(posedge usb_clk)
    last <= \$11 ;
  always @(posedge usb_clk)
    next <= \$12 ;
  always @(posedge usb_clk)
    buffered_complete <= \$13 ;
  always @(posedge usb_clk)
    buffered_invalid <= \$14 ;
  always @(posedge usb_clk)
    complete_out <= \$15 ;
  always @(posedge usb_clk)
    invalid_out <= \$16 ;
  always @(posedge usb_clk)
    buffered_byte <= \$17 ;
  always @(posedge usb_clk)
    is_first_byte <= \$18 ;
  always @(posedge usb_clk)
    fsm_state <= \$19 ;
  always @(posedge usb_clk)
    \payload$18  <= \$20 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$16 ) begin end
    \$9  = valid;
    casez (fsm_state)
      2'h0:
          \$9  = 1'h0;
      2'h1:
          \$9  = 1'h1;
    endcase
    if (usb_rst) begin
      \$9  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$16 ) begin end
    \$10  = first;
    casez (fsm_state)
      2'h0:
          \$10  = 1'h0;
      2'h1:
        begin
          if (\$4 ) begin
            \$10  = is_first_byte;
          end
          if (\$5 ) begin
            \$10  = is_first_byte;
          end
        end
      2'h2:
          \$10  = 1'h0;
    endcase
    if (usb_rst) begin
      \$10  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$16 ) begin end
    \$11  = last;
    casez (fsm_state)
      2'h0:
          \$11  = 1'h0;
      2'h1:
          if (\$5 ) begin
            \$11  = 1'h1;
          end
      2'h2:
          \$11  = 1'h0;
    endcase
    if (usb_rst) begin
      \$11  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$16 ) begin end
    \$12  = next;
    casez (fsm_state)
      2'h0:
          \$12  = 1'h0;
      2'h1:
        begin
          \$12  = 1'h0;
          if (\$4 ) begin
            \$12  = 1'h1;
          end
          if (\$5 ) begin
            \$12  = 1'h1;
          end
        end
      2'h2:
          \$12  = 1'h0;
    endcase
    if (usb_rst) begin
      \$12  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$16 ) begin end
    \$13  = buffered_complete;
    casez (fsm_state)
      2'h0:
          \$13  = 1'h0;
      2'h1:
          \$13  = \$2 ;
    endcase
    if (usb_rst) begin
      \$13  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$16 ) begin end
    \$14  = buffered_invalid;
    casez (fsm_state)
      2'h0:
          \$14  = 1'h0;
      2'h1:
          \$14  = \$3 ;
    endcase
    if (usb_rst) begin
      \$14  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$16 ) begin end
    \$15  = complete_out;
    casez (fsm_state)
      2'h0:
          \$15  = 1'h0;
      2'h1:
          /* empty */;
      2'h2:
          \$15  = buffered_complete;
    endcase
    if (usb_rst) begin
      \$15  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$16 ) begin end
    \$16  = invalid_out;
    casez (fsm_state)
      2'h0:
          \$16  = 1'h0;
      2'h1:
          /* empty */;
      2'h2:
          \$16  = buffered_invalid;
    endcase
    if (usb_rst) begin
      \$16  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$16 ) begin end
    \$17  = buffered_byte;
    casez (fsm_state)
      2'h0:
          if (\$1 ) begin
            \$17  = payload;
          end
      2'h1:
          if (\$4 ) begin
            \$17  = payload;
          end
    endcase
    if (usb_rst) begin
      \$17  = 8'h00;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$16 ) begin end
    \$18  = is_first_byte;
    casez (fsm_state)
      2'h0:
          if (\$1 ) begin
            \$18  = 1'h1;
          end
      2'h1:
          if (\$4 ) begin
            \$18  = 1'h0;
          end
    endcase
    if (usb_rst) begin
      \$18  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$16 ) begin end
    \$19  = fsm_state;
    casez (fsm_state)
      2'h0:
          if (\$1 ) begin
            \$19  = 2'h1;
          end
      2'h1:
          if (\$5 ) begin
            \$19  = 2'h2;
          end
      2'h2:
          \$19  = 2'h0;
    endcase
    if (usb_rst) begin
      \$19  = 2'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$16 ) begin end
    \$20  = \payload$18 ;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
        begin
          if (\$4 ) begin
            \$20  = buffered_byte;
          end
          if (\$5 ) begin
            \$20  = buffered_byte;
          end
        end
    endcase
    if (usb_rst) begin
      \$20  = 8'h00;
    end
  end
endmodule

module \LunaUSBSerialDevice.usb0.usb.USBStreamOutEndpoint.fifo (usb_clk, usb_rst, write_en, write_commit, write_discard, empty, full, read_data, write_port__data, space_available, read_en);
  reg \$auto$verilog_backend.cc:2373:dump_module$17  = 0;
  wire \$1 ;
  wire [8:0] \$10 ;
  wire [7:0] \$11 ;
  wire [8:0] \$12 ;
  wire \$13 ;
  wire \$14 ;
  wire \$15 ;
  wire \$16 ;
  reg [6:0] \$17 ;
  reg [6:0] \$18 ;
  reg [6:0] \$19 ;
  wire \$2 ;
  reg [6:0] \$20 ;
  wire [7:0] \$3 ;
  wire \$4 ;
  wire [7:0] \$5 ;
  wire \$6 ;
  wire \$7 ;
  wire \$8 ;
  wire [7:0] \$9 ;
  reg [6:0] committed_read_pointer = 7'h00;
  reg [6:0] committed_write_pointer = 7'h00;
  reg [6:0] current_read_pointer = 7'h00;
  (* init = 7'h00 *)
  wire [6:0] current_write_pointer;
  output empty;
  wire empty;
  output full;
  wire full;
  reg [6:0] next_read_pointer;
  reg [6:0] next_write_pointer;
  wire read_commit;
  output [9:0] read_data;
  wire [9:0] read_data;
  wire read_discard;
  input read_en;
  wire read_en;
  reg [6:0] read_port__addr;
  wire [9:0] read_port__data;
  output [6:0] space_available;
  reg [6:0] space_available;
  input usb_clk;
  wire usb_clk;
  input usb_rst;
  wire usb_rst;
  input write_commit;
  wire write_commit;
  wire [9:0] write_data;
  input write_discard;
  wire write_discard;
  input write_en;
  wire write_en;
  reg [6:0] write_port__addr = 7'h00;
  input [9:0] write_port__data;
  wire [9:0] write_port__data;
  wire write_port__en;
  reg [9:0] rx_fifo [127:0];
  initial begin
    rx_fifo[0] = 10'h000;
    rx_fifo[1] = 10'h000;
    rx_fifo[2] = 10'h000;
    rx_fifo[3] = 10'h000;
    rx_fifo[4] = 10'h000;
    rx_fifo[5] = 10'h000;
    rx_fifo[6] = 10'h000;
    rx_fifo[7] = 10'h000;
    rx_fifo[8] = 10'h000;
    rx_fifo[9] = 10'h000;
    rx_fifo[10] = 10'h000;
    rx_fifo[11] = 10'h000;
    rx_fifo[12] = 10'h000;
    rx_fifo[13] = 10'h000;
    rx_fifo[14] = 10'h000;
    rx_fifo[15] = 10'h000;
    rx_fifo[16] = 10'h000;
    rx_fifo[17] = 10'h000;
    rx_fifo[18] = 10'h000;
    rx_fifo[19] = 10'h000;
    rx_fifo[20] = 10'h000;
    rx_fifo[21] = 10'h000;
    rx_fifo[22] = 10'h000;
    rx_fifo[23] = 10'h000;
    rx_fifo[24] = 10'h000;
    rx_fifo[25] = 10'h000;
    rx_fifo[26] = 10'h000;
    rx_fifo[27] = 10'h000;
    rx_fifo[28] = 10'h000;
    rx_fifo[29] = 10'h000;
    rx_fifo[30] = 10'h000;
    rx_fifo[31] = 10'h000;
    rx_fifo[32] = 10'h000;
    rx_fifo[33] = 10'h000;
    rx_fifo[34] = 10'h000;
    rx_fifo[35] = 10'h000;
    rx_fifo[36] = 10'h000;
    rx_fifo[37] = 10'h000;
    rx_fifo[38] = 10'h000;
    rx_fifo[39] = 10'h000;
    rx_fifo[40] = 10'h000;
    rx_fifo[41] = 10'h000;
    rx_fifo[42] = 10'h000;
    rx_fifo[43] = 10'h000;
    rx_fifo[44] = 10'h000;
    rx_fifo[45] = 10'h000;
    rx_fifo[46] = 10'h000;
    rx_fifo[47] = 10'h000;
    rx_fifo[48] = 10'h000;
    rx_fifo[49] = 10'h000;
    rx_fifo[50] = 10'h000;
    rx_fifo[51] = 10'h000;
    rx_fifo[52] = 10'h000;
    rx_fifo[53] = 10'h000;
    rx_fifo[54] = 10'h000;
    rx_fifo[55] = 10'h000;
    rx_fifo[56] = 10'h000;
    rx_fifo[57] = 10'h000;
    rx_fifo[58] = 10'h000;
    rx_fifo[59] = 10'h000;
    rx_fifo[60] = 10'h000;
    rx_fifo[61] = 10'h000;
    rx_fifo[62] = 10'h000;
    rx_fifo[63] = 10'h000;
    rx_fifo[64] = 10'h000;
    rx_fifo[65] = 10'h000;
    rx_fifo[66] = 10'h000;
    rx_fifo[67] = 10'h000;
    rx_fifo[68] = 10'h000;
    rx_fifo[69] = 10'h000;
    rx_fifo[70] = 10'h000;
    rx_fifo[71] = 10'h000;
    rx_fifo[72] = 10'h000;
    rx_fifo[73] = 10'h000;
    rx_fifo[74] = 10'h000;
    rx_fifo[75] = 10'h000;
    rx_fifo[76] = 10'h000;
    rx_fifo[77] = 10'h000;
    rx_fifo[78] = 10'h000;
    rx_fifo[79] = 10'h000;
    rx_fifo[80] = 10'h000;
    rx_fifo[81] = 10'h000;
    rx_fifo[82] = 10'h000;
    rx_fifo[83] = 10'h000;
    rx_fifo[84] = 10'h000;
    rx_fifo[85] = 10'h000;
    rx_fifo[86] = 10'h000;
    rx_fifo[87] = 10'h000;
    rx_fifo[88] = 10'h000;
    rx_fifo[89] = 10'h000;
    rx_fifo[90] = 10'h000;
    rx_fifo[91] = 10'h000;
    rx_fifo[92] = 10'h000;
    rx_fifo[93] = 10'h000;
    rx_fifo[94] = 10'h000;
    rx_fifo[95] = 10'h000;
    rx_fifo[96] = 10'h000;
    rx_fifo[97] = 10'h000;
    rx_fifo[98] = 10'h000;
    rx_fifo[99] = 10'h000;
    rx_fifo[100] = 10'h000;
    rx_fifo[101] = 10'h000;
    rx_fifo[102] = 10'h000;
    rx_fifo[103] = 10'h000;
    rx_fifo[104] = 10'h000;
    rx_fifo[105] = 10'h000;
    rx_fifo[106] = 10'h000;
    rx_fifo[107] = 10'h000;
    rx_fifo[108] = 10'h000;
    rx_fifo[109] = 10'h000;
    rx_fifo[110] = 10'h000;
    rx_fifo[111] = 10'h000;
    rx_fifo[112] = 10'h000;
    rx_fifo[113] = 10'h000;
    rx_fifo[114] = 10'h000;
    rx_fifo[115] = 10'h000;
    rx_fifo[116] = 10'h000;
    rx_fifo[117] = 10'h000;
    rx_fifo[118] = 10'h000;
    rx_fifo[119] = 10'h000;
    rx_fifo[120] = 10'h000;
    rx_fifo[121] = 10'h000;
    rx_fifo[122] = 10'h000;
    rx_fifo[123] = 10'h000;
    rx_fifo[124] = 10'h000;
    rx_fifo[125] = 10'h000;
    rx_fifo[126] = 10'h000;
    rx_fifo[127] = 10'h000;
  end
  always @(posedge usb_clk) begin
    if (write_port__en)
      rx_fifo[write_port__addr] <= write_port__data;
  end
  reg [9:0] _0_;
  always @(posedge usb_clk) begin
    _0_ <= rx_fifo[read_port__addr];
  end
  assign read_data = _0_;
  assign \$1  = ~ full;
  assign write_port__en = write_en & \$1 ;
  assign \$2  = write_port__addr == 7'h7f;
  assign \$3  = write_port__addr + 1'h1;
  assign \$4  = current_read_pointer == 7'h7f;
  assign \$5  = current_read_pointer + 1'h1;
  assign \$6  = ~ empty;
  assign \$7  = read_en & \$6 ;
  assign empty = current_read_pointer == committed_write_pointer;
  assign \$8  = committed_read_pointer <= write_port__addr;
  assign \$9  = write_port__addr - committed_read_pointer;
  assign \$10  = $signed(8'h7f) - $signed(\$9 );
  assign \$11  = committed_read_pointer - write_port__addr;
  assign \$12  = $signed(\$11 ) - $signed(2'h1);
  assign full = next_write_pointer == committed_read_pointer;
  assign \$13  = ~ full;
  assign \$14  = write_en & \$13 ;
  assign \$15  = ~ empty;
  assign \$16  = read_en & \$15 ;
  always @(posedge usb_clk)
    write_port__addr <= \$17 ;
  always @(posedge usb_clk)
    committed_write_pointer <= \$18 ;
  always @(posedge usb_clk)
    current_read_pointer <= \$19 ;
  always @(posedge usb_clk)
    committed_read_pointer <= \$20 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$17 ) begin end
    (* full_case = 32'd1 *)
    if (\$2 ) begin
      next_write_pointer = 7'h00;
    end else begin
      next_write_pointer = \$3 [6:0];
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$17 ) begin end
    (* full_case = 32'd1 *)
    if (\$4 ) begin
      next_read_pointer = 7'h00;
    end else begin
      next_read_pointer = \$5 [6:0];
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$17 ) begin end
    (* full_case = 32'd1 *)
    if (\$7 ) begin
      read_port__addr = next_read_pointer;
    end else begin
      read_port__addr = current_read_pointer;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$17 ) begin end
    (* full_case = 32'd1 *)
    if (full) begin
      space_available = 7'h00;
    end else if (\$8 ) begin
      space_available = \$10 [6:0];
    end else begin
      space_available = \$12 [6:0];
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$17 ) begin end
    \$17  = write_port__addr;
    if (\$14 ) begin
      \$17  = next_write_pointer;
    end
    if (write_discard) begin
      \$17  = committed_write_pointer;
    end
    if (usb_rst) begin
      \$17  = 7'h00;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$17 ) begin end
    \$18  = committed_write_pointer;
    if (write_commit) begin
      \$18  = write_port__addr;
    end
    if (usb_rst) begin
      \$18  = 7'h00;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$17 ) begin end
    \$19  = current_read_pointer;
    if (\$16 ) begin
      \$19  = next_read_pointer;
    end
    if (usb_rst) begin
      \$19  = 7'h00;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$17 ) begin end
    \$20  = current_read_pointer;
    if (usb_rst) begin
      \$20  = 7'h00;
    end
  end
  assign read_port__data = read_data;
  assign write_data = write_port__data;
  assign current_write_pointer = write_port__addr;
  assign read_commit = 1'h1;
  assign read_discard = 1'h0;
endmodule

module \LunaUSBSerialDevice.usb0.usb.data_crc (usb_rst, tx_valid, rx_valid, output_crc, \start$4 , rx_data, start, \start$3 , tx_data, usb_clk);
  reg \$auto$verilog_backend.cc:2373:dump_module$18  = 0;
  wire \$1 ;
  wire \$10 ;
  wire \$100 ;
  wire \$101 ;
  wire \$102 ;
  wire \$103 ;
  wire \$104 ;
  wire \$105 ;
  wire \$106 ;
  wire \$107 ;
  wire \$108 ;
  wire \$109 ;
  wire \$11 ;
  wire \$110 ;
  wire \$111 ;
  wire \$112 ;
  wire \$113 ;
  wire \$114 ;
  wire \$115 ;
  wire \$116 ;
  wire \$117 ;
  wire \$118 ;
  wire \$119 ;
  wire \$12 ;
  wire \$120 ;
  wire \$121 ;
  wire \$122 ;
  wire \$123 ;
  wire \$124 ;
  wire \$125 ;
  wire \$126 ;
  wire \$127 ;
  wire \$128 ;
  wire \$129 ;
  wire \$13 ;
  wire \$130 ;
  wire \$131 ;
  wire \$132 ;
  wire \$133 ;
  wire \$134 ;
  wire \$135 ;
  wire \$136 ;
  wire \$137 ;
  wire \$138 ;
  reg [15:0] \$139 ;
  wire \$14 ;
  wire \$15 ;
  wire \$16 ;
  wire \$17 ;
  wire \$18 ;
  wire \$19 ;
  wire \$2 ;
  wire \$20 ;
  wire \$21 ;
  wire \$22 ;
  wire \$23 ;
  wire \$24 ;
  wire \$25 ;
  wire \$26 ;
  wire \$27 ;
  wire \$28 ;
  wire \$29 ;
  wire \$3 ;
  wire \$30 ;
  wire \$31 ;
  wire \$32 ;
  wire \$33 ;
  wire \$34 ;
  wire \$35 ;
  wire \$36 ;
  wire \$37 ;
  wire \$38 ;
  wire \$39 ;
  wire \$4 ;
  wire \$40 ;
  wire \$41 ;
  wire \$42 ;
  wire \$43 ;
  wire \$44 ;
  wire \$45 ;
  wire \$46 ;
  wire \$47 ;
  wire \$48 ;
  wire \$49 ;
  wire \$5 ;
  wire \$50 ;
  wire \$51 ;
  wire \$52 ;
  wire \$53 ;
  wire \$54 ;
  wire \$55 ;
  wire \$56 ;
  wire \$57 ;
  wire \$58 ;
  wire \$59 ;
  wire \$6 ;
  wire \$60 ;
  wire \$61 ;
  wire \$62 ;
  wire \$63 ;
  wire \$64 ;
  wire \$65 ;
  wire \$66 ;
  wire \$67 ;
  wire \$68 ;
  wire \$69 ;
  wire \$7 ;
  wire \$70 ;
  wire \$71 ;
  wire \$72 ;
  wire \$73 ;
  wire \$74 ;
  wire \$75 ;
  wire \$76 ;
  wire \$77 ;
  wire \$78 ;
  wire \$79 ;
  wire \$8 ;
  wire \$80 ;
  wire \$81 ;
  wire \$82 ;
  wire \$83 ;
  wire \$84 ;
  wire \$85 ;
  wire \$86 ;
  wire \$87 ;
  wire \$88 ;
  wire \$89 ;
  wire \$9 ;
  wire \$90 ;
  wire \$91 ;
  wire \$92 ;
  wire \$93 ;
  wire \$94 ;
  wire \$95 ;
  wire \$96 ;
  wire \$97 ;
  wire \$98 ;
  wire \$99 ;
  reg [15:0] crc = 16'hffff;
  wire [15:0] \crc$11 ;
  wire [15:0] \crc$12 ;
  wire [15:0] \crc$13 ;
  output [15:0] output_crc;
  wire [15:0] output_crc;
  input [7:0] rx_data;
  wire [7:0] rx_data;
  input rx_valid;
  wire rx_valid;
  input start;
  wire start;
  input \start$3 ;
  wire \start$3 ;
  input \start$4 ;
  wire \start$4 ;
  input [7:0] tx_data;
  wire [7:0] tx_data;
  input tx_valid;
  wire tx_valid;
  input usb_clk;
  wire usb_clk;
  input usb_rst;
  wire usb_rst;
  assign \$1  = start | \start$3 ;
  assign \$2  = \$1  | \start$4 ;
  assign \$3  = rx_data[0] ^ rx_data[1];
  assign \$4  = \$3  ^ rx_data[2];
  assign \$5  = \$4  ^ rx_data[3];
  assign \$6  = \$5  ^ rx_data[4];
  assign \$7  = \$6  ^ rx_data[5];
  assign \$8  = \$7  ^ rx_data[6];
  assign \$9  = \$8  ^ rx_data[7];
  assign \$10  = crc[8] ^ crc[9];
  assign \$11  = \$10  ^ crc[10];
  assign \$12  = \$11  ^ crc[11];
  assign \$13  = \$12  ^ crc[12];
  assign \$14  = \$13  ^ crc[13];
  assign \$15  = \$14  ^ crc[14];
  assign \$16  = \$15  ^ crc[15];
  assign \$17  = \$9  ^ \$16 ;
  assign \$18  = rx_data[0] ^ rx_data[1];
  assign \$19  = \$18  ^ rx_data[2];
  assign \$20  = \$19  ^ rx_data[3];
  assign \$21  = \$20  ^ rx_data[4];
  assign \$22  = \$21  ^ rx_data[5];
  assign \$23  = \$22  ^ rx_data[6];
  assign \$24  = crc[9] ^ crc[10];
  assign \$25  = \$24  ^ crc[11];
  assign \$26  = \$25  ^ crc[12];
  assign \$27  = \$26  ^ crc[13];
  assign \$28  = \$27  ^ crc[14];
  assign \$29  = \$28  ^ crc[15];
  assign \$30  = \$23  ^ \$29 ;
  assign \$31  = rx_data[6] ^ rx_data[7];
  assign \$32  = crc[8] ^ crc[9];
  assign \$33  = \$31  ^ \$32 ;
  assign \$34  = rx_data[5] ^ rx_data[6];
  assign \$35  = crc[9] ^ crc[10];
  assign \$36  = \$34  ^ \$35 ;
  assign \$37  = rx_data[4] ^ rx_data[5];
  assign \$38  = crc[10] ^ crc[11];
  assign \$39  = \$37  ^ \$38 ;
  assign \$40  = rx_data[3] ^ rx_data[4];
  assign \$41  = crc[11] ^ crc[12];
  assign \$42  = \$40  ^ \$41 ;
  assign \$43  = rx_data[2] ^ rx_data[3];
  assign \$44  = crc[12] ^ crc[13];
  assign \$45  = \$43  ^ \$44 ;
  assign \$46  = rx_data[1] ^ rx_data[2];
  assign \$47  = crc[13] ^ crc[14];
  assign \$48  = \$46  ^ \$47 ;
  assign \$49  = rx_data[0] ^ rx_data[1];
  assign \$50  = crc[14] ^ crc[15];
  assign \$51  = \$49  ^ \$50 ;
  assign \$52  = \$51  ^ crc[0];
  assign \$53  = rx_data[0] ^ crc[1];
  assign \$54  = \$53  ^ crc[15];
  assign \$55  = rx_data[0] ^ rx_data[1];
  assign \$56  = \$55  ^ rx_data[2];
  assign \$57  = \$56  ^ rx_data[3];
  assign \$58  = \$57  ^ rx_data[4];
  assign \$59  = \$58  ^ rx_data[5];
  assign \$60  = \$59  ^ rx_data[6];
  assign \$61  = \$60  ^ rx_data[7];
  assign \$62  = crc[7] ^ crc[8];
  assign \$63  = \$62  ^ crc[9];
  assign \$64  = \$63  ^ crc[10];
  assign \$65  = \$64  ^ crc[11];
  assign \$66  = \$65  ^ crc[12];
  assign \$67  = \$66  ^ crc[13];
  assign \$68  = \$67  ^ crc[14];
  assign \$69  = \$68  ^ crc[15];
  assign \$70  = \$61  ^ \$69 ;
  assign \$71  = tx_data[0] ^ tx_data[1];
  assign \$72  = \$71  ^ tx_data[2];
  assign \$73  = \$72  ^ tx_data[3];
  assign \$74  = \$73  ^ tx_data[4];
  assign \$75  = \$74  ^ tx_data[5];
  assign \$76  = \$75  ^ tx_data[6];
  assign \$77  = \$76  ^ tx_data[7];
  assign \$78  = crc[8] ^ crc[9];
  assign \$79  = \$78  ^ crc[10];
  assign \$80  = \$79  ^ crc[11];
  assign \$81  = \$80  ^ crc[12];
  assign \$82  = \$81  ^ crc[13];
  assign \$83  = \$82  ^ crc[14];
  assign \$84  = \$83  ^ crc[15];
  assign \$85  = \$77  ^ \$84 ;
  assign \$86  = tx_data[0] ^ tx_data[1];
  assign \$87  = \$86  ^ tx_data[2];
  assign \$88  = \$87  ^ tx_data[3];
  assign \$89  = \$88  ^ tx_data[4];
  assign \$90  = \$89  ^ tx_data[5];
  assign \$91  = \$90  ^ tx_data[6];
  assign \$92  = crc[9] ^ crc[10];
  assign \$93  = \$92  ^ crc[11];
  assign \$94  = \$93  ^ crc[12];
  assign \$95  = \$94  ^ crc[13];
  assign \$96  = \$95  ^ crc[14];
  assign \$97  = \$96  ^ crc[15];
  assign \$98  = \$91  ^ \$97 ;
  assign \$99  = tx_data[6] ^ tx_data[7];
  assign \$100  = crc[8] ^ crc[9];
  assign \$101  = \$99  ^ \$100 ;
  assign \$102  = tx_data[5] ^ tx_data[6];
  assign \$103  = crc[9] ^ crc[10];
  assign \$104  = \$102  ^ \$103 ;
  assign \$105  = tx_data[4] ^ tx_data[5];
  assign \$106  = crc[10] ^ crc[11];
  assign \$107  = \$105  ^ \$106 ;
  assign \$108  = tx_data[3] ^ tx_data[4];
  assign \$109  = crc[11] ^ crc[12];
  assign \$110  = \$108  ^ \$109 ;
  assign \$111  = tx_data[2] ^ tx_data[3];
  assign \$112  = crc[12] ^ crc[13];
  assign \$113  = \$111  ^ \$112 ;
  assign \$114  = tx_data[1] ^ tx_data[2];
  assign \$115  = crc[13] ^ crc[14];
  assign \$116  = \$114  ^ \$115 ;
  assign \$117  = tx_data[0] ^ tx_data[1];
  assign \$118  = crc[14] ^ crc[15];
  assign \$119  = \$117  ^ \$118 ;
  assign \$120  = \$119  ^ crc[0];
  assign \$121  = tx_data[0] ^ crc[1];
  assign \$122  = \$121  ^ crc[15];
  assign \$123  = tx_data[0] ^ tx_data[1];
  assign \$124  = \$123  ^ tx_data[2];
  assign \$125  = \$124  ^ tx_data[3];
  assign \$126  = \$125  ^ tx_data[4];
  assign \$127  = \$126  ^ tx_data[5];
  assign \$128  = \$127  ^ tx_data[6];
  assign \$129  = \$128  ^ tx_data[7];
  assign \$130  = crc[7] ^ crc[8];
  assign \$131  = \$130  ^ crc[9];
  assign \$132  = \$131  ^ crc[10];
  assign \$133  = \$132  ^ crc[11];
  assign \$134  = \$133  ^ crc[12];
  assign \$135  = \$134  ^ crc[13];
  assign \$136  = \$135  ^ crc[14];
  assign \$137  = \$136  ^ crc[15];
  assign \$138  = \$129  ^ \$137 ;
  assign output_crc = ~ { crc[0], crc[1], crc[2], crc[3], crc[4], crc[5], crc[6], crc[7], crc[8], crc[9], crc[10], crc[11], crc[12], crc[13], crc[14], crc[15] };
  always @(posedge usb_clk)
    crc <= \$139 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$18 ) begin end
    \$139  = crc;
    if (\$2 ) begin
      \$139  = 16'hffff;
    end else if (rx_valid) begin
      \$139  = { \$70 , crc[6:2], \$54 , \$52 , \$48 , \$45 , \$42 , \$39 , \$36 , \$33 , \$30 , \$17  };
    end else if (tx_valid) begin
      \$139  = { \$138 , crc[6:2], \$122 , \$120 , \$116 , \$113 , \$110 , \$107 , \$104 , \$101 , \$98 , \$85  };
    end
    if (usb_rst) begin
      \$139  = 16'hffff;
    end
  end
  assign \crc$11  = output_crc;
  assign \crc$12  = output_crc;
  assign \crc$13  = output_crc;
endmodule

module \LunaUSBSerialDevice.usb0.usb.endpoint_mux (usb_rst, is_in, is_out, is_setup, is_ping, crc, \ack$180 , \nak$185 , \stall$190 , start, \start$200 , \valid$170 , first, last, \payload$227 , \ack$183 , \nak$188 , \payload$231 , active_address, active_config, speed
, new_frame, new_token, frame, pid, address, endpoint, ready_for_response, ready, rx_complete, rx_invalid, \port$1761$3 , next, valid, payload, rx_ready_for_response, ack, nak, stall, nyet, tx_allowed, tx_timeout
, rx_timeout, \address_changed$154 , new_address, \config_changed$164 , new_config, clear_endpoint_halt_in, tx_pid_toggle, \payload$176 , \ack$181 , \start$201 , \start$196 , \valid$209 , \first$221 , \last$222 , \payload$223 , \port$1909$0 , \nak$186 , \stall$191 , address_changed, \new_address$156 , config_changed
, \new_config$166 , \clear_endpoint_halt_out$205 , \tx_pid_toggle$216 , \first$225 , \nak$187 , \valid$211 , \last$226 , \tx_pid_toggle$218 , \first$229 , \nak$189 , \valid$213 , \last$230 , usb_clk);
  reg \$auto$verilog_backend.cc:2373:dump_module$19  = 0;
  wire \$1 ;
  wire \$10 ;
  wire \$11 ;
  wire \$12 ;
  wire \$13 ;
  wire \$14 ;
  wire \$15 ;
  wire \$16 ;
  wire \$17 ;
  wire \$18 ;
  wire \$19 ;
  wire \$2 ;
  wire \$20 ;
  wire \$21 ;
  wire \$22 ;
  wire \$23 ;
  wire [3:0] \$24 ;
  wire [3:0] \$25 ;
  wire [3:0] \$26 ;
  wire [3:0] \$27 ;
  wire \$28 ;
  wire \$29 ;
  wire \$3 ;
  wire \$30 ;
  wire \$31 ;
  reg [3:0] \$32 ;
  wire \$4 ;
  wire \$5 ;
  wire \$6 ;
  wire \$7 ;
  wire \$8 ;
  wire \$9 ;
  input ack;
  wire ack;
  wire \ack$124 ;
  output \ack$180 ;
  wire \ack$180 ;
  input \ack$181 ;
  wire \ack$181 ;
  wire \ack$182 ;
  input \ack$183 ;
  wire \ack$183 ;
  wire \ack$184 ;
  wire \ack$64 ;
  wire \ack$9 ;
  wire \ack$94 ;
  input [6:0] active_address;
  wire [6:0] active_address;
  wire [6:0] \active_address$119 ;
  wire [6:0] \active_address$149 ;
  wire [6:0] \active_address$59 ;
  wire [6:0] \active_address$89 ;
  input [7:0] active_config;
  wire [7:0] active_config;
  wire [7:0] \active_config$118 ;
  wire [7:0] \active_config$148 ;
  wire [7:0] \active_config$57 ;
  wire [7:0] \active_config$88 ;
  input [6:0] address;
  wire [6:0] address;
  wire [6:0] \address$129 ;
  wire [6:0] \address$19 ;
  wire [6:0] \address$69 ;
  wire [6:0] \address$99 ;
  input address_changed;
  wire address_changed;
  wire \address_changed$151 ;
  wire \address_changed$152 ;
  wire \address_changed$153 ;
  output \address_changed$154 ;
  reg \address_changed$154 ;
  output [5:0] clear_endpoint_halt_in;
  wire [5:0] clear_endpoint_halt_in;
  wire [5:0] \clear_endpoint_halt_in$109 ;
  wire \clear_endpoint_halt_in$109.direction ;
  wire \clear_endpoint_halt_in$109.enable ;
  wire [3:0] \clear_endpoint_halt_in$109.number ;
  wire [5:0] \clear_endpoint_halt_in$139 ;
  wire \clear_endpoint_halt_in$139.direction ;
  wire \clear_endpoint_halt_in$139.enable ;
  wire [3:0] \clear_endpoint_halt_in$139.number ;
  wire [5:0] \clear_endpoint_halt_in$79 ;
  wire \clear_endpoint_halt_in$79.direction ;
  wire \clear_endpoint_halt_in$79.enable ;
  wire [3:0] \clear_endpoint_halt_in$79.number ;
  wire \clear_endpoint_halt_in.direction ;
  wire \clear_endpoint_halt_in.enable ;
  wire [3:0] \clear_endpoint_halt_in.number ;
  wire [5:0] clear_endpoint_halt_out;
  input [5:0] \clear_endpoint_halt_out$205 ;
  wire [5:0] \clear_endpoint_halt_out$205 ;
  wire \clear_endpoint_halt_out$205.direction ;
  wire \clear_endpoint_halt_out$205.enable ;
  wire [3:0] \clear_endpoint_halt_out$205.number ;
  wire [5:0] \clear_endpoint_halt_out$206 ;
  wire \clear_endpoint_halt_out$206.direction ;
  wire \clear_endpoint_halt_out$206.enable ;
  wire [3:0] \clear_endpoint_halt_out$206.number ;
  wire [5:0] \clear_endpoint_halt_out$207 ;
  wire \clear_endpoint_halt_out$207.direction ;
  wire \clear_endpoint_halt_out$207.enable ;
  wire [3:0] \clear_endpoint_halt_out$207.number ;
  wire [5:0] \clear_endpoint_halt_out$208 ;
  wire \clear_endpoint_halt_out$208.direction ;
  wire \clear_endpoint_halt_out$208.enable ;
  wire [3:0] \clear_endpoint_halt_out$208.number ;
  wire \clear_endpoint_halt_out.direction ;
  wire \clear_endpoint_halt_out.enable ;
  wire [3:0] \clear_endpoint_halt_out.number ;
  input config_changed;
  wire config_changed;
  wire \config_changed$161 ;
  wire \config_changed$162 ;
  wire \config_changed$163 ;
  output \config_changed$164 ;
  reg \config_changed$164 ;
  input [15:0] crc;
  wire [15:0] crc;
  wire [15:0] \crc$1 ;
  wire [15:0] \crc$120 ;
  wire [15:0] \crc$60 ;
  wire [15:0] \crc$90 ;
  input [3:0] endpoint;
  wire [3:0] endpoint;
  wire [3:0] \endpoint$100 ;
  wire [3:0] \endpoint$130 ;
  wire [3:0] \endpoint$21 ;
  wire [3:0] \endpoint$70 ;
  output first;
  wire first;
  wire \first$173 ;
  input \first$221 ;
  wire \first$221 ;
  input \first$225 ;
  wire \first$225 ;
  input \first$229 ;
  wire \first$229 ;
  input [10:0] frame;
  wire [10:0] frame;
  wire [10:0] \frame$103 ;
  wire [10:0] \frame$133 ;
  wire [10:0] \frame$27 ;
  wire [10:0] \frame$73 ;
  input is_in;
  wire is_in;
  wire \is_in$105 ;
  wire \is_in$135 ;
  wire \is_in$31 ;
  wire \is_in$75 ;
  input is_out;
  wire is_out;
  wire \is_out$106 ;
  wire \is_out$136 ;
  wire \is_out$33 ;
  wire \is_out$76 ;
  input is_ping;
  wire is_ping;
  wire \is_ping$108 ;
  wire \is_ping$138 ;
  wire \is_ping$37 ;
  wire \is_ping$78 ;
  input is_setup;
  wire is_setup;
  wire \is_setup$107 ;
  wire \is_setup$137 ;
  wire \is_setup$35 ;
  wire \is_setup$77 ;
  output last;
  wire last;
  wire \last$175 ;
  input \last$222 ;
  wire \last$222 ;
  input \last$226 ;
  wire \last$226 ;
  input \last$230 ;
  wire \last$230 ;
  input nak;
  wire nak;
  wire \nak$11 ;
  wire \nak$125 ;
  output \nak$185 ;
  wire \nak$185 ;
  input \nak$186 ;
  wire \nak$186 ;
  input \nak$187 ;
  wire \nak$187 ;
  input \nak$188 ;
  wire \nak$188 ;
  input \nak$189 ;
  wire \nak$189 ;
  wire \nak$65 ;
  wire \nak$95 ;
  output [6:0] new_address;
  reg [6:0] new_address;
  input [6:0] \new_address$156 ;
  wire [6:0] \new_address$156 ;
  wire [6:0] \new_address$157 ;
  wire [6:0] \new_address$158 ;
  wire [6:0] \new_address$159 ;
  output [7:0] new_config;
  reg [7:0] new_config;
  input [7:0] \new_config$166 ;
  wire [7:0] \new_config$166 ;
  wire [7:0] \new_config$167 ;
  wire [7:0] \new_config$168 ;
  wire [7:0] \new_config$169 ;
  input new_frame;
  wire new_frame;
  wire \new_frame$104 ;
  wire \new_frame$134 ;
  wire \new_frame$29 ;
  wire \new_frame$74 ;
  input new_token;
  wire new_token;
  wire \new_token$101 ;
  wire \new_token$131 ;
  wire \new_token$23 ;
  wire \new_token$71 ;
  input next;
  wire next;
  wire \next$111 ;
  wire \next$141 ;
  wire \next$43 ;
  wire \next$81 ;
  input nyet;
  wire nyet;
  wire \nyet$127 ;
  wire \nyet$15 ;
  wire \nyet$67 ;
  wire \nyet$97 ;
  reg [3:0] past_valid = 4'h0;
  input [7:0] payload;
  wire [7:0] payload;
  wire [7:0] \payload$112 ;
  wire [7:0] \payload$142 ;
  output [7:0] \payload$176 ;
  wire [7:0] \payload$176 ;
  wire [7:0] \payload$177 ;
  input [7:0] \payload$223 ;
  wire [7:0] \payload$223 ;
  input [7:0] \payload$227 ;
  wire [7:0] \payload$227 ;
  input [7:0] \payload$231 ;
  wire [7:0] \payload$231 ;
  wire [7:0] \payload$45 ;
  wire [7:0] \payload$82 ;
  input [3:0] pid;
  wire [3:0] pid;
  wire [3:0] \pid$128 ;
  wire [3:0] \pid$17 ;
  wire [3:0] \pid$68 ;
  wire [3:0] \pid$98 ;
  input \port$1761$3 ;
  wire \port$1761$3 ;
  input \port$1909$0 ;
  wire \port$1909$0 ;
  input ready;
  wire ready;
  wire \ready$179 ;
  wire \ready$224 ;
  wire \ready$228 ;
  wire \ready$232 ;
  input ready_for_response;
  wire ready_for_response;
  wire \ready_for_response$102 ;
  wire \ready_for_response$132 ;
  wire \ready_for_response$25 ;
  wire \ready_for_response$72 ;
  input rx_complete;
  wire rx_complete;
  wire \rx_complete$113 ;
  wire \rx_complete$143 ;
  wire \rx_complete$47 ;
  wire \rx_complete$83 ;
  input rx_invalid;
  wire rx_invalid;
  wire \rx_invalid$115 ;
  wire \rx_invalid$145 ;
  wire \rx_invalid$51 ;
  wire \rx_invalid$85 ;
  wire [1:0] rx_pid_toggle;
  wire [1:0] \rx_pid_toggle$116 ;
  wire [1:0] \rx_pid_toggle$146 ;
  wire [1:0] \rx_pid_toggle$53 ;
  wire [1:0] \rx_pid_toggle$86 ;
  input rx_ready_for_response;
  wire rx_ready_for_response;
  wire \rx_ready_for_response$114 ;
  wire \rx_ready_for_response$144 ;
  wire \rx_ready_for_response$49 ;
  wire \rx_ready_for_response$84 ;
  input rx_timeout;
  wire rx_timeout;
  wire \rx_timeout$123 ;
  wire \rx_timeout$63 ;
  wire \rx_timeout$7 ;
  wire \rx_timeout$93 ;
  input [1:0] speed;
  wire [1:0] speed;
  wire [1:0] \speed$117 ;
  wire [1:0] \speed$147 ;
  wire [1:0] \speed$55 ;
  wire [1:0] \speed$87 ;
  input stall;
  wire stall;
  wire \stall$126 ;
  wire \stall$13 ;
  output \stall$190 ;
  wire \stall$190 ;
  input \stall$191 ;
  wire \stall$191 ;
  wire \stall$192 ;
  wire \stall$193 ;
  wire \stall$194 ;
  wire \stall$66 ;
  wire \stall$96 ;
  output start;
  wire start;
  input \start$196 ;
  wire \start$196 ;
  wire \start$197 ;
  wire \start$198 ;
  wire \start$199 ;
  output \start$200 ;
  wire \start$200 ;
  input \start$201 ;
  wire \start$201 ;
  wire \start$202 ;
  wire \start$203 ;
  wire \start$204 ;
  input tx_allowed;
  wire tx_allowed;
  wire \tx_allowed$121 ;
  wire \tx_allowed$3 ;
  wire \tx_allowed$61 ;
  wire \tx_allowed$91 ;
  output [1:0] tx_pid_toggle;
  reg [1:0] tx_pid_toggle;
  wire [1:0] \tx_pid_toggle$215 ;
  input [1:0] \tx_pid_toggle$216 ;
  wire [1:0] \tx_pid_toggle$216 ;
  wire [1:0] \tx_pid_toggle$217 ;
  input [1:0] \tx_pid_toggle$218 ;
  wire [1:0] \tx_pid_toggle$218 ;
  input tx_timeout;
  wire tx_timeout;
  wire \tx_timeout$122 ;
  wire \tx_timeout$5 ;
  wire \tx_timeout$62 ;
  wire \tx_timeout$92 ;
  input usb_clk;
  wire usb_clk;
  input usb_rst;
  wire usb_rst;
  input valid;
  wire valid;
  wire \valid$110 ;
  wire \valid$140 ;
  output \valid$170 ;
  wire \valid$170 ;
  wire \valid$171 ;
  input \valid$209 ;
  wire \valid$209 ;
  input \valid$211 ;
  wire \valid$211 ;
  wire \valid$212 ;
  input \valid$213 ;
  wire \valid$213 ;
  wire \valid$41 ;
  wire \valid$80 ;
  assign \$3  = \$2  | \ack$183 ;
  assign \$5  = \$4  | \nak$187 ;
  assign \$6  = \$5  | \nak$188 ;
  assign \nak$185  = \$6  | \nak$189 ;
  assign \$28  = \valid$209  | past_valid[0];
  assign \$29  = \valid$211  | past_valid[1];
  assign \$31  = \valid$213  | past_valid[3];
  always @(posedge usb_clk)
    past_valid <= \$32 ;
  \LunaUSBSerialDevice.usb0.usb.endpoint_mux.tx_mux  tx_mux (
    .first(first),
    .\first$13 (\first$221 ),
    .\first$14 (\first$225 ),
    .\first$16 (\first$229 ),
    .last(last),
    .\last$18 (\last$222 ),
    .\last$19 (\last$226 ),
    .\last$21 (\last$230 ),
    .payload(\payload$176 ),
    .\payload$10 (\payload$231 ),
    .\payload$7 (\payload$223 ),
    .\payload$8 (\payload$227 ),
    .ready(ready),
    .valid(\valid$209 ),
    .\valid$11 (\valid$170 ),
    .\valid$2 (\valid$211 ),
    .\valid$4 (\valid$213 )
  );
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$19 ) begin end
    \address_changed$154  = 1'h0;
    if (address_changed) begin
      \address_changed$154  = address_changed;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$19 ) begin end
    new_address = 7'h00;
    if (address_changed) begin
      new_address = \new_address$156 ;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$19 ) begin end
    \config_changed$164  = 1'h0;
    if (config_changed) begin
      \config_changed$164  = config_changed;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$19 ) begin end
    new_config = 8'h00;
    if (config_changed) begin
      new_config = \new_config$166 ;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$19 ) begin end
    tx_pid_toggle = 2'h0;
    if (\$28 ) begin
      tx_pid_toggle = { 1'h0, \port$1909$0  };
    end else if (\$29 ) begin
      tx_pid_toggle = \tx_pid_toggle$216 ;
    end else if (\$30 ) begin
      tx_pid_toggle = 2'h0;
    end else if (\$31 ) begin
      tx_pid_toggle = \tx_pid_toggle$218 ;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$19 ) begin end
    \$32  = { \valid$213 , 1'h0, \valid$211 , \valid$209  };
    if (usb_rst) begin
      \$32  = 4'h0;
    end
  end
  assign \crc$1  = crc;
  assign \tx_allowed$3  = tx_allowed;
  assign \tx_timeout$5  = tx_timeout;
  assign \rx_timeout$7  = rx_timeout;
  assign \ack$9  = ack;
  assign \nak$11  = nak;
  assign \stall$13  = stall;
  assign \nyet$15  = nyet;
  assign \pid$17  = pid;
  assign \address$19  = address;
  assign \endpoint$21  = endpoint;
  assign \new_token$23  = new_token;
  assign \ready_for_response$25  = ready_for_response;
  assign \frame$27  = frame;
  assign \new_frame$29  = new_frame;
  assign \is_in$31  = is_in;
  assign \is_out$33  = is_out;
  assign \is_setup$35  = is_setup;
  assign \is_ping$37  = is_ping;
  assign clear_endpoint_halt_out = clear_endpoint_halt_in;
  assign \valid$41  = valid;
  assign \next$43  = next;
  assign \payload$45  = payload;
  assign \rx_complete$47  = rx_complete;
  assign \rx_ready_for_response$49  = rx_ready_for_response;
  assign \rx_invalid$51  = rx_invalid;
  assign rx_pid_toggle = { 1'h0, \port$1761$3  };
  assign \rx_pid_toggle$53  = { 1'h0, \port$1761$3  };
  assign \speed$55  = speed;
  assign \active_config$57  = active_config;
  assign \active_address$59  = active_address;
  assign \crc$60  = crc;
  assign \tx_allowed$61  = tx_allowed;
  assign \tx_timeout$62  = tx_timeout;
  assign \rx_timeout$63  = rx_timeout;
  assign \ack$64  = ack;
  assign \nak$65  = nak;
  assign \stall$66  = stall;
  assign \nyet$67  = nyet;
  assign \pid$68  = pid;
  assign \address$69  = address;
  assign \endpoint$70  = endpoint;
  assign \new_token$71  = new_token;
  assign \ready_for_response$72  = ready_for_response;
  assign \frame$73  = frame;
  assign \new_frame$74  = new_frame;
  assign \is_in$75  = is_in;
  assign \is_out$76  = is_out;
  assign \is_setup$77  = is_setup;
  assign \is_ping$78  = is_ping;
  assign \clear_endpoint_halt_in$79  = clear_endpoint_halt_in;
  assign \valid$80  = valid;
  assign \next$81  = next;
  assign \payload$82  = payload;
  assign \rx_complete$83  = rx_complete;
  assign \rx_ready_for_response$84  = rx_ready_for_response;
  assign \rx_invalid$85  = rx_invalid;
  assign \rx_pid_toggle$86  = { 1'h0, \port$1761$3  };
  assign \speed$87  = speed;
  assign \active_config$88  = active_config;
  assign \active_address$89  = active_address;
  assign \crc$90  = crc;
  assign \tx_allowed$91  = tx_allowed;
  assign \tx_timeout$92  = tx_timeout;
  assign \rx_timeout$93  = rx_timeout;
  assign \ack$94  = ack;
  assign \nak$95  = nak;
  assign \stall$96  = stall;
  assign \nyet$97  = nyet;
  assign \pid$98  = pid;
  assign \address$99  = address;
  assign \endpoint$100  = endpoint;
  assign \new_token$101  = new_token;
  assign \ready_for_response$102  = ready_for_response;
  assign \frame$103  = frame;
  assign \new_frame$104  = new_frame;
  assign \is_in$105  = is_in;
  assign \is_out$106  = is_out;
  assign \is_setup$107  = is_setup;
  assign \is_ping$108  = is_ping;
  assign \clear_endpoint_halt_in$109  = clear_endpoint_halt_in;
  assign \valid$110  = valid;
  assign \next$111  = next;
  assign \payload$112  = payload;
  assign \rx_complete$113  = rx_complete;
  assign \rx_ready_for_response$114  = rx_ready_for_response;
  assign \rx_invalid$115  = rx_invalid;
  assign \rx_pid_toggle$116  = { 1'h0, \port$1761$3  };
  assign \speed$117  = speed;
  assign \active_config$118  = active_config;
  assign \active_address$119  = active_address;
  assign \crc$120  = crc;
  assign \tx_allowed$121  = tx_allowed;
  assign \tx_timeout$122  = tx_timeout;
  assign \rx_timeout$123  = rx_timeout;
  assign \ack$124  = ack;
  assign \nak$125  = nak;
  assign \stall$126  = stall;
  assign \nyet$127  = nyet;
  assign \pid$128  = pid;
  assign \address$129  = address;
  assign \endpoint$130  = endpoint;
  assign \new_token$131  = new_token;
  assign \ready_for_response$132  = ready_for_response;
  assign \frame$133  = frame;
  assign \new_frame$134  = new_frame;
  assign \is_in$135  = is_in;
  assign \is_out$136  = is_out;
  assign \is_setup$137  = is_setup;
  assign \is_ping$138  = is_ping;
  assign \clear_endpoint_halt_in$139  = clear_endpoint_halt_in;
  assign \valid$140  = valid;
  assign \next$141  = next;
  assign \payload$142  = payload;
  assign \rx_complete$143  = rx_complete;
  assign \rx_ready_for_response$144  = rx_ready_for_response;
  assign \rx_invalid$145  = rx_invalid;
  assign \rx_pid_toggle$146  = { 1'h0, \port$1761$3  };
  assign \speed$147  = speed;
  assign \active_config$148  = active_config;
  assign \active_address$149  = active_address;
  assign \address_changed$151  = 1'h0;
  assign \address_changed$152  = 1'h0;
  assign \address_changed$153  = 1'h0;
  assign \new_address$157  = 7'h00;
  assign \new_address$158  = 7'h00;
  assign \new_address$159  = 7'h00;
  assign \config_changed$161  = 1'h0;
  assign \config_changed$162  = 1'h0;
  assign \config_changed$163  = 1'h0;
  assign \new_config$167  = 8'h00;
  assign \new_config$168  = 8'h00;
  assign \new_config$169  = 8'h00;
  assign \valid$171  = \valid$170 ;
  assign \first$173  = first;
  assign \last$175  = last;
  assign \payload$177  = \payload$176 ;
  assign \ready$179  = ready;
  assign \ack$182  = 1'h0;
  assign \ack$184  = 1'h0;
  assign \stall$192  = 1'h0;
  assign \stall$193  = 1'h0;
  assign \stall$194  = 1'h0;
  assign \start$197  = 1'h0;
  assign \start$198  = 1'h0;
  assign \start$199  = 1'h0;
  assign \start$202  = 1'h0;
  assign \start$203  = 1'h0;
  assign \start$204  = 1'h0;
  assign \clear_endpoint_halt_out$206  = 6'h00;
  assign \clear_endpoint_halt_out$207  = 6'h00;
  assign \clear_endpoint_halt_out$208  = 6'h00;
  assign \valid$212  = 1'h0;
  assign \tx_pid_toggle$215  = { 1'h0, \port$1909$0  };
  assign \tx_pid_toggle$217  = 2'h0;
  assign \ready$224  = ready;
  assign \ready$228  = ready;
  assign \ready$232  = ready;
  assign \clear_endpoint_halt_in.enable  = clear_endpoint_halt_in[0];
  assign \clear_endpoint_halt_in.direction  = clear_endpoint_halt_in[1];
  assign \clear_endpoint_halt_in.number  = clear_endpoint_halt_in[5:2];
  assign \clear_endpoint_halt_out.enable  = clear_endpoint_halt_in[0];
  assign \clear_endpoint_halt_out.direction  = clear_endpoint_halt_in[1];
  assign \clear_endpoint_halt_out.number  = clear_endpoint_halt_in[5:2];
  assign \clear_endpoint_halt_in$79.enable  = clear_endpoint_halt_in[0];
  assign \clear_endpoint_halt_in$79.direction  = clear_endpoint_halt_in[1];
  assign \clear_endpoint_halt_in$79.number  = clear_endpoint_halt_in[5:2];
  assign \clear_endpoint_halt_in$109.enable  = clear_endpoint_halt_in[0];
  assign \clear_endpoint_halt_in$109.direction  = clear_endpoint_halt_in[1];
  assign \clear_endpoint_halt_in$109.number  = clear_endpoint_halt_in[5:2];
  assign \clear_endpoint_halt_in$139.enable  = clear_endpoint_halt_in[0];
  assign \clear_endpoint_halt_in$139.direction  = clear_endpoint_halt_in[1];
  assign \clear_endpoint_halt_in$139.number  = clear_endpoint_halt_in[5:2];
  assign \clear_endpoint_halt_out$205.enable  = \clear_endpoint_halt_out$205 [0];
  assign \clear_endpoint_halt_out$205.direction  = \clear_endpoint_halt_out$205 [1];
  assign \clear_endpoint_halt_out$205.number  = \clear_endpoint_halt_out$205 [5:2];
  assign \clear_endpoint_halt_out$206.enable  = 1'h0;
  assign \clear_endpoint_halt_out$206.direction  = 1'h0;
  assign \clear_endpoint_halt_out$206.number  = 4'h0;
  assign \clear_endpoint_halt_out$207.enable  = 1'h0;
  assign \clear_endpoint_halt_out$207.direction  = 1'h0;
  assign \clear_endpoint_halt_out$207.number  = 4'h0;
  assign \clear_endpoint_halt_out$208.enable  = 1'h0;
  assign \clear_endpoint_halt_out$208.direction  = 1'h0;
  assign \clear_endpoint_halt_out$208.number  = 4'h0;
  assign clear_endpoint_halt_in[5:2] = \$27 ;
  assign clear_endpoint_halt_in[1] = \$23 ;
  assign clear_endpoint_halt_in[0] = \$19 ;
  assign \$1  = \ack$181 ;
  assign \$2  = \ack$181 ;
  assign \ack$180  = \$3 ;
  assign \$4  = \nak$186 ;
  assign \$7  = \stall$191 ;
  assign \$8  = \stall$191 ;
  assign \$9  = \stall$191 ;
  assign \stall$190  = \stall$191 ;
  assign \$10  = \start$196 ;
  assign \$11  = \start$196 ;
  assign \$12  = \start$196 ;
  assign start = \start$196 ;
  assign \$13  = \start$201 ;
  assign \$14  = \start$201 ;
  assign \$15  = \start$201 ;
  assign \start$200  = \start$201 ;
  assign \$16  = \clear_endpoint_halt_out$205 [0];
  assign \$17  = \clear_endpoint_halt_out$205 [0];
  assign \$18  = \clear_endpoint_halt_out$205 [0];
  assign \$19  = \clear_endpoint_halt_out$205 [0];
  assign \$20  = \clear_endpoint_halt_out$205 [1];
  assign \$21  = \clear_endpoint_halt_out$205 [1];
  assign \$22  = \clear_endpoint_halt_out$205 [1];
  assign \$23  = \clear_endpoint_halt_out$205 [1];
  assign \$24  = \clear_endpoint_halt_out$205 [5:2];
  assign \$25  = \clear_endpoint_halt_out$205 [5:2];
  assign \$26  = \clear_endpoint_halt_out$205 [5:2];
  assign \$27  = \clear_endpoint_halt_out$205 [5:2];
  assign \$30  = past_valid[2];
endmodule

module \LunaUSBSerialDevice.usb0.usb.endpoint_mux.tx_mux (first, last, \payload$8 , \payload$10 , ready, payload, valid, \first$13 , \last$18 , \payload$7 , \first$14 , \valid$2 , \last$19 , \first$16 , \valid$4 , \last$21 , \valid$11 );
  reg \$auto$verilog_backend.cc:2373:dump_module$20  = 0;
  wire \$1 ;
  wire \$2 ;
  wire \$3 ;
  wire \$4 ;
  wire \$5 ;
  wire \$6 ;
  wire \$7 ;
  wire \$8 ;
  wire \$9 ;
  output first;
  wire first;
  input \first$13 ;
  wire \first$13 ;
  input \first$14 ;
  wire \first$14 ;
  wire \first$15 ;
  input \first$16 ;
  wire \first$16 ;
  wire [3:0] i;
  output last;
  wire last;
  input \last$18 ;
  wire \last$18 ;
  input \last$19 ;
  wire \last$19 ;
  wire \last$20 ;
  input \last$21 ;
  wire \last$21 ;
  wire [1:0] o;
  output [7:0] payload;
  reg [7:0] payload;
  input [7:0] \payload$10 ;
  wire [7:0] \payload$10 ;
  input [7:0] \payload$7 ;
  wire [7:0] \payload$7 ;
  input [7:0] \payload$8 ;
  wire [7:0] \payload$8 ;
  wire [7:0] \payload$9 ;
  input ready;
  wire ready;
  wire \ready$23 ;
  wire \ready$24 ;
  wire \ready$25 ;
  wire \ready$26 ;
  input valid;
  wire valid;
  output \valid$11 ;
  wire \valid$11 ;
  input \valid$2 ;
  wire \valid$2 ;
  wire \valid$3 ;
  input \valid$4 ;
  wire \valid$4 ;
  assign \$2  = \$1  | \valid$2 ;
  assign \valid$11  = \$3  | \valid$4 ;
  assign \$5  = \$4  | \first$14 ;
  assign first = \$6  | \first$16 ;
  assign \$8  = \$7  | \last$19 ;
  assign last = \$9  | \last$21 ;
  \LunaUSBSerialDevice.usb0.usb.endpoint_mux.tx_mux.encoder  encoder (
    .i(i),
    .o(o)
  );
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$20 ) begin end
    (* full_case = 32'd1 *)
    casez (o)
      2'h0:
          payload = \payload$7 ;
      2'h1:
          payload = \payload$8 ;
      2'h2:
          payload = 8'h00;
      2'h3:
          payload = \payload$10 ;
    endcase
  end
  assign \valid$3  = 1'h0;
  assign \payload$9  = 8'h00;
  assign \first$15  = 1'h0;
  assign \last$20  = 1'h0;
  assign \ready$23  = ready;
  assign \ready$24  = ready;
  assign \ready$25  = ready;
  assign \ready$26  = ready;
  assign i[3] = \valid$4 ;
  assign i[2] = 1'h0;
  assign i[1] = \valid$2 ;
  assign i[0] = valid;
  assign \$1  = valid;
  assign \$3  = \$2 ;
  assign \$4  = \first$13 ;
  assign \$6  = \$5 ;
  assign \$7  = \last$18 ;
  assign \$9  = \$8 ;
endmodule

module \LunaUSBSerialDevice.usb0.usb.endpoint_mux.tx_mux.encoder (o, i);
  reg \$auto$verilog_backend.cc:2373:dump_module$21  = 0;
  input [3:0] i;
  wire [3:0] i;
  reg n;
  output [1:0] o;
  reg [1:0] o;
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$21 ) begin end
    o = 2'h0;
    casez (i)
      4'h1:
          o = 2'h0;
      4'h2:
          o = 2'h1;
      4'h4:
          o = 2'h2;
      4'h8:
          o = 2'h3;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$21 ) begin end
    n = 1'h0;
    (* full_case = 32'd1 *)
    casez (i)
      4'h1:
          /* empty */;
      4'h2:
          /* empty */;
      4'h4:
          /* empty */;
      4'h8:
          /* empty */;
      default:
          n = 1'h1;
    endcase
  end
endmodule

module \LunaUSBSerialDevice.usb0.usb.handshake_detector (usb_rst, rx_valid, rx_active, rx_data, ack, nak, stall, nyet, usb_clk);
  reg \$auto$verilog_backend.cc:2373:dump_module$22  = 0;
  wire \$1 ;
  wire \$10 ;
  wire \$11 ;
  wire \$12 ;
  wire \$13 ;
  reg \$14 ;
  reg \$15 ;
  reg \$16 ;
  reg \$17 ;
  reg [1:0] \$18 ;
  reg [3:0] \$19 ;
  wire [3:0] \$2 ;
  wire \$3 ;
  wire \$4 ;
  wire \$5 ;
  wire \$6 ;
  wire \$7 ;
  wire \$8 ;
  wire \$9 ;
  output ack;
  reg ack = 1'h0;
  reg [3:0] active_pid = 4'h0;
  (* enum_base_type = "fsmState" *)
  (* enum_value_00 = "IDLE/0" *)
  (* enum_value_01 = "READ_PID/1" *)
  (* enum_value_10 = "AWAIT_COMPLETION/2" *)
  (* enum_value_11 = "IRRELEVANT/3" *)
  reg [1:0] fsm_state = 2'h0;
  output nak;
  reg nak = 1'h0;
  output nyet;
  reg nyet = 1'h0;
  input rx_active;
  wire rx_active;
  input [7:0] rx_data;
  wire [7:0] rx_data;
  input rx_valid;
  wire rx_valid;
  output stall;
  reg stall = 1'h0;
  input usb_clk;
  wire usb_clk;
  input usb_rst;
  wire usb_rst;
  assign \$1  = ~ rx_active;
  assign \$2  = ~ rx_data[7:4];
  assign \$3  = rx_data[3:0] == \$2 ;
  assign \$4  = ~ rx_active;
  assign \$5  = active_pid == 2'h2;
  assign \$6  = active_pid == 4'ha;
  assign \$7  = active_pid == 4'he;
  assign \$8  = active_pid == 3'h6;
  assign \$9  = ~ rx_active;
  assign \$10  = ! fsm_state;
  assign \$11  = fsm_state == 1'h1;
  assign \$12  = fsm_state == 2'h2;
  assign \$13  = fsm_state == 2'h3;
  always @(posedge usb_clk)
    ack <= \$14 ;
  always @(posedge usb_clk)
    nak <= \$15 ;
  always @(posedge usb_clk)
    stall <= \$16 ;
  always @(posedge usb_clk)
    nyet <= \$17 ;
  always @(posedge usb_clk)
    fsm_state <= \$18 ;
  always @(posedge usb_clk)
    active_pid <= \$19 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$22 ) begin end
    \$14  = 1'h0;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          /* empty */;
      2'h2:
          if (\$4 ) begin
            \$14  = \$5 ;
          end
    endcase
    if (usb_rst) begin
      \$14  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$22 ) begin end
    \$15  = 1'h0;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          /* empty */;
      2'h2:
          if (\$4 ) begin
            \$15  = \$6 ;
          end
    endcase
    if (usb_rst) begin
      \$15  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$22 ) begin end
    \$16  = 1'h0;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          /* empty */;
      2'h2:
          if (\$4 ) begin
            \$16  = \$7 ;
          end
    endcase
    if (usb_rst) begin
      \$16  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$22 ) begin end
    \$17  = 1'h0;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          /* empty */;
      2'h2:
          if (\$4 ) begin
            \$17  = \$8 ;
          end
    endcase
    if (usb_rst) begin
      \$17  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$22 ) begin end
    \$18  = fsm_state;
    (* full_case = 32'd1 *)
    casez (fsm_state)
      2'h0:
          if (rx_active) begin
            \$18  = 2'h1;
          end
      2'h1:
          if (\$1 ) begin
            \$18  = 2'h0;
          end else if (rx_valid) begin
            (* full_case = 32'd1 *)
            if (\$3 ) begin
              \$18  = 2'h2;
            end else begin
              \$18  = 2'h3;
            end
          end
      2'h2:
          if (\$4 ) begin
            \$18  = 2'h0;
          end else if (rx_valid) begin
            \$18  = 2'h3;
          end
      2'h3:
          if (\$9 ) begin
            \$18  = 2'h0;
          end
    endcase
    if (usb_rst) begin
      \$18  = 2'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$22 ) begin end
    \$19  = active_pid;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          if (\$1 ) begin
          end else if (rx_valid) begin
            if (\$3 ) begin
              \$19  = rx_data[3:0];
            end
          end
    endcase
    if (usb_rst) begin
      \$19  = 4'h0;
    end
  end
endmodule

module \LunaUSBSerialDevice.usb0.usb.handshake_generator (usb_rst, issue_ack, issue_nak, issue_stall, ready, valid, data, usb_clk);
  reg \$auto$verilog_backend.cc:2373:dump_module$23  = 0;
  wire \$1 ;
  wire \$2 ;
  reg [7:0] \$3 ;
  reg \$4 ;
  output [7:0] data;
  reg [7:0] data = 8'h00;
  (* enum_base_type = "fsmState" *)
  (* enum_value_0 = "IDLE/0" *)
  (* enum_value_1 = "TRANSMIT/1" *)
  reg fsm_state = 1'h0;
  input issue_ack;
  wire issue_ack;
  input issue_nak;
  wire issue_nak;
  input issue_stall;
  wire issue_stall;
  input ready;
  wire ready;
  input usb_clk;
  wire usb_clk;
  input usb_rst;
  wire usb_rst;
  output valid;
  reg valid;
  always @(posedge usb_clk)
    fsm_state <= \$4 ;
  assign \$1  = ! fsm_state;
  always @(posedge usb_clk)
    data <= \$3 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$23 ) begin end
    \$4  = fsm_state;
    (* full_case = 32'd1 *)
    casez (fsm_state)
      1'h0:
        begin
          if (issue_ack) begin
            \$4  = 1'h1;
          end
          if (issue_nak) begin
            \$4  = 1'h1;
          end
          if (issue_stall) begin
            \$4  = 1'h1;
          end
        end
      1'h1:
          if (ready) begin
            \$4  = 1'h0;
          end
    endcase
    if (usb_rst) begin
      \$4  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$23 ) begin end
    (* full_case = 32'd1 *)
    casez (fsm_state)
      1'h0:
          valid = 1'h0;
      1'h1:
          valid = 1'h1;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$23 ) begin end
    \$3  = data;
    casez (fsm_state)
      1'h0:
        begin
          if (issue_ack) begin
            \$3  = 8'hd2;
          end
          if (issue_nak) begin
            \$3  = 8'h5a;
          end
          if (issue_stall) begin
            \$3  = 8'h1e;
          end
        end
    endcase
    if (usb_rst) begin
      \$3  = 8'h00;
    end
  end
  assign \$2  = fsm_state;
endmodule

module \LunaUSBSerialDevice.usb0.usb.receiver (usb_rst, rx_valid, crc, rx_active, rx_data, packet_complete, crc_mismatch, active_pid, next, start, valid, payload, \start$19 , ready_for_response, tx_allowed, usb_clk);
  reg \$auto$verilog_backend.cc:2373:dump_module$24  = 0;
  wire \$1 ;
  wire \$10 ;
  wire \$11 ;
  wire \$12 ;
  wire \$13 ;
  wire \$14 ;
  wire \$15 ;
  wire \$16 ;
  wire \$17 ;
  wire \$18 ;
  wire \$19 ;
  wire [3:0] \$2 ;
  reg \$20 ;
  reg \$21 ;
  reg [2:0] \$22 ;
  reg [3:0] \$23 ;
  reg [15:0] \$24 ;
  reg [15:0] \$25 ;
  reg [15:0] \$26 ;
  reg [3:0] \$27 ;
  wire \$3 ;
  wire \$4 ;
  wire \$5 ;
  wire \$6 ;
  wire \$7 ;
  wire \$8 ;
  wire \$9 ;
  output [3:0] active_pid;
  reg [3:0] active_pid = 4'h0;
  input [15:0] crc;
  wire [15:0] crc;
  output crc_mismatch;
  reg crc_mismatch = 1'h0;
  reg [15:0] data_pipeline = 16'h0000;
  (* enum_base_type = "fsmState" *)
  (* enum_value_000 = "IDLE/0" *)
  (* enum_value_001 = "READ_PID/1" *)
  (* enum_value_010 = "RECEIVE_FIRST_BYTE/2" *)
  (* enum_value_011 = "IRRELEVANT/3" *)
  (* enum_value_100 = "RECEIVE_SECOND_BYTE/4" *)
  (* enum_value_101 = "RECEIVE_AND_EMIT/5" *)
  (* enum_value_110 = "INTERPACKET_DELAY/6" *)
  reg [2:0] fsm_state = 3'h0;
  reg [15:0] last_byte_crc = 16'h0000;
  reg [15:0] last_word_crc = 16'h0000;
  output next;
  reg next;
  output packet_complete;
  reg packet_complete = 1'h0;
  reg [3:0] packet_id = 4'h0;
  output [7:0] payload;
  reg [7:0] payload;
  output ready_for_response;
  reg ready_for_response;
  input rx_active;
  wire rx_active;
  input [7:0] rx_data;
  wire [7:0] rx_data;
  input rx_valid;
  wire rx_valid;
  output start;
  reg start;
  output \start$19 ;
  reg \start$19 ;
  input tx_allowed;
  wire tx_allowed;
  input usb_clk;
  wire usb_clk;
  input usb_rst;
  wire usb_rst;
  output valid;
  reg valid;
  assign \$1  = ~ rx_active;
  assign \$2  = ~ rx_data[7:4];
  assign \$3  = rx_data[3:0] == \$2 ;
  assign \$4  = rx_data[1:0] == 2'h3;
  assign \$5  = \$3  & \$4 ;
  assign \$6  = ~ rx_active;
  assign \$7  = ~ rx_active;
  assign \$8  = ~ rx_active;
  assign \$9  = last_word_crc == data_pipeline;
  assign \$10  = ~ rx_active;
  assign \$11  = ~ rx_active;
  assign \$12  = last_word_crc == data_pipeline;
  assign \$13  = ! fsm_state;
  assign \$14  = fsm_state == 1'h1;
  assign \$15  = fsm_state == 2'h2;
  assign \$16  = fsm_state == 2'h3;
  assign \$17  = fsm_state == 3'h4;
  assign \$18  = fsm_state == 3'h5;
  assign \$19  = fsm_state == 3'h6;
  always @(posedge usb_clk)
    packet_complete <= \$20 ;
  always @(posedge usb_clk)
    crc_mismatch <= \$21 ;
  always @(posedge usb_clk)
    fsm_state <= \$22 ;
  always @(posedge usb_clk)
    active_pid <= \$23 ;
  always @(posedge usb_clk)
    data_pipeline <= \$24 ;
  always @(posedge usb_clk)
    last_byte_crc <= \$25 ;
  always @(posedge usb_clk)
    last_word_crc <= \$26 ;
  always @(posedge usb_clk)
    packet_id <= \$27 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$24 ) begin end
    \$20  = 1'h0;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h4:
          /* empty */;
      3'h5:
          if (\$8 ) begin
            if (\$9 ) begin
              \$20  = 1'h1;
            end
          end
    endcase
    if (usb_rst) begin
      \$20  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$24 ) begin end
    \$21  = 1'h0;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h4:
          /* empty */;
      3'h5:
          if (\$8 ) begin
            (* full_case = 32'd1 *)
            if (\$9 ) begin
            end else begin
              \$21  = 1'h1;
            end
          end
    endcase
    if (usb_rst) begin
      \$21  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$24 ) begin end
    \$22  = fsm_state;
    casez (fsm_state)
      3'h0:
          if (rx_active) begin
            \$22  = 3'h1;
          end
      3'h1:
          if (\$1 ) begin
            \$22  = 3'h0;
          end else if (rx_valid) begin
            (* full_case = 32'd1 *)
            if (\$5 ) begin
              \$22  = 3'h2;
            end else begin
              \$22  = 3'h3;
            end
          end
      3'h2:
        begin
          if (rx_valid) begin
            \$22  = 3'h4;
          end
          if (\$6 ) begin
            \$22  = 3'h0;
          end
        end
      3'h4:
          if (rx_valid) begin
            \$22  = 3'h5;
          end else if (\$7 ) begin
            \$22  = 3'h0;
          end
      3'h5:
          if (\$8 ) begin
            (* full_case = 32'd1 *)
            if (\$9 ) begin
              \$22  = 3'h6;
            end else begin
              \$22  = 3'h0;
            end
          end
      3'h6:
          if (tx_allowed) begin
            \$22  = 3'h0;
          end
      3'h3:
          if (\$10 ) begin
            \$22  = 3'h0;
          end
    endcase
    if (usb_rst) begin
      \$22  = 3'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$24 ) begin end
    \$23  = active_pid;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          if (\$1 ) begin
          end else if (rx_valid) begin
            if (\$5 ) begin
              \$23  = rx_data[3:0];
            end
          end
    endcase
    if (usb_rst) begin
      \$23  = 4'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$24 ) begin end
    \$24  = data_pipeline;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          if (rx_valid) begin
            \$24 [15:8] = rx_data;
          end
      3'h4:
          if (rx_valid) begin
            \$24 [15:8] = rx_data;
            \$24 [7:0] = data_pipeline[15:8];
          end
      3'h5:
          if (rx_valid) begin
            \$24 [15:8] = rx_data;
            \$24 [7:0] = data_pipeline[15:8];
          end
    endcase
    if (usb_rst) begin
      \$24  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$24 ) begin end
    \$25  = last_byte_crc;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          if (rx_valid) begin
            \$25  = crc;
          end
      3'h4:
          if (rx_valid) begin
            \$25  = crc;
          end
      3'h5:
          if (rx_valid) begin
            \$25  = crc;
          end
    endcase
    if (usb_rst) begin
      \$25  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$24 ) begin end
    \$26  = last_word_crc;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h4:
          if (rx_valid) begin
            \$26  = last_byte_crc;
          end
      3'h5:
          if (rx_valid) begin
            \$26  = last_byte_crc;
          end
    endcase
    if (usb_rst) begin
      \$26  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$24 ) begin end
    \$27  = packet_id;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h4:
          /* empty */;
      3'h5:
          if (\$8 ) begin
            if (\$9 ) begin
              \$27  = active_pid;
            end
          end
    endcase
    if (usb_rst) begin
      \$27  = 4'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$24 ) begin end
    next = 1'h0;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h4:
          /* empty */;
      3'h5:
          if (rx_valid) begin
            next = 1'h1;
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$24 ) begin end
    start = 1'h0;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          start = 1'h1;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$24 ) begin end
    valid = 1'h0;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h4:
          /* empty */;
      3'h5:
          valid = 1'h1;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$24 ) begin end
    payload = 8'h00;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h4:
          /* empty */;
      3'h5:
          if (rx_valid) begin
            payload = data_pipeline[7:0];
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$24 ) begin end
    \start$19  = 1'h0;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h4:
          /* empty */;
      3'h5:
          if (\$11 ) begin
            if (\$12 ) begin
              \start$19  = 1'h1;
            end
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$24 ) begin end
    ready_for_response = 1'h0;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h4:
          /* empty */;
      3'h5:
          /* empty */;
      3'h6:
          if (tx_allowed) begin
            ready_for_response = 1'h1;
          end
    endcase
  end
endmodule

module \LunaUSBSerialDevice.usb0.usb.reset_sequencer (\port$0$3 , usb_clk, usb_rst, vbus_connected, disconnect, low_speed_only, full_speed_only, current_speed, operating_mode, termination_select, bus_reset, valid, data, suspended, \port$0$2 );
  reg \$auto$verilog_backend.cc:2373:dump_module$25  = 0;
  wire [18:0] \$1 ;
  wire \$10 ;
  wire \$11 ;
  wire \$12 ;
  wire \$13 ;
  wire \$14 ;
  wire \$15 ;
  wire \$16 ;
  wire \$17 ;
  wire \$18 ;
  wire \$19 ;
  wire [18:0] \$2 ;
  wire \$20 ;
  wire \$21 ;
  wire \$22 ;
  wire \$23 ;
  wire \$24 ;
  wire \$25 ;
  wire \$26 ;
  wire [2:0] \$27 ;
  wire \$28 ;
  wire \$29 ;
  wire \$3 ;
  wire \$30 ;
  wire \$31 ;
  wire \$32 ;
  wire \$33 ;
  wire \$34 ;
  wire \$35 ;
  wire \$36 ;
  wire \$37 ;
  wire \$38 ;
  wire \$39 ;
  wire \$4 ;
  wire \$40 ;
  wire \$41 ;
  wire \$42 ;
  wire \$43 ;
  wire \$44 ;
  wire \$45 ;
  wire \$46 ;
  wire \$47 ;
  wire \$48 ;
  wire \$49 ;
  wire \$5 ;
  wire \$50 ;
  wire \$51 ;
  wire \$52 ;
  wire \$53 ;
  wire \$54 ;
  wire \$55 ;
  wire \$56 ;
  wire \$57 ;
  wire \$58 ;
  wire \$59 ;
  wire \$6 ;
  wire \$60 ;
  wire \$61 ;
  wire \$62 ;
  wire \$63 ;
  wire \$64 ;
  wire \$65 ;
  wire \$66 ;
  wire \$67 ;
  wire \$68 ;
  wire \$69 ;
  wire \$7 ;
  wire \$70 ;
  wire \$71 ;
  reg [17:0] \$72 ;
  reg [17:0] \$73 ;
  reg [1:0] \$74 ;
  reg [3:0] \$75 ;
  reg \$76 ;
  reg [1:0] \$77 ;
  reg \$78 ;
  reg [1:0] \$79 ;
  wire \$8 ;
  reg \$80 ;
  wire \$9 ;
  wire bus_busy;
  reg bus_idle;
  output bus_reset;
  reg bus_reset;
  output [1:0] current_speed;
  reg [1:0] current_speed = 2'h1;
  output [7:0] data;
  reg [7:0] data;
  input disconnect;
  wire disconnect;
  (* enum_base_type = "fsmState" *)
  (* enum_value_0000 = "INITIALIZE/0" *)
  (* enum_value_0001 = "LS_FS_NON_RESET/1" *)
  (* enum_value_0010 = "DISCONNECT/2" *)
  (* enum_value_0011 = "START_HS_DETECTION/3" *)
  (* enum_value_0100 = "SUSPENDED/4" *)
  (* enum_value_0101 = "HS_NON_RESET/5" *)
  (* enum_value_0110 = "IS_LOW_OR_FULL_SPEED/6" *)
  (* enum_value_0111 = "DETECT_HS_SUSPEND/7" *)
  (* enum_value_1000 = "PREPARE_FOR_CHIRP_0/8" *)
  (* enum_value_1001 = "PREPARE_FOR_CHIRP_1/9" *)
  (* enum_value_1010 = "DEVICE_CHIRP/10" *)
  (* enum_value_1011 = "AWAIT_HOST_K/11" *)
  (* enum_value_1100 = "IN_HOST_K/12" *)
  (* enum_value_1101 = "AWAIT_HOST_J/13" *)
  (* enum_value_1110 = "IN_HOST_J/14" *)
  (* enum_value_1111 = "IS_HIGH_SPEED/15" *)
  reg [3:0] fsm_state = 4'h0;
  input full_speed_only;
  wire full_speed_only;
  wire [1:0] line_state;
  reg [17:0] line_state_time = 18'h00000;
  input low_speed_only;
  wire low_speed_only;
  output [1:0] operating_mode;
  reg [1:0] operating_mode = 2'h0;
  input \port$0$2 ;
  wire \port$0$2 ;
  input \port$0$3 ;
  wire \port$0$3 ;
  output suspended;
  reg suspended;
  reg tddis = 1'h0;
  output termination_select;
  reg termination_select = 1'h1;
  reg [17:0] timer = 18'h00000;
  input usb_clk;
  wire usb_clk;
  input usb_rst;
  wire usb_rst;
  output valid;
  reg valid;
  reg [1:0] valid_pairs = 2'h0;
  input vbus_connected;
  wire vbus_connected;
  reg was_hs_pre_suspend = 1'h0;
  assign \$20  = line_state_time == 8'h96;
  assign \$21  = { \port$0$2 , \port$0$3  } != 2'h2;
  assign \$22  = timer == 18'h249f0;
  assign \$23  = timer == 18'h249f0;
  assign \$24  = { \port$0$2 , \port$0$3  } == 1'h1;
  assign \$25  = line_state_time == 8'h96;
  assign \$26  = valid_pairs == 2'h2;
  assign \$27  = valid_pairs + 1'h1;
  assign \$28  = { \port$0$2 , \port$0$3  } != 1'h1;
  assign \$29  = timer == 18'h249f0;
  assign \$30  = | { \port$0$2 , \port$0$3  };
  assign \$31  = timer == 14'h2ee0;
  assign \$32  = { \port$0$2 , \port$0$3  } == 1'h1;
  assign \$33  = { \port$0$2 , \port$0$3  } == 1'h1;
  assign \$34  = low_speed_only & \$33 ;
  assign \$35  = ~ low_speed_only;
  assign \$36  = { \port$0$2 , \port$0$3  } == 2'h2;
  assign \$37  = \$35  & \$36 ;
  assign \$38  = \$34  | \$37 ;
  assign \$39  = | { \port$0$2 , \port$0$3  };
  assign \$40  = timer == 8'h96;
  assign \$41  = low_speed_only | full_speed_only;
  assign \$42  = timer == 8'h96;
  assign \$43  = ~ disconnect;
  assign \$44  = \$43  & tddis;
  assign \$45  = ! current_speed;
  assign \$46  = current_speed == 1'h1;
  assign \$47  = ! { \port$0$2 , \port$0$3  };
  assign \$48  = { \port$0$2 , \port$0$3  } == 1'h1;
  assign \$49  = { \port$0$2 , \port$0$3  } == 2'h2;
  assign \$50  = ~ vbus_connected;
  assign \$51  = timer == 9'h12c;
  assign \$52  = ~ vbus_connected;
  assign \$53  = timer == 14'h2ee0;
  assign \$54  = { \port$0$2 , \port$0$3  } == 1'h1;
  assign \$55  = timer == 8'h96;
  assign \$56  = ! fsm_state;
  assign \$57  = fsm_state == 1'h1;
  assign \$58  = fsm_state == 2'h2;
  assign \$59  = fsm_state == 2'h3;
  assign \$60  = fsm_state == 3'h4;
  assign \$61  = fsm_state == 3'h5;
  assign \$62  = fsm_state == 3'h6;
  assign \$63  = fsm_state == 3'h7;
  assign \$64  = fsm_state == 4'h8;
  assign \$65  = fsm_state == 4'h9;
  assign \$66  = fsm_state == 4'ha;
  assign \$67  = fsm_state == 4'hb;
  assign \$68  = fsm_state == 4'hc;
  assign \$69  = fsm_state == 4'hd;
  assign \$70  = fsm_state == 4'he;
  assign \$71  = fsm_state == 4'hf;
  always @(posedge usb_clk)
    timer <= \$72 ;
  always @(posedge usb_clk)
    line_state_time <= \$73 ;
  always @(posedge usb_clk)
    current_speed <= \$74 ;
  always @(posedge usb_clk)
    fsm_state <= \$75 ;
  always @(posedge usb_clk)
    was_hs_pre_suspend <= \$76 ;
  always @(posedge usb_clk)
    operating_mode <= \$77 ;
  always @(posedge usb_clk)
    termination_select <= \$78 ;
  always @(posedge usb_clk)
    valid_pairs <= \$79 ;
  always @(posedge usb_clk)
    tddis <= \$80 ;
  assign \$1  = timer + 1'h1;
  assign \$2  = line_state_time + 1'h1;
  assign \$3  = | { \port$0$2 , \port$0$3  };
  assign \$4  = ~ vbus_connected;
  assign \$5  = timer == 9'h12c;
  assign \$6  = ~ low_speed_only;
  assign \$7  = ~ full_speed_only;
  assign \$8  = \$6  & \$7 ;
  assign \$9  = ~ bus_idle;
  assign \$10  = line_state_time == 18'h2bf20;
  assign \$11  = | { \port$0$2 , \port$0$3  };
  assign \$12  = ~ vbus_connected;
  assign \$13  = timer == 18'h2bf20;
  assign \$14  = full_speed_only | low_speed_only;
  assign \$17  = timer == 17'h1d4c0;
  assign \$18  = timer == 18'h249f0;
  assign \$19  = { \port$0$2 , \port$0$3  } == 2'h2;
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$25 ) begin end
    \$72  = \$1 [17:0];
    casez (fsm_state)
      4'h0:
          \$72  = 18'h00000;
      4'h1:
        begin
          if (\$3 ) begin
            \$72  = 18'h00000;
          end
          if (\$4 ) begin
            \$72  = 18'h00000;
          end
        end
      4'h5:
        begin
          if (\$11 ) begin
            \$72  = 18'h00000;
          end
          if (\$13 ) begin
            \$72  = 18'h00000;
          end
        end
      4'h3:
          \$72  = 18'h00000;
      4'h8:
          /* empty */;
      4'h9:
          /* empty */;
      4'ha:
          if (\$17 ) begin
            \$72  = 18'h00000;
          end
      4'hb:
          /* empty */;
      4'hc:
          /* empty */;
      4'hd:
          /* empty */;
      4'he:
          /* empty */;
      4'hf:
          \$72  = 18'h00000;
      4'h6:
          if (\$30 ) begin
            \$72  = 18'h00000;
          end
      4'h7:
          if (\$31 ) begin
            \$72  = 18'h00000;
          end
      4'h4:
        begin
          if (\$38 ) begin
            \$72  = 18'h00000;
            (* full_case = 32'd1 *)
            if (was_hs_pre_suspend) begin
            end else begin
              \$72  = 18'h00000;
            end
          end
          if (\$39 ) begin
            \$72  = 18'h00000;
          end
          if (\$40 ) begin
            \$72  = 18'h00000;
            if (\$41 ) begin
              \$72  = 18'h00000;
            end
          end
        end
    endcase
    if (usb_rst) begin
      \$72  = 18'h00000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$25 ) begin end
    \$73  = \$2 [17:0];
    casez (fsm_state)
      4'h0:
          \$73  = 18'h00000;
      4'h1:
          if (\$9 ) begin
            \$73  = 18'h00000;
          end
      4'h5:
          /* empty */;
      4'h3:
          /* empty */;
      4'h8:
          /* empty */;
      4'h9:
          /* empty */;
      4'ha:
          /* empty */;
      4'hb:
          if (\$19 ) begin
            \$73  = 18'h00000;
          end
      4'hc:
          /* empty */;
      4'hd:
          if (\$24 ) begin
            \$73  = 18'h00000;
          end
      4'he:
          /* empty */;
      4'hf:
          \$73  = 18'h00000;
      4'h6:
          if (\$30 ) begin
            \$73  = 18'h00000;
          end
      4'h7:
          /* empty */;
      4'h4:
        begin
          if (\$38 ) begin
            (* full_case = 32'd1 *)
            if (was_hs_pre_suspend) begin
            end else begin
              \$73  = 18'h00000;
            end
          end
          if (\$40 ) begin
            if (\$41 ) begin
              \$73  = 18'h00000;
            end
          end
        end
    endcase
    if (usb_rst) begin
      \$73  = 18'h00000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$25 ) begin end
    \$74  = current_speed;
    (* full_case = 32'd1 *)
    casez (fsm_state)
      4'h0:
          if (low_speed_only) begin
            \$74  = 2'h2;
          end
      4'h1:
          /* empty */;
      4'h5:
          if (\$13 ) begin
            \$74  = 2'h1;
          end
      4'h3:
          \$74  = 2'h0;
      4'h8:
          /* empty */;
      4'h9:
          /* empty */;
      4'ha:
          /* empty */;
      4'hb:
          /* empty */;
      4'hc:
          /* empty */;
      4'hd:
          /* empty */;
      4'he:
          /* empty */;
      4'hf:
          \$74  = 2'h0;
      4'h6:
          (* full_case = 32'd1 *)
          if (low_speed_only) begin
            \$74  = 2'h2;
          end else begin
            \$74  = 2'h1;
          end
      4'h7:
          /* empty */;
      4'h4:
          /* empty */;
      4'h2:
          if (\$44 ) begin
            \$74  = 2'h1;
          end
    endcase
    if (usb_rst) begin
      \$74  = 2'h1;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$25 ) begin end
    \$75  = fsm_state;
    (* full_case = 32'd1 *)
    casez (fsm_state)
      4'h0:
          \$75  = 4'h1;
      4'h1:
        begin
          if (\$3 ) begin
            if (disconnect) begin
              \$75  = 4'h2;
            end
          end
          if (\$5 ) begin
            if (\$8 ) begin
              \$75  = 4'h3;
            end
          end
          if (\$10 ) begin
            \$75  = 4'h4;
          end
        end
      4'h5:
        begin
          if (\$11 ) begin
            if (disconnect) begin
              \$75  = 4'h2;
            end
          end
          if (\$12 ) begin
            \$75  = 4'h6;
          end
          if (\$13 ) begin
            \$75  = 4'h7;
          end
          if (\$14 ) begin
            \$75  = 4'h6;
          end
        end
      4'h3:
          \$75  = 4'h8;
      4'h8:
          if (\$15 ) begin
            \$75  = 4'h9;
          end
      4'h9:
          if (\$16 ) begin
            \$75  = 4'ha;
          end
      4'ha:
          if (\$17 ) begin
            \$75  = 4'hb;
          end
      4'hb:
        begin
          if (\$18 ) begin
            \$75  = 4'h6;
          end
          if (\$19 ) begin
            \$75  = 4'hc;
          end
        end
      4'hc:
        begin
          if (\$20 ) begin
            \$75  = 4'hd;
          end
          if (\$21 ) begin
            \$75  = 4'hb;
          end
          if (\$22 ) begin
            \$75  = 4'h6;
          end
        end
      4'hd:
        begin
          if (\$23 ) begin
            \$75  = 4'h6;
          end
          if (\$24 ) begin
            \$75  = 4'he;
          end
        end
      4'he:
        begin
          if (\$25 ) begin
            (* full_case = 32'd1 *)
            if (\$26 ) begin
              \$75  = 4'hf;
            end else begin
              \$75  = 4'hb;
            end
          end
          if (\$28 ) begin
            \$75  = 4'hd;
          end
          if (\$29 ) begin
            \$75  = 4'h6;
          end
        end
      4'hf:
          \$75  = 4'h5;
      4'h6:
          if (\$30 ) begin
            \$75  = 4'h1;
          end
      4'h7:
          if (\$31 ) begin
            (* full_case = 32'd1 *)
            if (\$32 ) begin
              \$75  = 4'h4;
            end else begin
              \$75  = 4'h3;
            end
          end
      4'h4:
        begin
          if (\$38 ) begin
            (* full_case = 32'd1 *)
            if (was_hs_pre_suspend) begin
              \$75  = 4'hf;
            end else begin
              \$75  = 4'h1;
            end
          end
          if (\$40 ) begin
            (* full_case = 32'd1 *)
            if (\$41 ) begin
              \$75  = 4'h1;
            end else begin
              \$75  = 4'h3;
            end
          end
        end
      4'h2:
          if (\$44 ) begin
            \$75  = 4'h0;
          end
    endcase
    if (usb_rst) begin
      \$75  = 4'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$25 ) begin end
    \$76  = was_hs_pre_suspend;
    casez (fsm_state)
      4'h0:
          /* empty */;
      4'h1:
          if (\$10 ) begin
            \$76  = 1'h0;
          end
      4'h5:
          /* empty */;
      4'h3:
          /* empty */;
      4'h8:
          /* empty */;
      4'h9:
          /* empty */;
      4'ha:
          /* empty */;
      4'hb:
          /* empty */;
      4'hc:
          /* empty */;
      4'hd:
          /* empty */;
      4'he:
          /* empty */;
      4'hf:
          /* empty */;
      4'h6:
          /* empty */;
      4'h7:
          if (\$31 ) begin
            if (\$32 ) begin
              \$76  = 1'h1;
            end
          end
    endcase
    if (usb_rst) begin
      \$76  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$25 ) begin end
    \$77  = operating_mode;
    (* full_case = 32'd1 *)
    casez (fsm_state)
      4'h0:
          /* empty */;
      4'h1:
          /* empty */;
      4'h5:
          if (\$13 ) begin
            \$77  = 2'h0;
          end
      4'h3:
          \$77  = 2'h2;
      4'h8:
          /* empty */;
      4'h9:
          /* empty */;
      4'ha:
          /* empty */;
      4'hb:
          /* empty */;
      4'hc:
          /* empty */;
      4'hd:
          /* empty */;
      4'he:
          /* empty */;
      4'hf:
          \$77  = 2'h0;
      4'h6:
          \$77  = 2'h0;
      4'h7:
          /* empty */;
      4'h4:
          /* empty */;
      4'h2:
        begin
          \$77  = 2'h1;
          if (\$44 ) begin
            \$77  = 2'h0;
          end
        end
    endcase
    if (usb_rst) begin
      \$77  = 2'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$25 ) begin end
    \$78  = termination_select;
    (* full_case = 32'd1 *)
    casez (fsm_state)
      4'h0:
          /* empty */;
      4'h1:
          /* empty */;
      4'h5:
          if (\$13 ) begin
            \$78  = 1'h1;
          end
      4'h3:
          \$78  = 1'h1;
      4'h8:
          /* empty */;
      4'h9:
          /* empty */;
      4'ha:
          /* empty */;
      4'hb:
          /* empty */;
      4'hc:
          /* empty */;
      4'hd:
          /* empty */;
      4'he:
          /* empty */;
      4'hf:
          \$78  = 1'h0;
      4'h6:
          \$78  = 1'h1;
      4'h7:
          /* empty */;
      4'h4:
          /* empty */;
      4'h2:
          if (\$44 ) begin
            \$78  = 1'h1;
          end
    endcase
    if (usb_rst) begin
      \$78  = 1'h1;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$25 ) begin end
    \$79  = valid_pairs;
    casez (fsm_state)
      4'h0:
          /* empty */;
      4'h1:
          /* empty */;
      4'h5:
          /* empty */;
      4'h3:
          /* empty */;
      4'h8:
          /* empty */;
      4'h9:
          /* empty */;
      4'ha:
          if (\$17 ) begin
            \$79  = 2'h0;
          end
      4'hb:
          /* empty */;
      4'hc:
          /* empty */;
      4'hd:
          /* empty */;
      4'he:
          if (\$25 ) begin
            (* full_case = 32'd1 *)
            if (\$26 ) begin
            end else begin
              \$79  = \$27 [1:0];
            end
          end
    endcase
    if (usb_rst) begin
      \$79  = 2'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$25 ) begin end
    \$80  = tddis;
    (* full_case = 32'd1 *)
    casez (fsm_state)
      4'h0:
          /* empty */;
      4'h1:
          /* empty */;
      4'h5:
          /* empty */;
      4'h3:
          /* empty */;
      4'h8:
          /* empty */;
      4'h9:
          /* empty */;
      4'ha:
          /* empty */;
      4'hb:
          /* empty */;
      4'hc:
          /* empty */;
      4'hd:
          /* empty */;
      4'he:
          /* empty */;
      4'hf:
          /* empty */;
      4'h6:
          /* empty */;
      4'h7:
          /* empty */;
      4'h4:
          /* empty */;
      4'h2:
        begin
          if (\$42 ) begin
            \$80  = 1'h1;
          end
          if (\$44 ) begin
            \$80  = 1'h0;
          end
        end
    endcase
    if (usb_rst) begin
      \$80  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$25 ) begin end
    (* full_case = 32'd1 *)
    if (\$45 ) begin
      bus_idle = \$47 ;
    end else if (\$46 ) begin
      bus_idle = \$48 ;
    end else begin
      bus_idle = \$49 ;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$25 ) begin end
    bus_reset = 1'h0;
    casez (fsm_state)
      4'h0:
          /* empty */;
      4'h1:
        begin
          if (\$50 ) begin
            bus_reset = 1'h1;
          end
          if (\$51 ) begin
            bus_reset = 1'h1;
          end
        end
      4'h5:
          if (\$52 ) begin
            bus_reset = 1'h1;
          end
      4'h3:
          /* empty */;
      4'h8:
          /* empty */;
      4'h9:
          /* empty */;
      4'ha:
          /* empty */;
      4'hb:
          /* empty */;
      4'hc:
          /* empty */;
      4'hd:
          /* empty */;
      4'he:
          /* empty */;
      4'hf:
          /* empty */;
      4'h6:
          /* empty */;
      4'h7:
          if (\$53 ) begin
            (* full_case = 32'd1 *)
            if (\$54 ) begin
            end else begin
              bus_reset = 1'h1;
            end
          end
      4'h4:
          if (\$55 ) begin
            bus_reset = 1'h1;
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$25 ) begin end
    valid = 1'h0;
    casez (fsm_state)
      4'h0:
          /* empty */;
      4'h1:
          /* empty */;
      4'h5:
          /* empty */;
      4'h3:
          /* empty */;
      4'h8:
          /* empty */;
      4'h9:
          /* empty */;
      4'ha:
          valid = 1'h1;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$25 ) begin end
    data = 8'h00;
    casez (fsm_state)
      4'h0:
          /* empty */;
      4'h1:
          /* empty */;
      4'h5:
          /* empty */;
      4'h3:
          /* empty */;
      4'h8:
          /* empty */;
      4'h9:
          /* empty */;
      4'ha:
          data = 8'h00;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$25 ) begin end
    suspended = 1'h0;
    casez (fsm_state)
      4'h0:
          /* empty */;
      4'h1:
          /* empty */;
      4'h5:
          /* empty */;
      4'h3:
          /* empty */;
      4'h8:
          /* empty */;
      4'h9:
          /* empty */;
      4'ha:
          /* empty */;
      4'hb:
          /* empty */;
      4'hc:
          /* empty */;
      4'hd:
          /* empty */;
      4'he:
          /* empty */;
      4'hf:
          /* empty */;
      4'h6:
          /* empty */;
      4'h7:
          /* empty */;
      4'h4:
          suspended = 1'h1;
    endcase
  end
  assign line_state = { \port$0$2 , \port$0$3  };
  assign bus_busy = 1'h0;
  assign \$15  = 1'h1;
  assign \$16  = 1'h1;
endmodule

module \LunaUSBSerialDevice.usb0.usb.timer (usb_rst, \start$3 , speed, start, rx_to_tx_at_min, rx_to_tx_at_max, tx_to_rx_timeout, usb_clk);
  reg \$auto$verilog_backend.cc:2373:dump_module$26  = 0;
  wire \$1 ;
  wire \$2 ;
  wire [5:0] \$3 ;
  wire \$4 ;
  wire \$5 ;
  wire \$6 ;
  wire \$7 ;
  wire \$8 ;
  reg [4:0] \$9 ;
  reg [4:0] counter = 5'h00;
  wire rx_timeout;
  wire \rx_timeout$14 ;
  output rx_to_tx_at_max;
  reg rx_to_tx_at_max;
  output rx_to_tx_at_min;
  reg rx_to_tx_at_min;
  input [1:0] speed;
  wire [1:0] speed;
  input start;
  wire start;
  input \start$3 ;
  wire \start$3 ;
  wire tx_allowed;
  wire \tx_allowed$12 ;
  wire tx_timeout;
  wire \tx_timeout$13 ;
  output tx_to_rx_timeout;
  reg tx_to_rx_timeout;
  input usb_clk;
  wire usb_clk;
  input usb_rst;
  wire usb_rst;
  assign \$1  = start | \start$3 ;
  assign \$2  = counter < 5'h11;
  assign \$3  = counter + 1'h1;
  assign \$4  = ! speed;
  assign \$5  = speed == 1'h1;
  assign \$6  = counter == 2'h2;
  assign \$7  = counter == 3'h7;
  assign \$8  = counter == 5'h10;
  always @(posedge usb_clk)
    counter <= \$9 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$26 ) begin end
    \$9  = counter;
    if (\$1 ) begin
      \$9  = 5'h00;
    end else if (\$2 ) begin
      \$9  = \$3 [4:0];
    end
    if (usb_rst) begin
      \$9  = 5'h00;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$26 ) begin end
    rx_to_tx_at_min = 1'h0;
    if (\$4 ) begin
    end else if (\$5 ) begin
      rx_to_tx_at_min = \$6 ;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$26 ) begin end
    rx_to_tx_at_max = 1'h0;
    if (\$4 ) begin
    end else if (\$5 ) begin
      rx_to_tx_at_max = \$7 ;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$26 ) begin end
    tx_to_rx_timeout = 1'h0;
    if (\$4 ) begin
    end else if (\$5 ) begin
      tx_to_rx_timeout = \$8 ;
    end
  end
  assign tx_allowed = rx_to_tx_at_min;
  assign tx_timeout = rx_to_tx_at_max;
  assign rx_timeout = tx_to_rx_timeout;
  assign \tx_allowed$12  = rx_to_tx_at_min;
  assign \tx_timeout$13  = rx_to_tx_at_max;
  assign \rx_timeout$14  = tx_to_rx_timeout;
endmodule

module \LunaUSBSerialDevice.usb0.usb.token_detector (usb_rst, rx_valid, is_in, is_out, is_setup, is_ping, address, rx_active, rx_data, speed, new_frame, new_token, frame, pid, \address$22 , endpoint, ready_for_response, usb_clk);
  reg \$auto$verilog_backend.cc:2373:dump_module$27  = 0;
  wire \$1 ;
  wire \$10 ;
  wire \$11 ;
  wire \$12 ;
  wire \$13 ;
  wire [3:0] \$14 ;
  wire \$15 ;
  wire \$16 ;
  wire \$17 ;
  wire \$18 ;
  wire \$19 ;
  wire \$2 ;
  wire \$20 ;
  wire \$21 ;
  wire \$22 ;
  wire \$23 ;
  wire \$24 ;
  wire \$25 ;
  wire \$26 ;
  wire \$27 ;
  wire \$28 ;
  wire \$29 ;
  wire \$3 ;
  wire \$30 ;
  wire \$31 ;
  wire \$32 ;
  wire \$33 ;
  wire \$34 ;
  wire \$35 ;
  wire \$36 ;
  wire \$37 ;
  wire \$38 ;
  wire \$39 ;
  wire \$4 ;
  wire \$40 ;
  wire \$41 ;
  wire \$42 ;
  wire \$43 ;
  wire \$44 ;
  wire \$45 ;
  wire \$46 ;
  wire \$47 ;
  wire \$48 ;
  wire \$49 ;
  wire \$5 ;
  wire \$50 ;
  wire \$51 ;
  reg \$52 ;
  reg \$53 ;
  reg [2:0] \$54 ;
  reg [3:0] \$55 ;
  reg [10:0] \$56 ;
  reg [10:0] \$57 ;
  reg [3:0] \$58 ;
  reg [6:0] \$59 ;
  wire \$6 ;
  reg [3:0] \$60 ;
  wire \$7 ;
  wire \$8 ;
  wire \$9 ;
  input [6:0] address;
  wire [6:0] address;
  output [6:0] \address$22 ;
  reg [6:0] \address$22  = 7'h00;
  reg [3:0] current_pid = 4'h0;
  output [3:0] endpoint;
  reg [3:0] endpoint = 4'h0;
  output [10:0] frame;
  reg [10:0] frame = 11'h000;
  (* enum_base_type = "fsmState" *)
  (* enum_value_000 = "IDLE/0" *)
  (* enum_value_001 = "READ_PID/1" *)
  (* enum_value_010 = "READ_TOKEN_0/2" *)
  (* enum_value_011 = "IRRELEVANT/3" *)
  (* enum_value_100 = "READ_TOKEN_1/4" *)
  (* enum_value_101 = "TOKEN_COMPLETE/5" *)
  reg [2:0] fsm_state = 3'h0;
  output is_in;
  wire is_in;
  output is_out;
  wire is_out;
  output is_ping;
  wire is_ping;
  output is_setup;
  wire is_setup;
  output new_frame;
  reg new_frame = 1'h0;
  output new_token;
  reg new_token = 1'h0;
  output [3:0] pid;
  reg [3:0] pid = 4'h0;
  output ready_for_response;
  wire ready_for_response;
  input rx_active;
  wire rx_active;
  input [7:0] rx_data;
  wire [7:0] rx_data;
  input rx_valid;
  wire rx_valid;
  input [1:0] speed;
  wire [1:0] speed;
  wire [1:0] \speed$1 ;
  reg start;
  reg [10:0] token_data = 11'h000;
  wire tx_allowed;
  input usb_clk;
  wire usb_clk;
  input usb_rst;
  wire usb_rst;
  assign \$36  = \$35  ^ rx_data[0];
  assign \$37  = \$36  ^ rx_data[2];
  assign \$38  = token_data[0] ^ token_data[3];
  assign \$39  = \$38  ^ token_data[4];
  assign \$40  = \$39  ^ token_data[6];
  assign \$41  = \$40  ^ rx_data[1];
  assign \$42  = token_data[0] ^ token_data[1];
  assign \$43  = \$42  ^ token_data[4];
  assign \$44  = \$43  ^ token_data[5];
  assign \$45  = \$44  ^ token_data[7];
  assign \$46  = \$45  ^ rx_data[2];
  assign \$47  = rx_data[7:3] == { \$46 , \$41 , \$37 , \$30 , \$23  };
  assign \$48  = ~ rx_active;
  assign \$49  = current_pid == 3'h5;
  assign \$50  = token_data[6:0] == address;
  assign \$51  = ~ rx_active;
  always @(posedge usb_clk)
    new_frame <= \$52 ;
  always @(posedge usb_clk)
    new_token <= \$53 ;
  always @(posedge usb_clk)
    fsm_state <= \$54 ;
  always @(posedge usb_clk)
    current_pid <= \$55 ;
  always @(posedge usb_clk)
    token_data <= \$56 ;
  always @(posedge usb_clk)
    frame <= \$57 ;
  always @(posedge usb_clk)
    pid <= \$58 ;
  always @(posedge usb_clk)
    \address$22  <= \$59 ;
  always @(posedge usb_clk)
    endpoint <= \$60 ;
  assign is_in = pid == 4'h9;
  assign is_out = pid == 1'h1;
  assign is_setup = pid == 4'hd;
  assign is_ping = pid == 3'h4;
  assign \$1  = ~ rx_active;
  assign \$2  = current_pid == 3'h5;
  assign \$3  = token_data[6:0] == address;
  assign \$4  = ! fsm_state;
  assign \$5  = fsm_state == 1'h1;
  assign \$6  = fsm_state == 2'h2;
  assign \$7  = fsm_state == 2'h3;
  assign \$8  = fsm_state == 3'h4;
  assign \$9  = fsm_state == 3'h5;
  assign \$10  = ~ rx_active;
  assign \$11  = rx_data[1:0] == 1'h1;
  assign \$12  = rx_data[3:0] == 3'h4;
  assign \$13  = \$11  | \$12 ;
  assign \$14  = ~ rx_data[7:4];
  assign \$15  = rx_data[3:0] == \$14 ;
  assign \$16  = \$13  & \$15 ;
  assign \$17  = ~ rx_active;
  assign \$18  = ~ rx_active;
  assign \$19  = token_data[0] ^ token_data[1];
  assign \$20  = \$19  ^ token_data[2];
  assign \$21  = \$20  ^ token_data[5];
  assign \$22  = \$21  ^ token_data[6];
  assign \$23  = \$22  ^ rx_data[0];
  assign \$24  = token_data[0] ^ token_data[1];
  assign \$25  = \$24  ^ token_data[2];
  assign \$26  = \$25  ^ token_data[3];
  assign \$27  = \$26  ^ token_data[6];
  assign \$28  = \$27  ^ token_data[7];
  assign \$29  = \$28  ^ rx_data[1];
  assign \$30  = ~ \$29 ;
  assign \$31  = token_data[0] ^ token_data[1];
  assign \$32  = \$31  ^ token_data[2];
  assign \$33  = \$32  ^ token_data[3];
  assign \$34  = \$33  ^ token_data[4];
  assign \$35  = \$34  ^ token_data[7];
  \LunaUSBSerialDevice.usb0.usb.token_detector.timer  timer (
    .rx_to_tx_at_min(ready_for_response),
    .speed(speed),
    .start(start),
    .usb_clk(usb_clk),
    .usb_rst(usb_rst)
  );
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$27 ) begin end
    start = 1'h0;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h4:
          /* empty */;
      3'h5:
          if (\$1 ) begin
            (* full_case = 32'd1 *)
            if (\$2 ) begin
            end else begin
              if (\$3 ) begin
                start = 1'h1;
              end
            end
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$27 ) begin end
    \$52  = 1'h0;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h4:
          /* empty */;
      3'h5:
          if (\$48 ) begin
            if (\$49 ) begin
              \$52  = 1'h1;
            end
          end
    endcase
    if (usb_rst) begin
      \$52  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$27 ) begin end
    \$53  = 1'h0;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h4:
          /* empty */;
      3'h5:
          if (\$48 ) begin
            (* full_case = 32'd1 *)
            if (\$49 ) begin
            end else begin
              if (\$50 ) begin
                \$53  = 1'h1;
              end
            end
          end
    endcase
    if (usb_rst) begin
      \$53  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$27 ) begin end
    \$54  = fsm_state;
    casez (fsm_state)
      3'h0:
          if (rx_active) begin
            \$54  = 3'h1;
          end
      3'h1:
          if (\$10 ) begin
            \$54  = 3'h0;
          end else if (rx_valid) begin
            (* full_case = 32'd1 *)
            if (\$16 ) begin
              \$54  = 3'h2;
            end else begin
              \$54  = 3'h3;
            end
          end
      3'h2:
          if (\$17 ) begin
            \$54  = 3'h0;
          end else if (rx_valid) begin
            \$54  = 3'h4;
          end
      3'h4:
          if (\$18 ) begin
            \$54  = 3'h0;
          end else if (rx_valid) begin
            (* full_case = 32'd1 *)
            if (\$47 ) begin
              \$54  = 3'h5;
            end else begin
              \$54  = 3'h3;
            end
          end
      3'h5:
          if (\$48 ) begin
            \$54  = 3'h0;
          end else if (rx_valid) begin
            \$54  = 3'h3;
          end
      3'h3:
          if (\$51 ) begin
            \$54  = 3'h0;
          end
    endcase
    if (usb_rst) begin
      \$54  = 3'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$27 ) begin end
    \$55  = current_pid;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          if (\$10 ) begin
          end else if (rx_valid) begin
            if (\$16 ) begin
              \$55  = rx_data[3:0];
            end
          end
    endcase
    if (usb_rst) begin
      \$55  = 4'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$27 ) begin end
    \$56  = token_data;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          if (\$17 ) begin
          end else if (rx_valid) begin
            \$56  = { 3'h0, rx_data };
          end
      3'h4:
          if (\$18 ) begin
          end else if (rx_valid) begin
            if (\$47 ) begin
              \$56 [10:8] = rx_data[2:0];
            end
          end
    endcase
    if (usb_rst) begin
      \$56  = 11'h000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$27 ) begin end
    \$57  = frame;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h4:
          /* empty */;
      3'h5:
          if (\$48 ) begin
            if (\$49 ) begin
              \$57  = token_data;
            end
          end
    endcase
    if (usb_rst) begin
      \$57  = 11'h000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$27 ) begin end
    \$58  = pid;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h4:
          /* empty */;
      3'h5:
          if (\$48 ) begin
            (* full_case = 32'd1 *)
            if (\$49 ) begin
            end else begin
              (* full_case = 32'd1 *)
              if (\$50 ) begin
                \$58  = current_pid;
              end else begin
                \$58  = 4'h0;
              end
            end
          end
    endcase
    if (usb_rst) begin
      \$58  = 4'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$27 ) begin end
    \$59  = \address$22 ;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h4:
          /* empty */;
      3'h5:
          if (\$48 ) begin
            (* full_case = 32'd1 *)
            if (\$49 ) begin
            end else begin
              if (\$50 ) begin
                \$59  = token_data[6:0];
              end
            end
          end
    endcase
    if (usb_rst) begin
      \$59  = 7'h00;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$27 ) begin end
    \$60  = endpoint;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h4:
          /* empty */;
      3'h5:
          if (\$48 ) begin
            (* full_case = 32'd1 *)
            if (\$49 ) begin
            end else begin
              if (\$50 ) begin
                \$60  = token_data[10:7];
              end
            end
          end
    endcase
    if (usb_rst) begin
      \$60  = 4'h0;
    end
  end
  assign \speed$1  = speed;
  assign tx_allowed = ready_for_response;
endmodule

module \LunaUSBSerialDevice.usb0.usb.token_detector.timer (usb_rst, speed, start, rx_to_tx_at_min, usb_clk);
  reg \$auto$verilog_backend.cc:2373:dump_module$28  = 0;
  wire \$1 ;
  wire [5:0] \$2 ;
  wire \$3 ;
  wire \$4 ;
  wire \$5 ;
  wire \$6 ;
  wire \$7 ;
  reg [4:0] \$8 ;
  reg [4:0] counter = 5'h00;
  wire rx_timeout;
  reg rx_to_tx_at_max;
  output rx_to_tx_at_min;
  reg rx_to_tx_at_min;
  input [1:0] speed;
  wire [1:0] speed;
  input start;
  wire start;
  wire tx_allowed;
  wire tx_timeout;
  reg tx_to_rx_timeout;
  input usb_clk;
  wire usb_clk;
  input usb_rst;
  wire usb_rst;
  assign \$2  = counter + 1'h1;
  assign \$3  = ! speed;
  assign \$4  = speed == 1'h1;
  assign \$5  = counter == 2'h2;
  assign \$6  = counter == 3'h7;
  assign \$7  = counter == 5'h10;
  always @(posedge usb_clk)
    counter <= \$8 ;
  assign \$1  = counter < 5'h11;
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$28 ) begin end
    \$8  = counter;
    if (start) begin
      \$8  = 5'h00;
    end else if (\$1 ) begin
      \$8  = \$2 [4:0];
    end
    if (usb_rst) begin
      \$8  = 5'h00;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$28 ) begin end
    rx_to_tx_at_min = 1'h0;
    if (\$3 ) begin
    end else if (\$4 ) begin
      rx_to_tx_at_min = \$5 ;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$28 ) begin end
    rx_to_tx_at_max = 1'h0;
    if (\$3 ) begin
    end else if (\$4 ) begin
      rx_to_tx_at_max = \$6 ;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$28 ) begin end
    tx_to_rx_timeout = 1'h0;
    if (\$3 ) begin
    end else if (\$4 ) begin
      tx_to_rx_timeout = \$7 ;
    end
  end
  assign tx_allowed = rx_to_tx_at_min;
  assign tx_timeout = rx_to_tx_at_max;
  assign rx_timeout = tx_to_rx_timeout;
endmodule

module \LunaUSBSerialDevice.usb0.usb.translator (io__d_n__i, usb_clk, usb_rst, usb_io_clk, io__pullup__o, rx_valid, tx_valid, tx_ready, io__d_p__o, io__d_n__o, io__d_p__oe, io__d_n__oe, o_pkt_in_progress, rx_data, op_mode, tx_data, io__d_p__i);
  reg \$auto$verilog_backend.cc:2373:dump_module$29  = 0;
  wire \$1 ;
  wire \$2 ;
  wire [7:0] \$3 ;
  wire \$4 ;
  wire \$5 ;
  wire [2:0] \$6 ;
  wire [1:0] \$7 ;
  reg \$8 ;
  reg [1:0] counter = 2'h0;
  wire i_bit_strobe;
  reg [7:0] i_data_payload;
  reg i_oe;
  wire i_usbn;
  wire i_usbp;
  input io__d_n__i;
  wire io__d_n__i;
  output io__d_n__o;
  reg io__d_n__o;
  output io__d_n__oe;
  reg io__d_n__oe;
  input io__d_p__i;
  wire io__d_p__i;
  output io__d_p__o;
  reg io__d_p__o;
  output io__d_p__oe;
  reg io__d_p__oe;
  input io__pullup__o;
  wire io__pullup__o;
  wire [1:0] line_state;
  wire [7:0] o_data_payload;
  wire o_data_strobe;
  wire \o_data_strobe$28 ;
  wire o_oe;
  wire o_pkt_end;
  output o_pkt_in_progress;
  wire o_pkt_in_progress;
  wire o_receive_error;
  wire o_usbn;
  wire o_usbp;
  input [1:0] op_mode;
  wire [1:0] op_mode;
  wire rx_active;
  reg rx_complete = 1'h0;
  output [7:0] rx_data;
  wire [7:0] rx_data;
  wire rx_error;
  output rx_valid;
  wire rx_valid;
  wire session_end;
  wire term_select;
  input [7:0] tx_data;
  wire [7:0] tx_data;
  output tx_ready;
  reg tx_ready;
  input tx_valid;
  wire tx_valid;
  input usb_clk;
  wire usb_clk;
  input usb_io_clk;
  wire usb_io_clk;
  wire usb_io_rst;
  input usb_rst;
  wire usb_rst;
  wire vbus_valid;
  assign \$2  = op_mode == 1'h1;
  assign \$3  = ~ tx_data;
  assign i_bit_strobe = ! counter;
  assign \$4  = ~ o_oe;
  assign i_usbp = io__d_p__i & \$4 ;
  assign \$5  = ~ o_oe;
  assign i_usbn = io__d_n__i & \$5 ;
  assign rx_valid = \o_data_strobe$28  & o_pkt_in_progress;
  assign \$6  = counter + 1'h1;
  always @(posedge usb_io_clk)
    counter <= \$7 ;
  always @(posedge usb_clk)
    rx_complete <= \$8 ;
  assign \$1  = ! op_mode;
  \LunaUSBSerialDevice.usb0.usb.translator.receiver  receiver (
    .i_usbn(i_usbn),
    .i_usbp(i_usbp),
    .o_data_payload(rx_data),
    .o_data_strobe(\o_data_strobe$28 ),
    .\o_pkt_end$45 (o_pkt_end),
    .o_pkt_in_progress(o_pkt_in_progress),
    .o_receive_error(rx_error),
    .usb_clk(usb_clk),
    .usb_io_clk(usb_io_clk),
    .usb_rst(usb_rst)
  );
  \LunaUSBSerialDevice.usb0.usb.translator.transmitter  transmitter (
    .i_data(i_data_payload),
    .i_oe(i_oe),
    .i_valid(i_bit_strobe),
    .o_data_strobe(o_data_strobe),
    .o_oe(o_oe),
    .o_usbn(o_usbn),
    .o_usbp(o_usbp),
    .usb_clk(usb_clk),
    .usb_io_clk(usb_io_clk),
    .usb_rst(usb_rst)
  );
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$29 ) begin end
    i_data_payload = 8'h00;
    if (\$1 ) begin
      i_data_payload = tx_data;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$29 ) begin end
    i_oe = 1'h0;
    if (\$1 ) begin
      i_oe = tx_valid;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$29 ) begin end
    tx_ready = 1'h0;
    if (\$1 ) begin
      tx_ready = o_data_strobe;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$29 ) begin end
    io__d_p__o = 1'h0;
    if (\$1 ) begin
      io__d_p__o = o_usbp;
    end else if (\$2 ) begin
      io__d_p__o = tx_data[0];
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$29 ) begin end
    io__d_n__o = 1'h0;
    if (\$1 ) begin
      io__d_n__o = o_usbn;
    end else if (\$2 ) begin
      io__d_n__o = \$3 [0];
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$29 ) begin end
    (* full_case = 32'd1 *)
    if (\$1 ) begin
      io__d_p__oe = o_oe;
    end else if (\$2 ) begin
      io__d_p__oe = tx_valid;
    end else begin
      io__d_p__oe = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$29 ) begin end
    (* full_case = 32'd1 *)
    if (\$1 ) begin
      io__d_n__oe = o_oe;
    end else if (\$2 ) begin
      io__d_n__oe = tx_valid;
    end else begin
      io__d_n__oe = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$29 ) begin end
    \$8  = o_pkt_end;
    if (usb_rst) begin
      \$8  = 1'h0;
    end
  end
  assign line_state = { io__d_p__i, io__d_n__i };
  assign vbus_valid = 1'h1;
  assign session_end = 1'h0;
  assign term_select = io__pullup__o;
  assign o_data_payload = rx_data;
  assign rx_active = o_pkt_in_progress;
  assign o_receive_error = rx_error;
  assign usb_io_rst = 1'h0;
  assign \$7  = \$6 [1:0];
endmodule

module \LunaUSBSerialDevice.usb0.usb.translator.receiver (usb_rst, usb_io_clk, i_usbp, i_usbn, \o_pkt_end$45 , o_pkt_in_progress, o_receive_error, o_data_payload, o_data_strobe, usb_clk);
  reg \$auto$verilog_backend.cc:2373:dump_module$30  = 0;
  wire \$1 ;
  wire \$2 ;
  reg \$3 ;
  wire flag_end;
  wire flag_start;
  wire flag_valid;
  wire i_data;
  wire \i_data$16 ;
  wire \i_data$21 ;
  wire i_dj;
  wire i_dk;
  wire i_se0;
  wire \i_se0$11 ;
  input i_usbn;
  wire i_usbn;
  input i_usbp;
  wire i_usbp;
  wire i_valid;
  wire \i_valid$15 ;
  wire \i_valid$23 ;
  wire \i_valid$9 ;
  wire line_state_dj;
  wire line_state_dk;
  wire line_state_se0;
  wire line_state_valid;
  wire o_bit_strobe;
  wire o_data;
  wire \o_data$22 ;
  wire [7:0] \o_data$27 ;
  output [7:0] o_data_payload;
  wire [7:0] o_data_payload;
  output o_data_strobe;
  wire o_data_strobe;
  wire o_error;
  wire o_pkt_active;
  wire o_pkt_end;
  output \o_pkt_end$45 ;
  wire \o_pkt_end$45 ;
  output o_pkt_in_progress;
  reg o_pkt_in_progress = 1'h0;
  wire o_pkt_start;
  wire \o_pkt_start$44 ;
  wire o_put;
  output o_receive_error;
  wire o_receive_error;
  wire o_se0;
  wire o_stall;
  wire o_valid;
  reg past_o_pkt_active = 1'h0;
  wire [7:0] r_data;
  wire [1:0] \r_data$39 ;
  wire r_en;
  wire \r_en$43 ;
  wire r_rdy;
  wire \r_rdy$42 ;
  wire reset;
  input usb_clk;
  wire usb_clk;
  input usb_io_clk;
  wire usb_io_clk;
  wire usb_io_rst;
  input usb_rst;
  wire usb_rst;
  wire [7:0] w_data;
  wire [1:0] \w_data$35 ;
  wire w_en;
  wire \w_en$37 ;
  always @(posedge usb_io_clk)
    past_o_pkt_active <= \$2 ;
  always @(posedge usb_clk)
    o_pkt_in_progress <= \$3 ;
  assign \$1  = ~ o_stall;
  assign \i_valid$23  = \$1  & past_o_pkt_active;
  assign \w_en$37  = o_pkt_start | reset;
  assign \o_pkt_start$44  = \r_data$39 [1] & flag_valid;
  assign \o_pkt_end$45  = \r_data$39 [0] & flag_valid;
  \LunaUSBSerialDevice.usb0.usb.translator.receiver.bitstuff  bitstuff (
    .i_data(i_data),
    .i_valid(\i_valid$9 ),
    .o_data(\i_data$21 ),
    .o_error(o_receive_error),
    .o_stall(o_stall),
    .usb_io_clk(usb_io_clk)
  );
  \LunaUSBSerialDevice.usb0.usb.translator.receiver.clock_data_recovery  clock_data_recovery (
    .i_usbn(i_usbn),
    .i_usbp(i_usbp),
    .line_state_dj(i_dj),
    .line_state_dk(i_dk),
    .line_state_se0(i_se0),
    .line_state_valid(o_bit_strobe),
    .usb_io_clk(usb_io_clk)
  );
  \LunaUSBSerialDevice.usb0.usb.translator.receiver.detect  detect (
    .i_data(i_data),
    .i_se0(\i_se0$11 ),
    .i_valid(\i_valid$9 ),
    .pkt_active(o_pkt_active),
    .pkt_end(reset),
    .pkt_start(o_pkt_start),
    .usb_io_clk(usb_io_clk)
  );
  \LunaUSBSerialDevice.usb0.usb.translator.receiver.flags_fifo  flags_fifo (
    .r_data(\r_data$39 ),
    .r_rdy(flag_valid),
    .usb_clk(usb_clk),
    .usb_io_clk(usb_io_clk),
    .usb_rst(usb_rst),
    .w_data(\w_data$35 ),
    .w_en(\w_en$37 )
  );
  \LunaUSBSerialDevice.usb0.usb.translator.receiver.nrzi  nrzi (
    .i_dj(i_dj),
    .i_dk(i_dk),
    .i_valid(o_bit_strobe),
    .o_data(i_data),
    .o_se0(\i_se0$11 ),
    .o_valid(\i_valid$9 ),
    .usb_io_clk(usb_io_clk)
  );
  \LunaUSBSerialDevice.usb0.usb.translator.receiver.payload_fifo  payload_fifo (
    .\port$1615$0 (\o_data$27 ),
    .r_data(o_data_payload),
    .r_rdy(o_data_strobe),
    .usb_clk(usb_clk),
    .usb_io_clk(usb_io_clk),
    .usb_rst(usb_rst),
    .w_en(w_en)
  );
  \LunaUSBSerialDevice.usb0.usb.translator.receiver.shifter  shifter (
    .i_data(\i_data$21 ),
    .i_valid(\i_valid$23 ),
    .o_data(\o_data$27 ),
    .o_put(w_en),
    .reset(reset),
    .usb_io_clk(usb_io_clk)
  );
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$30 ) begin end
    \$3  = o_pkt_in_progress;
    if (\o_pkt_start$44 ) begin
      \$3  = 1'h1;
    end else if (\o_pkt_end$45 ) begin
      \$3  = 1'h0;
    end
    if (usb_rst) begin
      \$3  = 1'h0;
    end
  end
  assign line_state_valid = o_bit_strobe;
  assign i_valid = o_bit_strobe;
  assign line_state_dj = i_dj;
  assign line_state_dk = i_dk;
  assign line_state_se0 = i_se0;
  assign o_valid = \i_valid$9 ;
  assign o_se0 = \i_se0$11 ;
  assign o_data = i_data;
  assign \i_valid$15  = \i_valid$9 ;
  assign \i_data$16  = i_data;
  assign o_error = o_receive_error;
  assign o_pkt_end = reset;
  assign \o_data$22  = \i_data$21 ;
  assign w_data = { \o_data$27 [0], \o_data$27 [1], \o_data$27 [2], \o_data$27 [3], \o_data$27 [4], \o_data$27 [5], \o_data$27 [6], \o_data$27 [7] };
  assign o_put = w_en;
  assign r_data = o_data_payload;
  assign r_rdy = o_data_strobe;
  assign r_en = 1'h1;
  assign flag_start = \r_data$39 [1];
  assign flag_end = \r_data$39 [0];
  assign \r_rdy$42  = flag_valid;
  assign \r_en$43  = 1'h1;
  assign usb_io_rst = 1'h0;
  assign \$2  = o_pkt_active;
  assign \w_data$35 [0] = reset;
  assign \w_data$35 [1] = o_pkt_start;
endmodule

module \LunaUSBSerialDevice.usb0.usb.translator.receiver.bitstuff (i_data, i_valid, o_data, o_stall, o_error, usb_io_clk);
  reg \$auto$verilog_backend.cc:2373:dump_module$31  = 0;
  wire \$1 ;
  wire \$10 ;
  wire \$11 ;
  reg [2:0] \$12 ;
  wire \$13 ;
  wire \$14 ;
  wire \$15 ;
  wire \$2 ;
  wire \$3 ;
  wire \$4 ;
  wire \$5 ;
  wire \$6 ;
  wire \$7 ;
  wire \$8 ;
  wire \$9 ;
  reg drop_bit;
  (* enum_base_type = "fsmState" *)
  (* enum_value_000 = "D0/0" *)
  (* enum_value_001 = "D1/1" *)
  (* enum_value_010 = "D2/2" *)
  (* enum_value_011 = "D3/3" *)
  (* enum_value_100 = "D4/4" *)
  (* enum_value_101 = "D5/5" *)
  (* enum_value_110 = "D6/6" *)
  reg [2:0] fsm_state = 3'h0;
  input i_data;
  wire i_data;
  input i_valid;
  wire i_valid;
  output o_data;
  reg o_data = 1'h0;
  output o_error;
  reg o_error = 1'h0;
  output o_stall;
  reg o_stall = 1'h1;
  input usb_io_clk;
  wire usb_io_clk;
  wire usb_io_rst;
  assign \$1  = ~ i_valid;
  assign \$2  = drop_bit | \$1 ;
  assign \$3  = drop_bit & i_data;
  assign \$4  = \$3  & i_valid;
  assign \$5  = ! fsm_state;
  assign \$6  = fsm_state == 1'h1;
  assign \$7  = fsm_state == 2'h2;
  assign \$8  = fsm_state == 2'h3;
  assign \$9  = fsm_state == 3'h4;
  assign \$10  = fsm_state == 3'h5;
  assign \$11  = fsm_state == 3'h6;
  always @(posedge usb_io_clk)
    fsm_state <= \$12 ;
  always @(posedge usb_io_clk)
    o_data <= \$13 ;
  always @(posedge usb_io_clk)
    o_stall <= \$14 ;
  always @(posedge usb_io_clk)
    o_error <= \$15 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$31 ) begin end
    \$12  = fsm_state;
    casez (fsm_state)
      3'h0:
          if (i_valid) begin
            (* full_case = 32'd1 *)
            if (i_data) begin
              \$12  = 3'h1;
            end else begin
              \$12  = 3'h0;
            end
          end
      3'h1:
          if (i_valid) begin
            (* full_case = 32'd1 *)
            if (i_data) begin
              \$12  = 3'h2;
            end else begin
              \$12  = 3'h0;
            end
          end
      3'h2:
          if (i_valid) begin
            (* full_case = 32'd1 *)
            if (i_data) begin
              \$12  = 3'h3;
            end else begin
              \$12  = 3'h0;
            end
          end
      3'h3:
          if (i_valid) begin
            (* full_case = 32'd1 *)
            if (i_data) begin
              \$12  = 3'h4;
            end else begin
              \$12  = 3'h0;
            end
          end
      3'h4:
          if (i_valid) begin
            (* full_case = 32'd1 *)
            if (i_data) begin
              \$12  = 3'h5;
            end else begin
              \$12  = 3'h0;
            end
          end
      3'h5:
          if (i_valid) begin
            (* full_case = 32'd1 *)
            if (i_data) begin
              \$12  = 3'h6;
            end else begin
              \$12  = 3'h0;
            end
          end
      3'h6:
          if (i_valid) begin
            \$12  = 3'h0;
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$31 ) begin end
    drop_bit = 1'h0;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h3:
          /* empty */;
      3'h4:
          /* empty */;
      3'h5:
          /* empty */;
      3'h6:
          if (i_valid) begin
            drop_bit = 1'h1;
          end
    endcase
  end
  assign usb_io_rst = 1'h0;
  assign \$15  = \$4 ;
  assign \$14  = \$2 ;
  assign \$13  = i_data;
endmodule

module \LunaUSBSerialDevice.usb0.usb.translator.receiver.clock_data_recovery (i_usbp, i_usbn, line_state_se0, line_state_dj, line_state_dk, line_state_valid, usb_io_clk);
  reg \$auto$verilog_backend.cc:2373:dump_module$32  = 0;
  wire \$1 ;
  wire \$10 ;
  wire \$11 ;
  wire \$12 ;
  wire \$13 ;
  wire \$14 ;
  wire \$15 ;
  reg [2:0] \$16 ;
  reg \$17 ;
  reg [1:0] \$18 ;
  wire \$2 ;
  wire \$3 ;
  wire \$4 ;
  wire \$5 ;
  wire [2:0] \$6 ;
  wire \$7 ;
  wire \$8 ;
  wire \$9 ;
  (* enum_base_type = "fsmState" *)
  (* enum_value_000 = "SE0/0" *)
  (* enum_value_001 = "SE1/1" *)
  (* enum_value_010 = "DJ/2" *)
  (* enum_value_011 = "DK/3" *)
  (* enum_value_100 = "DT/4" *)
  reg [2:0] fsm_state = 3'h4;
  input i_usbn;
  wire i_usbn;
  input i_usbp;
  wire i_usbp;
  output line_state_dj;
  reg line_state_dj = 1'h0;
  output line_state_dk;
  reg line_state_dk = 1'h0;
  reg line_state_in_transition;
  reg [1:0] line_state_phase = 2'h0;
  output line_state_se0;
  reg line_state_se0 = 1'h0;
  reg line_state_se1 = 1'h0;
  output line_state_valid;
  reg line_state_valid = 1'h0;
  wire sync_dn;
  wire sync_dp;
  input usb_io_clk;
  wire usb_io_clk;
  wire usb_io_rst;
  assign \$1  = { sync_dn, sync_dp } != 2'h2;
  assign \$2  = { sync_dn, sync_dp } != 1'h1;
  assign \$3  = | { sync_dn, sync_dp };
  assign \$4  = { sync_dn, sync_dp } != 2'h3;
  assign \$5  = line_state_phase == 1'h1;
  assign \$6  = line_state_phase + 1'h1;
  assign \$7  = ! fsm_state;
  assign \$8  = fsm_state == 1'h1;
  assign \$9  = fsm_state == 2'h2;
  assign \$10  = fsm_state == 2'h3;
  assign \$11  = fsm_state == 3'h4;
  always @(posedge usb_io_clk)
    line_state_se0 <= \$12 ;
  always @(posedge usb_io_clk)
    line_state_se1 <= \$13 ;
  always @(posedge usb_io_clk)
    line_state_dj <= \$14 ;
  always @(posedge usb_io_clk)
    line_state_dk <= \$15 ;
  always @(posedge usb_io_clk)
    fsm_state <= \$16 ;
  always @(posedge usb_io_clk)
    line_state_valid <= \$17 ;
  always @(posedge usb_io_clk)
    line_state_phase <= \$18 ;
  \LunaUSBSerialDevice.usb0.usb.translator.receiver.clock_data_recovery.dn_cdc  dn_cdc (
    .i_usbn(i_usbn),
    .stage1(sync_dn),
    .usb_io_clk(usb_io_clk)
  );
  \LunaUSBSerialDevice.usb0.usb.translator.receiver.clock_data_recovery.dp_cdc  dp_cdc (
    .i_usbp(i_usbp),
    .stage1(sync_dp),
    .usb_io_clk(usb_io_clk)
  );
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$32 ) begin end
    \$16  = fsm_state;
    casez (fsm_state)
      3'h4:
          (* full_case = 32'd1 *)
          casez ({ sync_dn, sync_dp })
            2'h2:
                \$16  = 3'h2;
            2'h1:
                \$16  = 3'h3;
            2'h0:
                \$16  = 3'h0;
            2'h3:
                \$16  = 3'h1;
          endcase
      3'h2:
          if (\$1 ) begin
            \$16  = 3'h4;
          end
      3'h3:
          if (\$2 ) begin
            \$16  = 3'h4;
          end
      3'h0:
          if (\$3 ) begin
            \$16  = 3'h4;
          end
      3'h1:
          if (\$4 ) begin
            \$16  = 3'h4;
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$32 ) begin end
    \$17  = \$5 ;
    if (line_state_in_transition) begin
      \$17  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$32 ) begin end
    (* full_case = 32'd1 *)
    if (line_state_in_transition) begin
      \$18  = 2'h0;
    end else begin
      \$18  = \$6 [1:0];
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$32 ) begin end
    line_state_in_transition = 1'h0;
    casez (fsm_state)
      3'h4:
          line_state_in_transition = 1'h1;
    endcase
  end
  assign usb_io_rst = 1'h0;
  assign \$15  = \$10 ;
  assign \$14  = \$9 ;
  assign \$13  = \$8 ;
  assign \$12  = \$7 ;
endmodule

module \LunaUSBSerialDevice.usb0.usb.translator.receiver.clock_data_recovery.dn_cdc (i_usbn, stage1, usb_io_clk);
  input i_usbn;
  wire i_usbn;
  reg stage0 = 1'h0;
  output stage1;
  reg stage1 = 1'h0;
  (* init = 1'h0 *)
  wire sync_dn;
  input usb_io_clk;
  wire usb_io_clk;
  wire usb_io_rst;
  always @(posedge usb_io_clk)
    stage0 <= i_usbn;
  always @(posedge usb_io_clk)
    stage1 <= stage0;
  assign usb_io_rst = 1'h0;
  assign sync_dn = stage1;
endmodule

module \LunaUSBSerialDevice.usb0.usb.translator.receiver.clock_data_recovery.dp_cdc (i_usbp, stage1, usb_io_clk);
  input i_usbp;
  wire i_usbp;
  reg stage0 = 1'h0;
  output stage1;
  reg stage1 = 1'h0;
  (* init = 1'h0 *)
  wire sync_dp;
  input usb_io_clk;
  wire usb_io_clk;
  wire usb_io_rst;
  always @(posedge usb_io_clk)
    stage0 <= i_usbp;
  always @(posedge usb_io_clk)
    stage1 <= stage0;
  assign usb_io_rst = 1'h0;
  assign sync_dp = stage1;
endmodule

module \LunaUSBSerialDevice.usb0.usb.translator.receiver.detect (i_data, i_se0, i_valid, pkt_start, pkt_active, pkt_end, usb_io_clk);
  reg \$auto$verilog_backend.cc:2373:dump_module$33  = 0;
  wire \$1 ;
  wire \$10 ;
  wire \$11 ;
  wire \$12 ;
  wire \$13 ;
  wire \$14 ;
  reg [2:0] \$15 ;
  wire \$2 ;
  wire \$3 ;
  wire \$4 ;
  wire \$5 ;
  wire \$6 ;
  wire \$7 ;
  wire \$8 ;
  wire \$9 ;
  (* enum_base_type = "fsmState" *)
  (* enum_value_000 = "D0/0" *)
  (* enum_value_001 = "D1/1" *)
  (* enum_value_010 = "D2/2" *)
  (* enum_value_011 = "D3/3" *)
  (* enum_value_100 = "D4/4" *)
  (* enum_value_101 = "D5/5" *)
  (* enum_value_110 = "PKT_ACTIVE/6" *)
  reg [2:0] fsm_state = 3'h0;
  input i_data;
  wire i_data;
  input i_se0;
  wire i_se0;
  input i_valid;
  wire i_valid;
  wire o_pkt_active;
  wire o_pkt_end;
  wire o_pkt_start;
  output pkt_active;
  reg pkt_active;
  output pkt_end;
  reg pkt_end;
  output pkt_start;
  reg pkt_start;
  input usb_io_clk;
  wire usb_io_clk;
  wire usb_io_rst;
  assign \$1  = i_data | i_se0;
  assign \$2  = i_data | i_se0;
  assign \$3  = i_data | i_se0;
  assign \$4  = i_data | i_se0;
  assign \$5  = i_data | i_se0;
  assign \$6  = i_valid & i_se0;
  assign \$7  = i_valid & i_se0;
  assign \$8  = ! fsm_state;
  assign \$9  = fsm_state == 1'h1;
  assign \$10  = fsm_state == 2'h2;
  assign \$11  = fsm_state == 2'h3;
  assign \$12  = fsm_state == 3'h4;
  assign \$13  = fsm_state == 3'h5;
  assign \$14  = fsm_state == 3'h6;
  always @(posedge usb_io_clk)
    fsm_state <= \$15 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$33 ) begin end
    \$15  = fsm_state;
    casez (fsm_state)
      3'h0:
          if (i_valid) begin
            (* full_case = 32'd1 *)
            if (\$1 ) begin
              \$15  = 3'h0;
            end else begin
              \$15  = 3'h1;
            end
          end
      3'h1:
          if (i_valid) begin
            (* full_case = 32'd1 *)
            if (\$2 ) begin
              \$15  = 3'h0;
            end else begin
              \$15  = 3'h2;
            end
          end
      3'h2:
          if (i_valid) begin
            (* full_case = 32'd1 *)
            if (\$3 ) begin
              \$15  = 3'h0;
            end else begin
              \$15  = 3'h3;
            end
          end
      3'h3:
          if (i_valid) begin
            (* full_case = 32'd1 *)
            if (\$4 ) begin
              \$15  = 3'h0;
            end else begin
              \$15  = 3'h4;
            end
          end
      3'h4:
          if (i_valid) begin
            (* full_case = 32'd1 *)
            if (\$5 ) begin
              \$15  = 3'h0;
            end else begin
              \$15  = 3'h5;
            end
          end
      3'h5:
          if (i_valid) begin
            if (i_se0) begin
              \$15  = 3'h0;
            end else if (i_data) begin
              \$15  = 3'h6;
            end
          end
      3'h6:
          if (\$6 ) begin
            \$15  = 3'h0;
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$33 ) begin end
    pkt_start = 1'h0;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h3:
          /* empty */;
      3'h4:
          /* empty */;
      3'h5:
          if (i_valid) begin
            if (i_se0) begin
            end else if (i_data) begin
              pkt_start = 1'h1;
            end
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$33 ) begin end
    pkt_active = 1'h0;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h3:
          /* empty */;
      3'h4:
          /* empty */;
      3'h5:
          /* empty */;
      3'h6:
        begin
          pkt_active = 1'h1;
          if (\$7 ) begin
            pkt_active = 1'h0;
          end
        end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$33 ) begin end
    pkt_end = 1'h0;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h3:
          /* empty */;
      3'h4:
          /* empty */;
      3'h5:
          /* empty */;
      3'h6:
          if (\$7 ) begin
            pkt_end = 1'h1;
          end
    endcase
  end
  assign usb_io_rst = 1'h0;
  assign o_pkt_start = pkt_start;
  assign o_pkt_active = pkt_active;
  assign o_pkt_end = pkt_end;
endmodule

module \LunaUSBSerialDevice.usb0.usb.translator.receiver.flags_fifo (usb_rst, usb_io_clk, w_en, w_data, r_data, r_rdy, usb_clk);
  reg \$auto$verilog_backend.cc:2373:dump_module$34  = 0;
  wire [1:0] \$1 ;
  reg [1:0] \$10 ;
  reg \$11 ;
  reg \$12 ;
  wire [1:0] \$2 ;
  wire [3:0] \$3 ;
  wire \$4 ;
  wire \$5 ;
  wire [3:0] \$6 ;
  wire \$7 ;
  wire \$8 ;
  reg [2:0] \$9 ;
  wire r_consume_buffered;
  output [1:0] r_data;
  reg [1:0] r_data = 2'h0;
  wire [1:0] \r_data$18 ;
  wire r_en;
  reg \r_en$12 ;
  reg [2:0] r_level = 3'h0;
  wire [2:0] \r_level$16 ;
  output r_rdy;
  reg r_rdy = 1'h0;
  wire \r_rdy$19 ;
  reg r_rst = 1'h0;
  wire \r_rst$21 ;
  input usb_clk;
  wire usb_clk;
  input usb_io_clk;
  wire usb_io_clk;
  wire usb_io_rst;
  input usb_rst;
  wire usb_rst;
  wire w_consume_buffered;
  input [1:0] w_data;
  wire [1:0] w_data;
  wire [1:0] \w_data$1 ;
  input w_en;
  wire w_en;
  wire \w_en$5 ;
  wire [2:0] w_level;
  wire [2:0] \w_level$10 ;
  wire w_rdy;
  wire \w_rdy$3 ;
  assign \$1  = r_rdy - 1'h1;
  assign \$2  = \$1  & { 1'h0, r_rdy };
  assign \$3  = \w_level$10  + w_consume_buffered;
  assign \$4  = ~ r_rdy;
  assign \$6  = \r_level$16  + \$2 [0];
  assign \$7  = ~ r_rdy;
  always @(posedge usb_clk)
    r_level <= \$9 ;
  always @(posedge usb_clk)
    r_data <= \$10 ;
  always @(posedge usb_clk)
    r_rdy <= \$11 ;
  always @(posedge usb_clk)
    r_rst <= \$12 ;
  \LunaUSBSerialDevice.usb0.usb.translator.receiver.flags_fifo.consume_buffered_cdc  consume_buffered_cdc (
    .r_consume_buffered(\$2 [0]),
    .stage3(w_consume_buffered),
    .usb_io_clk(usb_io_clk)
  );
  \LunaUSBSerialDevice.usb0.usb.translator.receiver.flags_fifo.unbuffered  unbuffered (
    .r_data(\r_data$18 ),
    .r_en(\r_en$12 ),
    .r_level(\r_level$16 ),
    .r_rdy(\r_rdy$19 ),
    .\r_rst$31 (\r_rst$21 ),
    .usb_clk(usb_clk),
    .usb_io_clk(usb_io_clk),
    .usb_rst(usb_rst),
    .w_en(w_en),
    .w_level(\w_level$10 ),
    .w_port__data(w_data),
    .w_rdy(w_rdy)
  );
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$34 ) begin end
    \r_en$12  = 1'h0;
    if (\$5 ) begin
      \r_en$12  = 1'h1;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$34 ) begin end
    \$9  = \$6 [2:0];
    if (usb_rst) begin
      \$9  = 3'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$34 ) begin end
    \$10  = r_data;
    if (\$8 ) begin
      \$10  = \r_data$18 ;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$34 ) begin end
    \$11  = r_rdy;
    if (\$8 ) begin
      \$11  = \r_rdy$19 ;
    end
    if (usb_rst) begin
      \$11  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$34 ) begin end
    \$12  = r_rst;
    if (\$8 ) begin
      \$12  = \r_rst$21 ;
    end
    if (usb_rst) begin
      \$12  = 1'h0;
    end
  end
  assign \w_data$1  = w_data;
  assign \w_rdy$3  = w_rdy;
  assign \w_en$5  = w_en;
  assign r_consume_buffered = \$2 [0];
  assign r_en = 1'h1;
  assign w_level = \$3 [2:0];
  assign usb_io_rst = 1'h0;
  assign \$5  = 1'h1;
  assign \$8  = 1'h1;
endmodule

module \LunaUSBSerialDevice.usb0.usb.translator.receiver.flags_fifo.consume_buffered_cdc (r_consume_buffered, stage3, usb_io_clk);
  input r_consume_buffered;
  wire r_consume_buffered;
  reg stage0 = 1'h0;
  reg stage1 = 1'h0;
  reg stage2 = 1'h0;
  output stage3;
  reg stage3 = 1'h0;
  input usb_io_clk;
  wire usb_io_clk;
  wire usb_io_rst;
  (* init = 1'h0 *)
  wire w_consume_buffered;
  always @(posedge usb_io_clk)
    stage0 <= r_consume_buffered;
  always @(posedge usb_io_clk)
    stage1 <= stage0;
  always @(posedge usb_io_clk)
    stage2 <= stage1;
  always @(posedge usb_io_clk)
    stage3 <= stage2;
  assign usb_io_rst = 1'h0;
  assign w_consume_buffered = stage3;
endmodule

module \LunaUSBSerialDevice.usb0.usb.translator.receiver.flags_fifo.unbuffered (usb_rst, usb_io_clk, w_en, r_level, w_rdy, r_rdy, r_data, w_port__data, r_en, w_level, \r_rst$31 , usb_clk);
  reg \$auto$verilog_backend.cc:2373:dump_module$35  = 0;
  wire \$1 ;
  wire \$10 ;
  wire \$11 ;
  wire \$12 ;
  wire \$13 ;
  wire \$14 ;
  wire \$15 ;
  wire [3:0] \$16 ;
  wire [2:0] \$17 ;
  wire \$18 ;
  wire \$19 ;
  wire [3:0] \$2 ;
  wire \$20 ;
  wire \$21 ;
  wire \$22 ;
  wire \$23 ;
  wire [3:0] \$24 ;
  wire [2:0] \$25 ;
  wire \$26 ;
  wire \$27 ;
  wire \$28 ;
  wire \$29 ;
  wire \$3 ;
  wire \$30 ;
  wire \$31 ;
  wire [2:0] \$32 ;
  wire [2:0] \$33 ;
  wire [2:0] \$34 ;
  wire [2:0] \$35 ;
  reg [2:0] \$36 ;
  reg [2:0] \$37 ;
  reg \$38 ;
  wire [3:0] \$4 ;
  wire \$5 ;
  wire \$6 ;
  wire \$7 ;
  wire \$8 ;
  wire \$9 ;
  reg [2:0] consume_r_bin = 3'h0;
  reg [2:0] consume_r_gry = 3'h0;
  wire [2:0] consume_r_nxt;
  reg [2:0] consume_w_bin = 3'h0;
  wire [2:0] consume_w_gry;
  wire [2:0] produce_r_bin;
  wire [2:0] produce_r_gry;
  reg [2:0] produce_w_bin = 3'h0;
  reg [2:0] produce_w_gry = 3'h0;
  wire [2:0] produce_w_nxt;
  output [1:0] r_data;
  wire [1:0] r_data;
  reg r_empty;
  input r_en;
  wire r_en;
  output [2:0] r_level;
  wire [2:0] r_level;
  wire [1:0] r_port__addr;
  wire [1:0] r_port__data;
  wire r_port__en;
  output r_rdy;
  wire r_rdy;
  wire r_rst;
  output \r_rst$31 ;
  reg \r_rst$31  = 1'h0;
  input usb_clk;
  wire usb_clk;
  input usb_io_clk;
  wire usb_io_clk;
  wire usb_io_rst;
  input usb_rst;
  wire usb_rst;
  wire [1:0] w_data;
  input w_en;
  wire w_en;
  wire w_full;
  output [2:0] w_level;
  reg [2:0] w_level = 3'h0;
  wire [1:0] w_port__addr;
  input [1:0] w_port__data;
  wire [1:0] w_port__data;
  wire w_port__en;
  output w_rdy;
  wire w_rdy;
  reg [1:0] storage [3:0];
  initial begin
    storage[0] = 2'h0;
    storage[1] = 2'h0;
    storage[2] = 2'h0;
    storage[3] = 2'h0;
  end
  always @(posedge usb_io_clk) begin
    if (w_port__en)
      storage[produce_w_bin[1:0]] <= w_port__data;
  end
  reg [1:0] _0_;
  always @(posedge usb_clk) begin
    _0_ <= storage[\$4 [1:0]];
  end
  assign r_data = _0_;
  assign \$1  = w_rdy & w_en;
  assign \$2  = produce_w_bin + \$1 ;
  assign \$3  = r_rdy & r_en;
  assign \$4  = consume_r_bin + \$3 ;
  assign \$6  = \$5  ^ produce_r_gry[1];
  assign \$7  = \$6  ^ produce_r_gry[0];
  assign \$9  = \$8  ^ produce_r_gry[1];
  assign \$11  = produce_w_gry[2] != consume_w_gry[2];
  assign \$12  = produce_w_gry[1] != consume_w_gry[1];
  assign \$13  = \$11  & \$12 ;
  assign \$14  = produce_w_gry[0] == consume_w_gry[0];
  assign w_full = \$13  & \$14 ;
  assign \$15  = consume_r_gry == produce_r_gry;
  assign \$16  = { \$10 , \$9 , \$7  } - consume_r_bin;
  assign w_port__en = w_rdy & w_en;
  assign w_rdy = ~ w_full;
  assign r_rdy = ~ r_empty;
  assign \$17  = \$2 [2:0] ^ { 1'h0, \$2 [2:1] };
  assign \$19  = \$18  ^ consume_w_gry[1];
  assign \$20  = \$19  ^ consume_w_gry[0];
  assign \$22  = \$21  ^ consume_w_gry[1];
  assign \$24  = produce_w_bin - consume_w_bin;
  assign \$25  = \$4 [2:0] ^ { 1'h0, \$4 [2:1] };
  assign \$27  = \$26  ^ produce_r_gry[1];
  assign \$28  = \$27  ^ produce_r_gry[0];
  assign \$30  = \$29  ^ produce_r_gry[1];
  always @(posedge usb_io_clk)
    produce_w_bin <= \$32 ;
  always @(posedge usb_io_clk)
    produce_w_gry <= \$33 ;
  always @(posedge usb_io_clk)
    consume_w_bin <= \$34 ;
  always @(posedge usb_io_clk)
    w_level <= \$35 ;
  always @(posedge usb_clk)
    consume_r_bin <= \$36 ;
  always @(posedge usb_clk)
    consume_r_gry <= \$37 ;
  always @(posedge usb_clk)
    \r_rst$31  <= \$38 ;
  \LunaUSBSerialDevice.usb0.usb.translator.receiver.flags_fifo.unbuffered.consume_cdc  consume_cdc (
    .consume_r_gry(consume_r_gry),
    .stage1(consume_w_gry),
    .usb_io_clk(usb_io_clk)
  );
  \LunaUSBSerialDevice.usb0.usb.translator.receiver.flags_fifo.unbuffered.produce_cdc  produce_cdc (
    .produce_w_gry(produce_w_gry),
    .stage1(produce_r_gry),
    .usb_clk(usb_clk),
    .usb_rst(usb_rst)
  );
  \LunaUSBSerialDevice.usb0.usb.translator.receiver.flags_fifo.unbuffered.rst_cdc  rst_cdc (
    .async_ff_clk(usb_clk),
    .stage1(r_rst)
  );
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$35 ) begin end
    r_empty = \$15 ;
    if (r_rst) begin
      r_empty = 1'h1;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$35 ) begin end
    \$36  = \$4 [2:0];
    if (r_rst) begin
      \$36  = { \$31 , \$30 , \$28  };
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$35 ) begin end
    \$37  = \$25 ;
    if (r_rst) begin
      \$37  = produce_r_gry;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$35 ) begin end
    (* full_case = 32'd1 *)
    if (r_rst) begin
      \$38  = 1'h1;
    end else begin
      \$38  = 1'h0;
    end
    if (usb_rst) begin
      \$38  = 1'h0;
    end
  end
  assign produce_w_nxt = \$2 [2:0];
  assign consume_r_nxt = \$4 [2:0];
  assign produce_r_bin = { \$10 , \$9 , \$7  };
  assign w_port__addr = produce_w_bin[1:0];
  assign w_data = w_port__data;
  assign r_port__addr = \$4 [1:0];
  assign r_port__data = r_data;
  assign r_port__en = 1'h1;
  assign usb_io_rst = 1'h0;
  assign r_level = \$16 [2:0];
  assign \$35  = \$24 [2:0];
  assign \$34  = { \$23 , \$22 , \$20  };
  assign \$33  = \$17 ;
  assign \$32  = \$2 [2:0];
  assign \$5  = produce_r_gry[2];
  assign \$8  = produce_r_gry[2];
  assign \$10  = produce_r_gry[2];
  assign \$18  = consume_w_gry[2];
  assign \$21  = consume_w_gry[2];
  assign \$23  = consume_w_gry[2];
  assign \$26  = produce_r_gry[2];
  assign \$29  = produce_r_gry[2];
  assign \$31  = produce_r_gry[2];
endmodule

module \LunaUSBSerialDevice.usb0.usb.translator.receiver.flags_fifo.unbuffered.consume_cdc (consume_r_gry, stage1, usb_io_clk);
  input [2:0] consume_r_gry;
  wire [2:0] consume_r_gry;
  (* init = 3'h0 *)
  wire [2:0] consume_w_gry;
  reg [2:0] stage0 = 3'h0;
  output [2:0] stage1;
  reg [2:0] stage1 = 3'h0;
  input usb_io_clk;
  wire usb_io_clk;
  wire usb_io_rst;
  always @(posedge usb_io_clk)
    stage0 <= consume_r_gry;
  always @(posedge usb_io_clk)
    stage1 <= stage0;
  assign usb_io_rst = 1'h0;
  assign consume_w_gry = stage1;
endmodule

module \LunaUSBSerialDevice.usb0.usb.translator.receiver.flags_fifo.unbuffered.produce_cdc (usb_rst, produce_w_gry, stage1, usb_clk);
  (* init = 3'h0 *)
  wire [2:0] produce_r_gry;
  input [2:0] produce_w_gry;
  wire [2:0] produce_w_gry;
  reg [2:0] stage0 = 3'h0;
  output [2:0] stage1;
  reg [2:0] stage1 = 3'h0;
  input usb_clk;
  wire usb_clk;
  input usb_rst;
  wire usb_rst;
  always @(posedge usb_clk)
    stage0 <= produce_w_gry;
  always @(posedge usb_clk)
    stage1 <= stage0;
  assign produce_r_gry = stage1;
endmodule

module \LunaUSBSerialDevice.usb0.usb.translator.receiver.flags_fifo.unbuffered.rst_cdc (stage1, async_ff_clk);
  input async_ff_clk;
  wire async_ff_clk;
  wire async_ff_rst;
  (* init = 1'h1 *)
  wire r_rst;
  reg stage0 = 1'h1;
  output stage1;
  reg stage1 = 1'h1;
  wire usb_clk;
  wire usb_io_rst;
  always @(posedge async_ff_clk)
    stage0 <= 1'h0;
  always @(posedge async_ff_clk)
    stage1 <= stage0;
  assign async_ff_rst = 1'h0;
  assign usb_io_rst = 1'h0;
  assign usb_clk = async_ff_clk;
  assign r_rst = stage1;
endmodule

module \LunaUSBSerialDevice.usb0.usb.translator.receiver.nrzi (i_dj, i_dk, i_valid, o_data, o_se0, o_valid, usb_io_clk);
  reg \$auto$verilog_backend.cc:2373:dump_module$36  = 0;
  wire \$1 ;
  wire \$2 ;
  wire \$3 ;
  wire \$4 ;
  wire \$5 ;
  reg \$6 ;
  reg \$7 ;
  reg \$8 ;
  wire \$9 ;
  input i_dj;
  wire i_dj;
  input i_dk;
  wire i_dk;
  input i_valid;
  wire i_valid;
  reg last_data = 1'h0;
  output o_data;
  reg o_data = 1'h0;
  output o_se0;
  reg o_se0 = 1'h0;
  output o_valid;
  reg o_valid = 1'h0;
  input usb_io_clk;
  wire usb_io_clk;
  wire usb_io_rst;
  assign \$1  = i_dk ^ last_data;
  assign \$2  = ~ \$1 ;
  assign \$3  = ~ i_dj;
  assign \$4  = ~ i_dk;
  assign \$5  = \$3  & \$4 ;
  always @(posedge usb_io_clk)
    last_data <= \$6 ;
  always @(posedge usb_io_clk)
    o_data <= \$7 ;
  always @(posedge usb_io_clk)
    o_se0 <= \$8 ;
  always @(posedge usb_io_clk)
    o_valid <= \$9 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$36 ) begin end
    \$6  = last_data;
    if (i_valid) begin
      \$6  = i_dk;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$36 ) begin end
    \$7  = o_data;
    if (i_valid) begin
      \$7  = \$2 ;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$36 ) begin end
    \$8  = o_se0;
    if (i_valid) begin
      \$8  = \$5 ;
    end
  end
  assign usb_io_rst = 1'h0;
  assign \$9  = i_valid;
endmodule

module \LunaUSBSerialDevice.usb0.usb.translator.receiver.payload_fifo (usb_rst, usb_io_clk, w_en, \port$1615$0 , r_data, r_rdy, usb_clk);
  reg \$auto$verilog_backend.cc:2373:dump_module$37  = 0;
  wire [1:0] \$1 ;
  reg [7:0] \$10 ;
  reg \$11 ;
  reg \$12 ;
  wire [1:0] \$2 ;
  wire [3:0] \$3 ;
  wire \$4 ;
  wire \$5 ;
  wire [3:0] \$6 ;
  wire \$7 ;
  wire \$8 ;
  reg [2:0] \$9 ;
  input [7:0] \port$1615$0 ;
  wire [7:0] \port$1615$0 ;
  wire r_consume_buffered;
  output [7:0] r_data;
  reg [7:0] r_data = 8'h00;
  wire [7:0] \r_data$18 ;
  wire r_en;
  reg \r_en$12 ;
  reg [2:0] r_level = 3'h0;
  wire [2:0] \r_level$16 ;
  output r_rdy;
  reg r_rdy = 1'h0;
  wire \r_rdy$19 ;
  reg r_rst = 1'h0;
  wire \r_rst$21 ;
  input usb_clk;
  wire usb_clk;
  input usb_io_clk;
  wire usb_io_clk;
  wire usb_io_rst;
  input usb_rst;
  wire usb_rst;
  wire w_consume_buffered;
  wire [7:0] w_data;
  wire [7:0] \w_data$1 ;
  input w_en;
  wire w_en;
  wire \w_en$5 ;
  wire [2:0] w_level;
  wire [2:0] \w_level$10 ;
  wire w_rdy;
  wire \w_rdy$3 ;
  assign \$1  = r_rdy - 1'h1;
  assign \$2  = \$1  & { 1'h0, r_rdy };
  assign \$3  = \w_level$10  + w_consume_buffered;
  assign \$4  = ~ r_rdy;
  assign \$6  = \r_level$16  + \$2 [0];
  assign \$7  = ~ r_rdy;
  always @(posedge usb_clk)
    r_level <= \$9 ;
  always @(posedge usb_clk)
    r_data <= \$10 ;
  always @(posedge usb_clk)
    r_rdy <= \$11 ;
  always @(posedge usb_clk)
    r_rst <= \$12 ;
  \LunaUSBSerialDevice.usb0.usb.translator.receiver.payload_fifo.consume_buffered_cdc  consume_buffered_cdc (
    .r_consume_buffered(\$2 [0]),
    .stage3(w_consume_buffered),
    .usb_io_clk(usb_io_clk)
  );
  \LunaUSBSerialDevice.usb0.usb.translator.receiver.payload_fifo.unbuffered  unbuffered (
    .\port$1615$0 (\port$1615$0 ),
    .r_data(\r_data$18 ),
    .r_en(\r_en$12 ),
    .r_level(\r_level$16 ),
    .r_rdy(\r_rdy$19 ),
    .\r_rst$31 (\r_rst$21 ),
    .usb_clk(usb_clk),
    .usb_io_clk(usb_io_clk),
    .usb_rst(usb_rst),
    .w_en(w_en),
    .w_level(\w_level$10 ),
    .w_rdy(w_rdy)
  );
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$37 ) begin end
    \r_en$12  = 1'h0;
    if (\$5 ) begin
      \r_en$12  = 1'h1;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$37 ) begin end
    \$9  = \$6 [2:0];
    if (usb_rst) begin
      \$9  = 3'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$37 ) begin end
    \$10  = r_data;
    if (\$8 ) begin
      \$10  = \r_data$18 ;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$37 ) begin end
    \$11  = r_rdy;
    if (\$8 ) begin
      \$11  = \r_rdy$19 ;
    end
    if (usb_rst) begin
      \$11  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$37 ) begin end
    \$12  = r_rst;
    if (\$8 ) begin
      \$12  = \r_rst$21 ;
    end
    if (usb_rst) begin
      \$12  = 1'h0;
    end
  end
  assign w_data = { \port$1615$0 [0], \port$1615$0 [1], \port$1615$0 [2], \port$1615$0 [3], \port$1615$0 [4], \port$1615$0 [5], \port$1615$0 [6], \port$1615$0 [7] };
  assign \w_data$1  = { \port$1615$0 [0], \port$1615$0 [1], \port$1615$0 [2], \port$1615$0 [3], \port$1615$0 [4], \port$1615$0 [5], \port$1615$0 [6], \port$1615$0 [7] };
  assign \w_rdy$3  = w_rdy;
  assign \w_en$5  = w_en;
  assign r_consume_buffered = \$2 [0];
  assign r_en = 1'h1;
  assign w_level = \$3 [2:0];
  assign usb_io_rst = 1'h0;
  assign \$5  = 1'h1;
  assign \$8  = 1'h1;
endmodule

module \LunaUSBSerialDevice.usb0.usb.translator.receiver.payload_fifo.consume_buffered_cdc (r_consume_buffered, stage3, usb_io_clk);
  input r_consume_buffered;
  wire r_consume_buffered;
  reg stage0 = 1'h0;
  reg stage1 = 1'h0;
  reg stage2 = 1'h0;
  output stage3;
  reg stage3 = 1'h0;
  input usb_io_clk;
  wire usb_io_clk;
  wire usb_io_rst;
  (* init = 1'h0 *)
  wire w_consume_buffered;
  always @(posedge usb_io_clk)
    stage0 <= r_consume_buffered;
  always @(posedge usb_io_clk)
    stage1 <= stage0;
  always @(posedge usb_io_clk)
    stage2 <= stage1;
  always @(posedge usb_io_clk)
    stage3 <= stage2;
  assign usb_io_rst = 1'h0;
  assign w_consume_buffered = stage3;
endmodule

module \LunaUSBSerialDevice.usb0.usb.translator.receiver.payload_fifo.unbuffered (usb_rst, usb_io_clk, r_level, w_rdy, r_rdy, r_data, w_en, \port$1615$0 , r_en, w_level, \r_rst$31 , usb_clk);
  reg \$auto$verilog_backend.cc:2373:dump_module$38  = 0;
  wire \$1 ;
  wire \$10 ;
  wire \$11 ;
  wire \$12 ;
  wire \$13 ;
  wire \$14 ;
  wire \$15 ;
  wire [3:0] \$16 ;
  wire [2:0] \$17 ;
  wire \$18 ;
  wire \$19 ;
  wire [3:0] \$2 ;
  wire \$20 ;
  wire \$21 ;
  wire \$22 ;
  wire \$23 ;
  wire [3:0] \$24 ;
  wire [2:0] \$25 ;
  wire \$26 ;
  wire \$27 ;
  wire \$28 ;
  wire \$29 ;
  wire \$3 ;
  wire \$30 ;
  wire \$31 ;
  wire [2:0] \$32 ;
  wire [2:0] \$33 ;
  wire [2:0] \$34 ;
  wire [2:0] \$35 ;
  reg [2:0] \$36 ;
  reg [2:0] \$37 ;
  reg \$38 ;
  wire [3:0] \$4 ;
  wire \$5 ;
  wire \$6 ;
  wire \$7 ;
  wire \$8 ;
  wire \$9 ;
  reg [2:0] consume_r_bin = 3'h0;
  reg [2:0] consume_r_gry = 3'h0;
  wire [2:0] consume_r_nxt;
  reg [2:0] consume_w_bin = 3'h0;
  wire [2:0] consume_w_gry;
  input [7:0] \port$1615$0 ;
  wire [7:0] \port$1615$0 ;
  wire [2:0] produce_r_bin;
  wire [2:0] produce_r_gry;
  reg [2:0] produce_w_bin = 3'h0;
  reg [2:0] produce_w_gry = 3'h0;
  wire [2:0] produce_w_nxt;
  output [7:0] r_data;
  wire [7:0] r_data;
  reg r_empty;
  input r_en;
  wire r_en;
  output [2:0] r_level;
  wire [2:0] r_level;
  wire [1:0] r_port__addr;
  wire [7:0] r_port__data;
  wire r_port__en;
  output r_rdy;
  wire r_rdy;
  wire r_rst;
  output \r_rst$31 ;
  reg \r_rst$31  = 1'h0;
  input usb_clk;
  wire usb_clk;
  input usb_io_clk;
  wire usb_io_clk;
  wire usb_io_rst;
  input usb_rst;
  wire usb_rst;
  wire [7:0] w_data;
  input w_en;
  wire w_en;
  wire w_full;
  output [2:0] w_level;
  reg [2:0] w_level = 3'h0;
  wire [1:0] w_port__addr;
  wire [7:0] w_port__data;
  wire w_port__en;
  output w_rdy;
  wire w_rdy;
  reg [7:0] storage [3:0];
  initial begin
    storage[0] = 8'h00;
    storage[1] = 8'h00;
    storage[2] = 8'h00;
    storage[3] = 8'h00;
  end
  always @(posedge usb_io_clk) begin
    if (w_port__en)
      storage[produce_w_bin[1:0]] <= { \port$1615$0 [0], \port$1615$0 [1], \port$1615$0 [2], \port$1615$0 [3], \port$1615$0 [4], \port$1615$0 [5], \port$1615$0 [6], \port$1615$0 [7] };
  end
  reg [7:0] _0_;
  always @(posedge usb_clk) begin
    _0_ <= storage[\$4 [1:0]];
  end
  assign r_data = _0_;
  assign \$1  = w_rdy & w_en;
  assign \$2  = produce_w_bin + \$1 ;
  assign \$3  = r_rdy & r_en;
  assign \$4  = consume_r_bin + \$3 ;
  assign \$6  = \$5  ^ produce_r_gry[1];
  assign \$7  = \$6  ^ produce_r_gry[0];
  assign \$9  = \$8  ^ produce_r_gry[1];
  assign \$11  = produce_w_gry[2] != consume_w_gry[2];
  assign \$12  = produce_w_gry[1] != consume_w_gry[1];
  assign \$13  = \$11  & \$12 ;
  assign \$14  = produce_w_gry[0] == consume_w_gry[0];
  assign w_full = \$13  & \$14 ;
  assign \$15  = consume_r_gry == produce_r_gry;
  assign \$16  = { \$10 , \$9 , \$7  } - consume_r_bin;
  assign w_port__en = w_rdy & w_en;
  assign w_rdy = ~ w_full;
  assign r_rdy = ~ r_empty;
  assign \$17  = \$2 [2:0] ^ { 1'h0, \$2 [2:1] };
  assign \$19  = \$18  ^ consume_w_gry[1];
  assign \$20  = \$19  ^ consume_w_gry[0];
  assign \$22  = \$21  ^ consume_w_gry[1];
  assign \$24  = produce_w_bin - consume_w_bin;
  assign \$25  = \$4 [2:0] ^ { 1'h0, \$4 [2:1] };
  assign \$27  = \$26  ^ produce_r_gry[1];
  assign \$28  = \$27  ^ produce_r_gry[0];
  assign \$30  = \$29  ^ produce_r_gry[1];
  always @(posedge usb_io_clk)
    produce_w_bin <= \$32 ;
  always @(posedge usb_io_clk)
    produce_w_gry <= \$33 ;
  always @(posedge usb_io_clk)
    consume_w_bin <= \$34 ;
  always @(posedge usb_io_clk)
    w_level <= \$35 ;
  always @(posedge usb_clk)
    consume_r_bin <= \$36 ;
  always @(posedge usb_clk)
    consume_r_gry <= \$37 ;
  always @(posedge usb_clk)
    \r_rst$31  <= \$38 ;
  \LunaUSBSerialDevice.usb0.usb.translator.receiver.payload_fifo.unbuffered.consume_cdc  consume_cdc (
    .consume_r_gry(consume_r_gry),
    .stage1(consume_w_gry),
    .usb_io_clk(usb_io_clk)
  );
  \LunaUSBSerialDevice.usb0.usb.translator.receiver.payload_fifo.unbuffered.produce_cdc  produce_cdc (
    .produce_w_gry(produce_w_gry),
    .stage1(produce_r_gry),
    .usb_clk(usb_clk),
    .usb_rst(usb_rst)
  );
  \LunaUSBSerialDevice.usb0.usb.translator.receiver.payload_fifo.unbuffered.rst_cdc  rst_cdc (
    .async_ff_clk(usb_clk),
    .stage1(r_rst)
  );
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$38 ) begin end
    r_empty = \$15 ;
    if (r_rst) begin
      r_empty = 1'h1;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$38 ) begin end
    \$36  = \$4 [2:0];
    if (r_rst) begin
      \$36  = { \$31 , \$30 , \$28  };
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$38 ) begin end
    \$37  = \$25 ;
    if (r_rst) begin
      \$37  = produce_r_gry;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$38 ) begin end
    (* full_case = 32'd1 *)
    if (r_rst) begin
      \$38  = 1'h1;
    end else begin
      \$38  = 1'h0;
    end
    if (usb_rst) begin
      \$38  = 1'h0;
    end
  end
  assign produce_w_nxt = \$2 [2:0];
  assign consume_r_nxt = \$4 [2:0];
  assign produce_r_bin = { \$10 , \$9 , \$7  };
  assign w_port__addr = produce_w_bin[1:0];
  assign w_port__data = { \port$1615$0 [0], \port$1615$0 [1], \port$1615$0 [2], \port$1615$0 [3], \port$1615$0 [4], \port$1615$0 [5], \port$1615$0 [6], \port$1615$0 [7] };
  assign w_data = { \port$1615$0 [0], \port$1615$0 [1], \port$1615$0 [2], \port$1615$0 [3], \port$1615$0 [4], \port$1615$0 [5], \port$1615$0 [6], \port$1615$0 [7] };
  assign r_port__addr = \$4 [1:0];
  assign r_port__data = r_data;
  assign r_port__en = 1'h1;
  assign usb_io_rst = 1'h0;
  assign r_level = \$16 [2:0];
  assign \$35  = \$24 [2:0];
  assign \$34  = { \$23 , \$22 , \$20  };
  assign \$33  = \$17 ;
  assign \$32  = \$2 [2:0];
  assign \$5  = produce_r_gry[2];
  assign \$8  = produce_r_gry[2];
  assign \$10  = produce_r_gry[2];
  assign \$18  = consume_w_gry[2];
  assign \$21  = consume_w_gry[2];
  assign \$23  = consume_w_gry[2];
  assign \$26  = produce_r_gry[2];
  assign \$29  = produce_r_gry[2];
  assign \$31  = produce_r_gry[2];
endmodule

module \LunaUSBSerialDevice.usb0.usb.translator.receiver.payload_fifo.unbuffered.consume_cdc (consume_r_gry, stage1, usb_io_clk);
  input [2:0] consume_r_gry;
  wire [2:0] consume_r_gry;
  (* init = 3'h0 *)
  wire [2:0] consume_w_gry;
  reg [2:0] stage0 = 3'h0;
  output [2:0] stage1;
  reg [2:0] stage1 = 3'h0;
  input usb_io_clk;
  wire usb_io_clk;
  wire usb_io_rst;
  always @(posedge usb_io_clk)
    stage0 <= consume_r_gry;
  always @(posedge usb_io_clk)
    stage1 <= stage0;
  assign usb_io_rst = 1'h0;
  assign consume_w_gry = stage1;
endmodule

module \LunaUSBSerialDevice.usb0.usb.translator.receiver.payload_fifo.unbuffered.produce_cdc (usb_rst, produce_w_gry, stage1, usb_clk);
  (* init = 3'h0 *)
  wire [2:0] produce_r_gry;
  input [2:0] produce_w_gry;
  wire [2:0] produce_w_gry;
  reg [2:0] stage0 = 3'h0;
  output [2:0] stage1;
  reg [2:0] stage1 = 3'h0;
  input usb_clk;
  wire usb_clk;
  input usb_rst;
  wire usb_rst;
  always @(posedge usb_clk)
    stage0 <= produce_w_gry;
  always @(posedge usb_clk)
    stage1 <= stage0;
  assign produce_r_gry = stage1;
endmodule

module \LunaUSBSerialDevice.usb0.usb.translator.receiver.payload_fifo.unbuffered.rst_cdc (stage1, async_ff_clk);
  input async_ff_clk;
  wire async_ff_clk;
  wire async_ff_rst;
  (* init = 1'h1 *)
  wire r_rst;
  reg stage0 = 1'h1;
  output stage1;
  reg stage1 = 1'h1;
  wire usb_clk;
  wire usb_io_rst;
  always @(posedge async_ff_clk)
    stage0 <= 1'h0;
  always @(posedge async_ff_clk)
    stage1 <= stage0;
  assign async_ff_rst = 1'h0;
  assign usb_io_rst = 1'h0;
  assign usb_clk = async_ff_clk;
  assign r_rst = stage1;
endmodule

module \LunaUSBSerialDevice.usb0.usb.translator.receiver.shifter (i_valid, reset, i_data, o_put, o_data, usb_io_clk);
  reg \$auto$verilog_backend.cc:2373:dump_module$39  = 0;
  wire \$1 ;
  wire \$2 ;
  wire \$3 ;
  wire \$4 ;
  reg [8:0] \$5 ;
  input i_data;
  wire i_data;
  input i_valid;
  wire i_valid;
  output [7:0] o_data;
  wire [7:0] o_data;
  output o_put;
  reg o_put = 1'h0;
  input reset;
  wire reset;
  reg [8:0] shift_reg = 9'h001;
  input usb_io_clk;
  wire usb_io_clk;
  wire usb_io_rst;
  always @(posedge usb_io_clk)
    o_put <= \$4 ;
  always @(posedge usb_io_clk)
    shift_reg <= \$5 ;
  assign \$1  = ~ shift_reg[8];
  assign \$2  = shift_reg[7] & \$1 ;
  assign \$3  = \$2  & i_valid;
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$39 ) begin end
    \$5  = shift_reg;
    if (reset) begin
      \$5  = 9'h001;
    end
    if (i_valid) begin
      (* full_case = 32'd1 *)
      if (shift_reg[8]) begin
        \$5  = { 8'h01, i_data };
      end else begin
        \$5  = { shift_reg[7:0], i_data };
      end
    end
  end
  assign usb_io_rst = 1'h0;
  assign o_data = shift_reg[7:0];
  assign \$4  = \$3 ;
endmodule

module \LunaUSBSerialDevice.usb0.usb.translator.transmitter (usb_rst, usb_io_clk, i_valid, o_data_strobe, i_data, i_oe, o_oe, o_usbp, o_usbn, usb_clk);
  reg \$auto$verilog_backend.cc:2373:dump_module$40  = 0;
  wire \$1 ;
  wire \$10 ;
  wire \$11 ;
  wire \$12 ;
  wire \$13 ;
  wire \$14 ;
  wire [7:0] \$15 ;
  wire \$16 ;
  wire \$17 ;
  wire \$18 ;
  wire \$19 ;
  wire \$2 ;
  reg \$20 ;
  reg [7:0] \$21 ;
  reg [1:0] \$22 ;
  reg [1:0] \$23 ;
  wire \$3 ;
  wire \$4 ;
  wire \$5 ;
  wire \$6 ;
  wire \$7 ;
  wire \$8 ;
  wire \$9 ;
  reg bitstuff_valid_data = 1'h0;
  wire da_reset_shifter;
  wire fit_dat;
  wire fit_oe;
  (* enum_base_type = "fsmState" *)
  (* enum_value_00 = "IDLE/0" *)
  (* enum_value_01 = "SEND_SYNC/1" *)
  (* enum_value_10 = "SEND_DATA/2" *)
  (* enum_value_11 = "STUFF_LAST_BIT/3" *)
  reg [1:0] fsm_state = 2'h0;
  wire i_bit_strobe;
  wire i_clear;
  input [7:0] i_data;
  wire [7:0] i_data;
  wire \i_data$24 ;
  wire \i_data$7 ;
  wire [7:0] i_data_payload;
  wire i_enable;
  input i_oe;
  wire i_oe;
  wire \i_oe$26 ;
  input i_valid;
  wire i_valid;
  wire nrzi_dat;
  wire nrzi_oe;
  wire o_data;
  output o_data_strobe;
  wire o_data_strobe;
  wire o_empty;
  wire o_get;
  output o_oe;
  wire o_oe;
  wire \o_oe$33 ;
  wire o_stall;
  output o_usbn;
  wire o_usbn;
  wire \o_usbn$31 ;
  output o_usbp;
  wire o_usbp;
  wire \o_usbp$29 ;
  wire o_will_stall;
  wire sp_bit;
  wire sp_o_data_strobe;
  wire sp_reset_bitstuff;
  wire sp_reset_shifter;
  wire stall;
  wire state_data;
  reg [1:0] state_gray = 2'h0;
  wire state_sync;
  reg [7:0] sync_pulse = 8'h00;
  input usb_clk;
  wire usb_clk;
  input usb_io_clk;
  wire usb_io_clk;
  wire usb_io_rst;
  input usb_rst;
  wire usb_rst;
  assign i_enable = ~ stall;
  assign state_data = state_gray[0] & state_gray[1];
  assign \$1  = ~ state_gray[1];
  assign state_sync = state_gray[0] & \$1 ;
  assign fit_oe = state_data | state_sync;
  assign \$2  = state_data & \i_data$7 ;
  assign \$3  = ~ stall;
  assign \$4  = \$2  & \$3 ;
  assign fit_dat = \$4  | sync_pulse[0];
  assign \$5  = state_data & o_get;
  assign \$6  = ~ stall;
  assign \$7  = \$5  & \$6 ;
  assign o_data_strobe = \$7  & i_oe;
  assign \$8  = ! fsm_state;
  assign \$9  = fsm_state == 1'h1;
  assign \$10  = fsm_state == 2'h2;
  assign \$11  = fsm_state == 2'h3;
  assign \$12  = ~ stall;
  assign \$13  = \$12  & o_get;
  assign \$14  = \$13  & i_oe;
  assign \$16  = ~ i_oe;
  assign \$17  = \$16  & o_empty;
  assign \$18  = ~ stall;
  assign \$19  = \$17  & \$18 ;
  always @(posedge usb_clk)
    bitstuff_valid_data <= \$20 ;
  always @(posedge usb_clk)
    sync_pulse <= \$21 ;
  always @(posedge usb_clk)
    state_gray <= \$22 ;
  always @(posedge usb_clk)
    fsm_state <= \$23 ;
  \LunaUSBSerialDevice.usb0.usb.translator.transmitter.U$3  \U$3  (
    .fit_dat(fit_dat),
    .stage2(\i_data$24 ),
    .usb_io_clk(usb_io_clk)
  );
  \LunaUSBSerialDevice.usb0.usb.translator.transmitter.U$4  \U$4  (
    .fit_oe(fit_oe),
    .stage2(\i_oe$26 ),
    .usb_io_clk(usb_io_clk)
  );
  \LunaUSBSerialDevice.usb0.usb.translator.transmitter.bitstuff  bitstuff (
    .i_data(\i_data$7 ),
    .o_will_stall(o_will_stall),
    .stuff_bit(stall),
    .usb_clk(usb_clk),
    .usb_rst(usb_rst)
  );
  \LunaUSBSerialDevice.usb0.usb.translator.transmitter.nrzi  nrzi (
    .i_data(\i_data$24 ),
    .i_oe(\i_oe$26 ),
    .i_valid(i_valid),
    .o_oe(o_oe),
    .o_usbn(o_usbn),
    .o_usbp(o_usbp),
    .usb_io_clk(usb_io_clk)
  );
  \LunaUSBSerialDevice.usb0.usb.translator.transmitter.shifter  shifter (
    .empty(o_empty),
    .i_clear(i_clear),
    .i_data(i_data),
    .i_enable(i_enable),
    .o_data(\i_data$7 ),
    .o_get(o_get),
    .usb_clk(usb_clk),
    .usb_rst(usb_rst)
  );
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$40 ) begin end
    \$20  = \$14 ;
    if (usb_rst) begin
      \$20  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$40 ) begin end
    \$21  = sync_pulse;
    casez (fsm_state)
      2'h0:
          if (i_oe) begin
            \$21  = 8'h80;
          end
      2'h1:
          \$21  = \$15 ;
    endcase
    if (usb_rst) begin
      \$21  = 8'h00;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$40 ) begin end
    \$22  = state_gray;
    (* full_case = 32'd1 *)
    casez (fsm_state)
      2'h0:
          (* full_case = 32'd1 *)
          if (i_oe) begin
            \$22  = 2'h1;
          end else begin
            \$22  = 2'h0;
          end
      2'h1:
          (* full_case = 32'd1 *)
          if (sync_pulse[0]) begin
            \$22  = 2'h3;
          end else begin
            \$22  = 2'h1;
          end
      2'h2:
          (* full_case = 32'd1 *)
          if (\$19 ) begin
            (* full_case = 32'd1 *)
            if (o_will_stall) begin
            end else begin
              \$22  = 2'h2;
            end
          end else begin
            \$22  = 2'h3;
          end
      2'h3:
          \$22  = 2'h2;
    endcase
    if (usb_rst) begin
      \$22  = 2'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$40 ) begin end
    \$23  = fsm_state;
    (* full_case = 32'd1 *)
    casez (fsm_state)
      2'h0:
          if (i_oe) begin
            \$23  = 2'h1;
          end
      2'h1:
          if (sync_pulse[0]) begin
            \$23  = 2'h2;
          end
      2'h2:
          if (\$19 ) begin
            (* full_case = 32'd1 *)
            if (o_will_stall) begin
              \$23  = 2'h3;
            end else begin
              \$23  = 2'h0;
            end
          end
      2'h3:
          \$23  = 2'h0;
    endcase
    if (usb_rst) begin
      \$23  = 2'h0;
    end
  end
  assign i_data_payload = i_data;
  assign da_reset_shifter = 1'h0;
  assign sp_reset_shifter = sync_pulse[1];
  assign o_data = \i_data$7 ;
  assign o_stall = stall;
  assign sp_bit = sync_pulse[0];
  assign sp_reset_bitstuff = sync_pulse[0];
  assign sp_o_data_strobe = sync_pulse[5];
  assign i_bit_strobe = i_valid;
  assign nrzi_dat = \i_data$24 ;
  assign nrzi_oe = \i_oe$26 ;
  assign \o_usbp$29  = o_usbp;
  assign \o_usbn$31  = o_usbn;
  assign \o_oe$33  = o_oe;
  assign usb_io_rst = 1'h0;
  assign i_clear = sync_pulse[1];
  assign \$15  = { 1'h0, sync_pulse[7:1] };
endmodule

module \LunaUSBSerialDevice.usb0.usb.translator.transmitter.U$3 (fit_dat, stage2, usb_io_clk);
  input fit_dat;
  wire fit_dat;
  (* init = 1'h0 *)
  wire nrzi_dat;
  reg stage0 = 1'h0;
  reg stage1 = 1'h0;
  output stage2;
  reg stage2 = 1'h0;
  input usb_io_clk;
  wire usb_io_clk;
  wire usb_io_rst;
  always @(posedge usb_io_clk)
    stage0 <= fit_dat;
  always @(posedge usb_io_clk)
    stage1 <= stage0;
  always @(posedge usb_io_clk)
    stage2 <= stage1;
  assign usb_io_rst = 1'h0;
  assign nrzi_dat = stage2;
endmodule

module \LunaUSBSerialDevice.usb0.usb.translator.transmitter.U$4 (fit_oe, stage2, usb_io_clk);
  input fit_oe;
  wire fit_oe;
  (* init = 1'h0 *)
  wire nrzi_oe;
  reg stage0 = 1'h0;
  reg stage1 = 1'h0;
  output stage2;
  reg stage2 = 1'h0;
  input usb_io_clk;
  wire usb_io_clk;
  wire usb_io_rst;
  always @(posedge usb_io_clk)
    stage0 <= fit_oe;
  always @(posedge usb_io_clk)
    stage1 <= stage0;
  always @(posedge usb_io_clk)
    stage2 <= stage1;
  assign usb_io_rst = 1'h0;
  assign nrzi_oe = stage2;
endmodule

module \LunaUSBSerialDevice.usb0.usb.translator.transmitter.bitstuff (usb_rst, i_data, o_will_stall, stuff_bit, usb_clk);
  reg \$auto$verilog_backend.cc:2373:dump_module$41  = 0;
  wire \$1 ;
  wire \$2 ;
  wire \$3 ;
  wire \$4 ;
  wire \$5 ;
  wire \$6 ;
  wire \$7 ;
  reg [2:0] \$8 ;
  reg \$9 ;
  (* enum_base_type = "fsmState" *)
  (* enum_value_000 = "D0/0" *)
  (* enum_value_001 = "D1/1" *)
  (* enum_value_010 = "D2/2" *)
  (* enum_value_011 = "D3/3" *)
  (* enum_value_100 = "D4/4" *)
  (* enum_value_101 = "D5/5" *)
  (* enum_value_110 = "D6/6" *)
  reg [2:0] fsm_state = 3'h0;
  input i_data;
  wire i_data;
  reg o_data = 1'h0;
  wire o_stall;
  output o_will_stall;
  reg o_will_stall;
  output stuff_bit;
  reg stuff_bit;
  input usb_clk;
  wire usb_clk;
  input usb_rst;
  wire usb_rst;
  assign \$1  = ! fsm_state;
  assign \$2  = fsm_state == 1'h1;
  assign \$3  = fsm_state == 2'h2;
  assign \$4  = fsm_state == 2'h3;
  assign \$5  = fsm_state == 3'h4;
  assign \$6  = fsm_state == 3'h5;
  assign \$7  = fsm_state == 3'h6;
  always @(posedge usb_clk)
    fsm_state <= \$8 ;
  always @(posedge usb_clk)
    o_data <= \$9 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$41 ) begin end
    \$8  = fsm_state;
    casez (fsm_state)
      3'h0:
          (* full_case = 32'd1 *)
          if (i_data) begin
            \$8  = 3'h1;
          end else begin
            \$8  = 3'h0;
          end
      3'h1:
          (* full_case = 32'd1 *)
          if (i_data) begin
            \$8  = 3'h2;
          end else begin
            \$8  = 3'h0;
          end
      3'h2:
          (* full_case = 32'd1 *)
          if (i_data) begin
            \$8  = 3'h3;
          end else begin
            \$8  = 3'h0;
          end
      3'h3:
          (* full_case = 32'd1 *)
          if (i_data) begin
            \$8  = 3'h4;
          end else begin
            \$8  = 3'h0;
          end
      3'h4:
          (* full_case = 32'd1 *)
          if (i_data) begin
            \$8  = 3'h5;
          end else begin
            \$8  = 3'h0;
          end
      3'h5:
          (* full_case = 32'd1 *)
          if (i_data) begin
            \$8  = 3'h6;
          end else begin
            \$8  = 3'h0;
          end
      3'h6:
          \$8  = 3'h0;
    endcase
    if (usb_rst) begin
      \$8  = 3'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$41 ) begin end
    (* full_case = 32'd1 *)
    if (stuff_bit) begin
      \$9  = 1'h0;
    end else begin
      \$9  = i_data;
    end
    if (usb_rst) begin
      \$9  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$41 ) begin end
    o_will_stall = 1'h0;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h3:
          /* empty */;
      3'h4:
          /* empty */;
      3'h5:
          if (i_data) begin
            o_will_stall = 1'h1;
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$41 ) begin end
    stuff_bit = 1'h0;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h3:
          /* empty */;
      3'h4:
          /* empty */;
      3'h5:
          /* empty */;
      3'h6:
          stuff_bit = 1'h1;
    endcase
  end
  assign o_stall = stuff_bit;
endmodule

module \LunaUSBSerialDevice.usb0.usb.translator.transmitter.nrzi (i_valid, o_oe, o_usbp, o_usbn, i_data, i_oe, usb_io_clk);
  reg \$auto$verilog_backend.cc:2373:dump_module$42  = 0;
  wire \$1 ;
  reg [2:0] \$10 ;
  wire \$11 ;
  wire \$12 ;
  wire \$13 ;
  wire \$2 ;
  wire \$3 ;
  wire \$4 ;
  wire \$5 ;
  wire \$6 ;
  wire \$7 ;
  wire \$8 ;
  wire \$9 ;
  (* enum_base_type = "fsmState" *)
  (* enum_value_000 = "IDLE/0" *)
  (* enum_value_001 = "DK/1" *)
  (* enum_value_010 = "DJ/2" *)
  (* enum_value_011 = "SE0A/3" *)
  (* enum_value_100 = "SE0B/4" *)
  (* enum_value_101 = "EOPJ/5" *)
  reg [2:0] fsm_state = 3'h0;
  input i_data;
  wire i_data;
  input i_oe;
  wire i_oe;
  input i_valid;
  wire i_valid;
  output o_oe;
  reg o_oe = 1'h0;
  output o_usbn;
  reg o_usbn = 1'h0;
  output o_usbp;
  reg o_usbp = 1'h0;
  reg oe;
  input usb_io_clk;
  wire usb_io_clk;
  wire usb_io_rst;
  reg usbn;
  reg usbp;
  assign \$1  = ! fsm_state;
  assign \$2  = fsm_state == 1'h1;
  assign \$3  = fsm_state == 2'h2;
  assign \$4  = fsm_state == 2'h3;
  assign \$5  = fsm_state == 3'h4;
  assign \$6  = fsm_state == 3'h5;
  assign \$7  = i_valid & i_oe;
  assign \$8  = ~ i_oe;
  assign \$9  = ~ i_oe;
  always @(posedge usb_io_clk)
    fsm_state <= \$10 ;
  always @(posedge usb_io_clk)
    o_oe <= \$11 ;
  always @(posedge usb_io_clk)
    o_usbp <= \$12 ;
  always @(posedge usb_io_clk)
    o_usbn <= \$13 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$42 ) begin end
    usbp = 1'h0;
    casez (fsm_state)
      3'h0:
          usbp = 1'h1;
      3'h2:
          usbp = 1'h1;
      3'h1:
          usbp = 1'h0;
      3'h3:
          usbp = 1'h0;
      3'h4:
          usbp = 1'h0;
      3'h5:
          usbp = 1'h1;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$42 ) begin end
    usbn = 1'h0;
    casez (fsm_state)
      3'h0:
          usbn = 1'h0;
      3'h2:
          usbn = 1'h0;
      3'h1:
          usbn = 1'h1;
      3'h3:
          usbn = 1'h0;
      3'h4:
          usbn = 1'h0;
      3'h5:
          usbn = 1'h0;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$42 ) begin end
    oe = 1'h0;
    casez (fsm_state)
      3'h0:
          oe = 1'h0;
      3'h2:
          oe = 1'h1;
      3'h1:
          oe = 1'h1;
      3'h3:
          oe = 1'h1;
      3'h4:
          oe = 1'h1;
      3'h5:
          oe = 1'h1;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$42 ) begin end
    \$10  = fsm_state;
    casez (fsm_state)
      3'h0:
          if (\$7 ) begin
            \$10  = 3'h1;
          end
      3'h2:
          if (i_valid) begin
            (* full_case = 32'd1 *)
            if (\$8 ) begin
              \$10  = 3'h3;
            end else if (i_data) begin
              \$10  = 3'h2;
            end else begin
              \$10  = 3'h1;
            end
          end
      3'h1:
          if (i_valid) begin
            (* full_case = 32'd1 *)
            if (\$9 ) begin
              \$10  = 3'h3;
            end else if (i_data) begin
              \$10  = 3'h1;
            end else begin
              \$10  = 3'h2;
            end
          end
      3'h3:
          if (i_valid) begin
            \$10  = 3'h4;
          end
      3'h4:
          if (i_valid) begin
            \$10  = 3'h5;
          end
      3'h5:
          if (i_valid) begin
            \$10  = 3'h0;
          end
    endcase
  end
  assign usb_io_rst = 1'h0;
  assign \$13  = usbn;
  assign \$12  = usbp;
  assign \$11  = oe;
endmodule

module \LunaUSBSerialDevice.usb0.usb.translator.transmitter.shifter (usb_rst, i_enable, i_clear, i_data, empty, o_data, o_get, usb_clk);
  reg \$auto$verilog_backend.cc:2373:dump_module$43  = 0;
  wire [7:0] \$1 ;
  wire [7:0] \$2 ;
  reg [7:0] \$3 ;
  reg [7:0] \$4 ;
  reg \$5 ;
  output empty;
  wire empty;
  input i_clear;
  wire i_clear;
  input [7:0] i_data;
  wire [7:0] i_data;
  input i_enable;
  wire i_enable;
  output o_data;
  wire o_data;
  wire o_empty;
  output o_get;
  reg o_get = 1'h0;
  reg [7:0] pos = 8'h01;
  reg [7:0] shifter = 8'h00;
  input usb_clk;
  wire usb_clk;
  input usb_rst;
  wire usb_rst;
  always @(posedge usb_clk)
    shifter <= \$4 ;
  always @(posedge usb_clk)
    o_get <= \$5 ;
  always @(posedge usb_clk)
    pos <= \$3 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$43 ) begin end
    \$4  = shifter;
    if (i_enable) begin
      \$4  = \$2 ;
      if (pos[0]) begin
        \$4  = i_data;
      end
    end
    if (i_clear) begin
      \$4  = 8'h00;
    end
    if (usb_rst) begin
      \$4  = 8'h00;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$43 ) begin end
    \$5  = o_get;
    if (i_enable) begin
      \$5  = pos[0];
    end
    if (usb_rst) begin
      \$5  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$43 ) begin end
    \$3  = pos;
    if (i_enable) begin
      \$3  = \$1 ;
      if (pos[0]) begin
        \$3  = 8'h80;
      end
    end
    if (i_clear) begin
      \$3  = 8'h01;
    end
    if (usb_rst) begin
      \$3  = 8'h01;
    end
  end
  assign o_empty = pos[0];
  assign empty = pos[0];
  assign o_data = shifter[0];
  assign \$1  = { 1'h0, pos[7:1] };
  assign \$2  = { 1'h0, shifter[7:1] };
endmodule

module \LunaUSBSerialDevice.usb0.usb.transmitter (usb_rst, crc, \valid$6 , first, last, \ready$8 , ready, start, data, valid, data_pid, payload, usb_clk);
  reg \$auto$verilog_backend.cc:2373:dump_module$44  = 0;
  wire \$1 ;
  wire \$10 ;
  wire \$11 ;
  reg [7:0] \$12 ;
  reg \$13 ;
  reg [2:0] \$14 ;
  reg [7:0] \$15 ;
  wire \$2 ;
  wire \$3 ;
  wire \$4 ;
  wire \$5 ;
  reg [7:0] \$6 ;
  wire \$7 ;
  wire \$8 ;
  wire \$9 ;
  input [15:0] crc;
  wire [15:0] crc;
  reg [7:0] current_data_pid = 8'h00;
  output [7:0] data;
  reg [7:0] data;
  input [1:0] data_pid;
  wire [1:0] data_pid;
  input first;
  wire first;
  (* enum_base_type = "fsmState" *)
  (* enum_value_000 = "IDLE/0" *)
  (* enum_value_001 = "SEND_PID/1" *)
  (* enum_value_010 = "SEND_CRC_FIRST/2" *)
  (* enum_value_011 = "SEND_PAYLOAD/3" *)
  (* enum_value_100 = "SEND_CRC_SECOND/4" *)
  reg [2:0] fsm_state = 3'h0;
  reg is_zlp = 1'h0;
  input last;
  wire last;
  input [7:0] payload;
  wire [7:0] payload;
  output ready;
  reg ready;
  input \ready$8 ;
  wire \ready$8 ;
  reg [7:0] remaining_crc = 8'h00;
  output start;
  reg start;
  input usb_clk;
  wire usb_clk;
  input usb_rst;
  wire usb_rst;
  output valid;
  reg valid;
  input \valid$6 ;
  wire \valid$6 ;
  assign \$1  = ! fsm_state;
  assign \$2  = fsm_state == 1'h1;
  assign \$3  = fsm_state == 2'h2;
  assign \$4  = fsm_state == 2'h3;
  assign \$5  = fsm_state == 3'h4;
  assign \$7  = first & \valid$6 ;
  assign \$8  = last & \valid$6 ;
  assign \$9  = ~ \valid$6 ;
  assign \$10  = last | \$9 ;
  assign \$11  = \ready$8  & \$10 ;
  always @(posedge usb_clk)
    current_data_pid <= \$12 ;
  always @(posedge usb_clk)
    is_zlp <= \$13 ;
  always @(posedge usb_clk)
    fsm_state <= \$14 ;
  always @(posedge usb_clk)
    remaining_crc <= \$15 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$44 ) begin end
    (* full_case = 32'd1 *)
    casez (data_pid)
      2'h0:
          \$6  = 8'hc3;
      2'h1:
          \$6  = 8'h4b;
      2'h2:
          \$6  = 8'h87;
      2'h3:
          \$6  = 8'h0f;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$44 ) begin end
    ready = 1'h0;
    casez (fsm_state)
      3'h0:
          ready = 1'h0;
      3'h1:
          ready = 1'h0;
      3'h3:
          ready = \ready$8 ;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$44 ) begin end
    start = 1'h0;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          start = 1'h1;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$44 ) begin end
    data = 8'h00;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          data = current_data_pid;
      3'h3:
          data = payload;
      3'h2:
          data = crc[7:0];
      3'h4:
          data = remaining_crc;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$44 ) begin end
    valid = 1'h0;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          valid = 1'h1;
      3'h3:
          valid = \valid$6 ;
      3'h2:
          valid = 1'h1;
      3'h4:
          valid = 1'h1;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$44 ) begin end
    \$12  = current_data_pid;
    casez (fsm_state)
      3'h0:
          \$12  = \$6 ;
    endcase
    if (usb_rst) begin
      \$12  = 8'h00;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$44 ) begin end
    \$13  = is_zlp;
    casez (fsm_state)
      3'h0:
          if (\$7 ) begin
            \$13  = 1'h0;
          end else if (\$8 ) begin
            \$13  = 1'h1;
          end
    endcase
    if (usb_rst) begin
      \$13  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$44 ) begin end
    \$14  = fsm_state;
    casez (fsm_state)
      3'h0:
          if (\$7 ) begin
            \$14  = 3'h1;
          end else if (\$8 ) begin
            \$14  = 3'h1;
          end
      3'h1:
          if (\ready$8 ) begin
            (* full_case = 32'd1 *)
            if (is_zlp) begin
              \$14  = 3'h2;
            end else begin
              \$14  = 3'h3;
            end
          end
      3'h3:
          if (\$11 ) begin
            \$14  = 3'h2;
          end
      3'h2:
          if (\ready$8 ) begin
            \$14  = 3'h4;
          end
      3'h4:
          if (\ready$8 ) begin
            \$14  = 3'h0;
          end
    endcase
    if (usb_rst) begin
      \$14  = 3'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$44 ) begin end
    \$15  = remaining_crc;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h3:
          /* empty */;
      3'h2:
          \$15  = crc[15:8];
    endcase
    if (usb_rst) begin
      \$15  = 8'h00;
    end
  end
endmodule

module \LunaUSBSerialDevice.usb0.usb.tx_multiplexer (ready, valid, \data$6 , \data$7 , \valid$2 , \valid$3 , \data$8 , data, \valid$9 );
  reg \$auto$verilog_backend.cc:2373:dump_module$45  = 0;
  wire \$1 ;
  wire \$2 ;
  output [7:0] data;
  reg [7:0] data;
  input [7:0] \data$6 ;
  wire [7:0] \data$6 ;
  input [7:0] \data$7 ;
  wire [7:0] \data$7 ;
  input [7:0] \data$8 ;
  wire [7:0] \data$8 ;
  wire [2:0] i;
  wire [1:0] o;
  input ready;
  wire ready;
  wire \ready$11 ;
  wire \ready$12 ;
  wire \ready$13 ;
  input valid;
  wire valid;
  input \valid$2 ;
  wire \valid$2 ;
  input \valid$3 ;
  wire \valid$3 ;
  output \valid$9 ;
  wire \valid$9 ;
  assign \$2  = \$1  | \valid$2 ;
  assign \valid$9  = \$2  | \valid$3 ;
  \LunaUSBSerialDevice.usb0.usb.tx_multiplexer.encoder  encoder (
    .i(i),
    .o(o)
  );
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$45 ) begin end
    data = 8'h00;
    casez (o)
      2'h0:
          data = \data$6 ;
      2'h1:
          data = \data$7 ;
      2'h2:
          data = \data$8 ;
    endcase
  end
  assign \ready$11  = ready;
  assign \ready$12  = ready;
  assign \ready$13  = ready;
  assign i[2] = \valid$3 ;
  assign i[1] = \valid$2 ;
  assign i[0] = valid;
  assign \$1  = valid;
endmodule

module \LunaUSBSerialDevice.usb0.usb.tx_multiplexer.encoder (o, i);
  reg \$auto$verilog_backend.cc:2373:dump_module$46  = 0;
  input [2:0] i;
  wire [2:0] i;
  reg n;
  output [1:0] o;
  reg [1:0] o;
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$46 ) begin end
    o = 2'h0;
    casez (i)
      3'h1:
          o = 2'h0;
      3'h2:
          o = 2'h1;
      3'h4:
          o = 2'h2;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$46 ) begin end
    n = 1'h0;
    (* full_case = 32'd1 *)
    casez (i)
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h4:
          /* empty */;
      default:
          n = 1'h1;
    endcase
  end
endmodule

module \LunaUSBSerialDevice.usb_reset (rst, phy_reset, clk);
  reg \$auto$verilog_backend.cc:2373:dump_module$47  = 0;
  wire \$1 ;
  reg [1:0] \$10 ;
  wire \$2 ;
  wire [22:0] \$3 ;
  wire [22:0] \$4 ;
  wire \$5 ;
  wire [22:0] \$6 ;
  wire [22:0] \$7 ;
  wire \$8 ;
  reg [21:0] \$9 ;
  input clk;
  wire clk;
  reg [21:0] cycles_in_reset = 22'h000000;
  (* enum_base_type = "fsmState" *)
  (* enum_value_00 = "RESETTING/0" *)
  (* enum_value_01 = "IDLE/1" *)
  (* enum_value_10 = "DEFERRING_STARTUP/2" *)
  reg [1:0] fsm_state = 2'h0;
  output phy_reset;
  wire phy_reset;
  wire phy_stop;
  input rst;
  wire rst;
  wire trigger;
  assign phy_stop = ~ \$1 ;
  assign phy_reset = ! fsm_state;
  assign \$1  = fsm_state == 1'h1;
  assign \$2  = fsm_state == 2'h2;
  assign \$3  = cycles_in_reset + 1'h1;
  assign \$4  = cycles_in_reset + 1'h1;
  assign \$5  = \$4  == 22'h249f00;
  assign \$6  = cycles_in_reset + 1'h1;
  assign \$7  = cycles_in_reset + 1'h1;
  assign \$8  = \$7  == 18'h3a980;
  always @(posedge clk)
    cycles_in_reset <= \$9 ;
  always @(posedge clk)
    fsm_state <= \$10 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$47 ) begin end
    \$9  = cycles_in_reset;
    casez (fsm_state)
      2'h1:
          \$9  = 22'h000000;
      2'h0:
        begin
          \$9  = \$3 [21:0];
          if (\$5 ) begin
            \$9  = 22'h000000;
          end
        end
      2'h2:
        begin
          \$9  = \$6 [21:0];
          if (\$8 ) begin
            \$9  = 22'h000000;
          end
        end
    endcase
    if (rst) begin
      \$9  = 22'h000000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2373:dump_module$47 ) begin end
    \$10  = fsm_state;
    casez (fsm_state)
      2'h1:
          /* empty */;
      2'h0:
          if (\$5 ) begin
            \$10  = 2'h2;
          end
      2'h2:
          if (\$8 ) begin
            \$10  = 2'h1;
          end
    endcase
    if (rst) begin
      \$10  = 2'h0;
    end
  end
  assign trigger = 1'h0;
endmodule
