name: build-SoC

on:
  push:


jobs:
  # Main build, creates firmware update image
  build-soc:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v5
      with:
        submodules: false # Note: not Recursive (Causes error with serv)

    - name: submodule init
      run: git submodule update --init --recursive

    - uses: YosysHQ/setup-oss-cad-suite@v3
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
    - run: yosys --version

    - name: configure riscv-toolchain
      run: |
        wget -q https://github.com/xpack-dev-tools/riscv-none-elf-gcc-xpack/releases/download/v14.2.0-3/xpack-riscv-none-elf-gcc-14.2.0-3-linux-x64.tar.gz
        tar -xzf xpack-riscv-none-elf-gcc-14.2.0-3-linux-x64.tar.gz
        rm -rf xpack-riscv-none-elf-gcc-14.2.0-3-linux-x64.tar.gz
        echo "`pwd`/xpack-riscv-none-elf-gcc-14.2.0-3/bin" >> $GITHUB_PATH

    - name: Install meson & ninja
      run: sudo apt update && sudo apt install meson ninja-build

    - name: configure python
      run: |
        python3 -m pip install setuptools
        python3 -m pip install pycrc Pillow wheel Sphinx sphinxcontrib-wavedrom 

    - name: Litex build
      working-directory: ./gateware
      run: |
        python3 DiVA-Bitstream.py

    - name: Upload build
      uses: actions/upload-artifact@v4
      with:
        name: DiVA build Folder
        path: ${{ github.workspace }}/gateware/build

    - name: Upload dfu update file
      uses: actions/upload-artifact@v4
      with:
        name: DiVA firmware update
        path: ${{ github.workspace }}/gateware/build/gateware/DiVA.dfu
  
  # Software build, create windows app to perform the dfu update
  build-sw:
    runs-on: windows-latest
    needs: build-soc
    steps:
    - uses: actions/checkout@master

    - name: Download DFU Binary
      uses: actions/download-artifact@v4
      with:
        name: DiVA firmware update

    - shell: bash
      run: mv DiVA.dfu software/fw-updater/Resources/DiVA.dfu

    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.0.2

    - name: MSBuild
      working-directory: software/fw-updater
      run: msbuild fw-updater.csproj /p:Configuration=Release

    - name: Upload Updater
      uses: actions/upload-artifact@v4
      with:
        name: Windows update tool
        path: software/fw-updater/bin/Release/fw-updater.exe
  
  # release:
  #   name: Create Release
  #   needs: build-sw
  #   if: ${{ contains( github.ref, 'refs/tags/') }}
  #   runs-on: ubuntu-latest
  #   steps:
  #     #- name: Checkout code
  #     #  uses: actions/checkout@v2
  #     - name: Download DFU Binary
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: DiVA firmware update

  #     - name: Download DFU Binary
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: Windows update tool

  #     - name: Create Release
  #       id: create-release
  #       uses: actions/create-release@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
  #       with:
  #         tag_name: ${{ github.ref }}
  #         release_name: Release ${{ github.ref }}
  #         body: |
  #           Changes in this Release
  #           - First Change
  #           - Second Change
  #         draft: true
  #         prerelease: false
  #     - name: Upload Release Asset
  #       uses: actions/upload-release-asset@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         upload_url: ${{ steps.create-release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
  #         asset_path: ./DiVA.dfu
  #         asset_name: DiVA.dfu
  #         asset_content_type: application/octet-stream

  #     - name: Upload Release Asset
  #       uses: actions/upload-release-asset@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         upload_url: ${{ steps.create-release.outputs.upload_url }}
  #         asset_path: ./fw-updater.exe
  #         asset_name: fw-updater.exe
  #         asset_content_type: application/octet-stream
